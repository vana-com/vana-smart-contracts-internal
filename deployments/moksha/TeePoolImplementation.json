{
  "address": "0x90D3ecf6644B2A1c094F00F06A7E2F1286111c87",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CancelDelayNotPassed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "ERC1967InvalidImplementation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1967NonPayable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientFee",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidJobStatus",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "JobCompleted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoActiveTee",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotJobOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NothingToClaim",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TeeAlreadyAdded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TeeNotActive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UUPSUnauthorizedCallContext",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "slot",
          "type": "bytes32"
        }
      ],
      "name": "UUPSUnsupportedProxiableUUID",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "teeAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "jobId",
          "type": "uint256"
        }
      ],
      "name": "JobCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "jobId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fileId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bidAmount",
          "type": "uint256"
        }
      ],
      "name": "JobSubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "attestator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "jobId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fileId",
          "type": "uint256"
        }
      ],
      "name": "ProofAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "teeAddress",
          "type": "address"
        }
      ],
      "name": "TeeAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "teeAddress",
          "type": "address"
        }
      ],
      "name": "TeeRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "UPGRADE_INTERFACE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activeTeeList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "activeTeeListAt",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "teeAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "url",
              "type": "string"
            },
            {
              "internalType": "enum ITeePool.TeeStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "withdrawnAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct ITeePool.TeeInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activeTeesCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "jobId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "score",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "timestamp",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "proofUrl",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "instruction",
                  "type": "string"
                }
              ],
              "internalType": "struct IDataRegistry.ProofData",
              "name": "data",
              "type": "tuple"
            }
          ],
          "internalType": "struct IDataRegistry.Proof",
          "name": "proof",
          "type": "tuple"
        }
      ],
      "name": "addProof",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "teeAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "url",
          "type": "string"
        }
      ],
      "name": "addTee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cancelDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "jobId",
          "type": "uint256"
        }
      ],
      "name": "cancelJob",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dataRegistry",
      "outputs": [
        {
          "internalType": "contract IDataRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dataRegistryAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "initialCancelDelay",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "teeAddress",
          "type": "address"
        }
      ],
      "name": "isTee",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "jobId",
          "type": "uint256"
        }
      ],
      "name": "jobTee",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "teeAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "url",
              "type": "string"
            },
            {
              "internalType": "enum ITeePool.TeeStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "withdrawnAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct ITeePool.TeeInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "jobId",
          "type": "uint256"
        }
      ],
      "name": "jobs",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "fileId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bidAmount",
              "type": "uint256"
            },
            {
              "internalType": "enum ITeePool.JobStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "addedTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "ownerAddress",
              "type": "address"
            }
          ],
          "internalType": "struct ITeePool.Job",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "jobsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "teeAddress",
          "type": "address"
        }
      ],
      "name": "removeTee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fileId",
          "type": "uint256"
        }
      ],
      "name": "requestContributionProof",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fileId",
          "type": "uint256"
        }
      ],
      "name": "submitJob",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "teeFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "teeList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "teeListAt",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "teeAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "url",
              "type": "string"
            },
            {
              "internalType": "enum ITeePool.TeeStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "withdrawnAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct ITeePool.TeeInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "teeAddress",
          "type": "address"
        }
      ],
      "name": "tees",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "teeAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "url",
              "type": "string"
            },
            {
              "internalType": "enum ITeePool.TeeStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "withdrawnAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct ITeePool.TeeInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "teesCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newCancelDelay",
          "type": "uint256"
        }
      ],
      "name": "updateCancelDelay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IDataRegistry",
          "name": "newDataRegistry",
          "type": "address"
        }
      ],
      "name": "updateDataRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newTeeFee",
          "type": "uint256"
        }
      ],
      "name": "updateTeeFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xad315e4c1b7764e144ef893e81548a6f2335c84d896360321b4a75db602fb5e7",
  "receipt": {
    "to": null,
    "from": "0x36dbFC70F9d51667BB28ED9aaC686c80244c0aA4",
    "contractAddress": "0x90D3ecf6644B2A1c094F00F06A7E2F1286111c87",
    "transactionIndex": 0,
    "gasUsed": "2032063",
    "logsBloom": "0x
    "blockHash": "0x61e882cf25f0f08abfe4f2c29f63aa0d9f53a08e7c24cf579f5dad2b18817d52",
    "transactionHash": "0xad315e4c1b7764e144ef893e81548a6f2335c84d896360321b4a75db602fb5e7",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 86201,
        "transactionHash": "0xad315e4c1b7764e144ef893e81548a6f2335c84d896360321b4a75db602fb5e7",
        "address": "0x90D3ecf6644B2A1c094F00F06A7E2F1286111c87",
        "topics": [
          "0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000ffffffffffffffff",
        "logIndex": 0,
        "blockHash": "0x61e882cf25f0f08abfe4f2c29f63aa0d9f53a08e7c24cf579f5dad2b18817d52"
      }
    ],
    "blockNumber": 86201,
    "cumulativeGasUsed": "2032063",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "607a8b9d3c8ae0738f4d31f58e0131ac",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CancelDelayNotPassed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidJobStatus\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"JobCompleted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoActiveTee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotJobOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NothingToClaim\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TeeAlreadyAdded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TeeNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teeAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"jobId\",\"type\":\"uint256\"}],\"name\":\"JobCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"jobId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fileId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"}],\"name\":\"JobSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"attestator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"jobId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fileId\",\"type\":\"uint256\"}],\"name\":\"ProofAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teeAddress\",\"type\":\"address\"}],\"name\":\"TeeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teeAddress\",\"type\":\"address\"}],\"name\":\"TeeRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeTeeList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"activeTeeListAt\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"teeAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"enum ITeePool.TeeStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ITeePool.TeeInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeTeesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"jobId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"proofUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"instruction\",\"type\":\"string\"}],\"internalType\":\"struct IDataRegistry.ProofData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct IDataRegistry.Proof\",\"name\":\"proof\",\"type\":\"tuple\"}],\"name\":\"addProof\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teeAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"name\":\"addTee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"jobId\",\"type\":\"uint256\"}],\"name\":\"cancelJob\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dataRegistry\",\"outputs\":[{\"internalType\":\"contract IDataRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dataRegistryAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialCancelDelay\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teeAddress\",\"type\":\"address\"}],\"name\":\"isTee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"jobId\",\"type\":\"uint256\"}],\"name\":\"jobTee\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"teeAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"enum ITeePool.TeeStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ITeePool.TeeInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"jobId\",\"type\":\"uint256\"}],\"name\":\"jobs\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"fileId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum ITeePool.JobStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"addedTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"internalType\":\"struct ITeePool.Job\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jobsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teeAddress\",\"type\":\"address\"}],\"name\":\"removeTee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fileId\",\"type\":\"uint256\"}],\"name\":\"requestContributionProof\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fileId\",\"type\":\"uint256\"}],\"name\":\"submitJob\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teeList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"teeListAt\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"teeAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"enum ITeePool.TeeStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ITeePool.TeeInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teeAddress\",\"type\":\"address\"}],\"name\":\"tees\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"teeAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"enum ITeePool.TeeStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ITeePool.TeeInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCancelDelay\",\"type\":\"uint256\"}],\"name\":\"updateCancelDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDataRegistry\",\"name\":\"newDataRegistry\",\"type\":\"address\"}],\"name\":\"updateDataRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTeeFee\",\"type\":\"uint256\"}],\"name\":\"updateTeeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"UUPSUnauthorizedCallContext()\":[{\"details\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"details\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"Claimed(address,uint256)\":{\"params\":{\"amount\":\"amount claimed\",\"teeAddress\":\"address of the tee\"}},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"JobCanceled(uint256)\":{\"params\":{\"jobId\":\"id of the job\"}},\"JobSubmitted(uint256,uint256,uint256)\":{\"params\":{\"bidAmount\":\"bid amount\",\"fileId\":\"id of the file\",\"jobId\":\"id of the job\"}},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"ProofAdded(address,uint256,uint256)\":{\"params\":{\"attestator\":\"address of the attestator\",\"fileId\":\"id of the file\",\"jobId\":\"id of the job\"}},\"TeeAdded(address)\":{\"params\":{\"teeAddress\":\"address of the tee\"}},\"TeeRemoved(address)\":{\"params\":{\"teeAddress\":\"address of the tee\"}},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"activeTeeListAt(uint256)\":{\"params\":{\"index\":\"index of the tee\"},\"returns\":{\"_0\":\"TeeDetails                       details of the tee\"}},\"addProof(uint256,(bytes,(uint256,uint256,string,string,string)))\":{\"params\":{\"jobId\":\"id of the job\",\"proof\":\"proof for the file\"}},\"addTee(address,string)\":{\"params\":{\"teeAddress\":\"address of the tee\",\"url\":\"url of the tee\"}},\"cancelJob(uint256)\":{\"params\":{\"jobId\":\"id of the job\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"initialize(address,address,uint256)\":{\"params\":{\"dataRegistryAddress\":\"address of the data registry contract\",\"initialCancelDelay\":\"initial cancel delay\",\"ownerAddress\":\"address of the owner\"}},\"jobTee(uint256)\":{\"params\":{\"jobId\":\"id of the job\"},\"returns\":{\"_0\":\"TeeDetails                       details of the tee\"}},\"jobs(uint256)\":{\"params\":{\"jobId\":\"id of the job\"},\"returns\":{\"_0\":\"Job                              details of the job\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"Pauses the contract\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"removeTee(address)\":{\"params\":{\"teeAddress\":\"address of the tee\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"requestContributionProof(uint256)\":{\"params\":{\"fileId\":\"id of the file\"}},\"submitJob(uint256)\":{\"params\":{\"fileId\":\"id of the file\"}},\"teeListAt(uint256)\":{\"params\":{\"index\":\"index of the tee\"},\"returns\":{\"_0\":\"TeeDetails                       details of the tee\"}},\"tees(address)\":{\"params\":{\"teeAddress\":\"address of the tee\"},\"returns\":{\"_0\":\"TeeDetails                       details of the tee\"}},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"Unpauses the contract\"},\"updateCancelDelay(uint256)\":{\"params\":{\"newCancelDelay\":\"new cancel delay\"}},\"updateDataRegistry(address)\":{\"params\":{\"newDataRegistry\":\"new file registry\"}},\"updateTeeFee(uint256)\":{\"params\":{\"newTeeFee\":\"new fee\"}},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"events\":{\"Claimed(address,uint256)\":{\"notice\":\"Triggered when a claim has been made\"},\"JobCanceled(uint256)\":{\"notice\":\"Triggered when a job has been cancelled\"},\"JobSubmitted(uint256,uint256,uint256)\":{\"notice\":\"Triggered when a job has been submitted\"},\"ProofAdded(address,uint256,uint256)\":{\"notice\":\"Triggered when a proof has been added\"},\"TeeAdded(address)\":{\"notice\":\"Triggered when a tee has been added\"},\"TeeRemoved(address)\":{\"notice\":\"Triggered when a tee has been removed\"}},\"kind\":\"user\",\"methods\":{\"activeTeeList()\":{\"notice\":\"Returns the list of active tees\"},\"activeTeeListAt(uint256)\":{\"notice\":\"Returns the details of the active tee at the given index\"},\"activeTeesCount()\":{\"notice\":\"Returns the number of active tees\"},\"addProof(uint256,(bytes,(uint256,uint256,string,string,string)))\":{\"notice\":\"Adds a proof to the file\"},\"addTee(address,string)\":{\"notice\":\"Adds a tee to the pool\"},\"cancelJob(uint256)\":{\"notice\":\"Cancels a contribution proof request\"},\"claim()\":{\"notice\":\"method used by tees for claiming their rewards\"},\"initialize(address,address,uint256)\":{\"notice\":\"Initialize the contract\"},\"jobTee(uint256)\":{\"notice\":\"Returns details of the tee for the given job\"},\"jobs(uint256)\":{\"notice\":\"Returns the details of the job\"},\"removeTee(address)\":{\"notice\":\"Removes a tee from the pool\"},\"requestContributionProof(uint256)\":{\"notice\":\"Adds a contribution proof request\"},\"submitJob(uint256)\":{\"notice\":\"Submits a contribution proof request\"},\"teeList()\":{\"notice\":\"Returns the list of tees\"},\"teeListAt(uint256)\":{\"notice\":\"Returns the details of the tee at the given index\"},\"tees(address)\":{\"notice\":\"Returns the details of the tee\"},\"teesCount()\":{\"notice\":\"Returns the number of tees\"},\"updateCancelDelay(uint256)\":{\"notice\":\"Updates the cancel delay\"},\"updateDataRegistry(address)\":{\"notice\":\"Updates the file registry\"},\"updateTeeFee(uint256)\":{\"notice\":\"Updates the tee fee\"},\"version()\":{\"notice\":\"Returns the version of the contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/teePool/TeePoolImplementation.sol\":\"TeePoolImplementation\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {OwnableUpgradeable} from \\\"./OwnableUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is specified at deployment time in the constructor for `Ownable`. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable2Step\\n    struct Ownable2StepStorage {\\n        address _pendingOwner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable2Step\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant Ownable2StepStorageLocation = 0x237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c00;\\n\\n    function _getOwnable2StepStorage() private pure returns (Ownable2StepStorage storage $) {\\n        assembly {\\n            $.slot := Ownable2StepStorageLocation\\n        }\\n    }\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    function __Ownable2Step_init() internal onlyInitializing {\\n    }\\n\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        Ownable2StepStorage storage $ = _getOwnable2StepStorage();\\n        return $._pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        Ownable2StepStorage storage $ = _getOwnable2StepStorage();\\n        $._pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        Ownable2StepStorage storage $ = _getOwnable2StepStorage();\\n        delete $._pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        if (pendingOwner() != sender) {\\n            revert OwnableUnauthorizedAccount(sender);\\n        }\\n        _transferOwnership(sender);\\n    }\\n}\\n\",\"keccak256\":\"0xbca4a4f66d98028293dba695851d1b20d3e0ba2fff7453fb241f192fa3fc6b6f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC1967-compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f13b947637c4969c0644cab4ef399cdc4b67f101463b8775c5a43b118558e53\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Pausable\\n    struct PausableStorage {\\n        bool _paused;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Pausable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant PausableStorageLocation = 0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300;\\n\\n    function _getPausableStorage() private pure returns (PausableStorage storage $) {\\n        assembly {\\n            $.slot := PausableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        PausableStorage storage $ = _getPausableStorage();\\n        return $._paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x92915b7f7f642c6be3f65bfd1522feb5d5b6ef25f755f4dbb51df32c868f2f97\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xb44e086e941292cdc7f440de51478493894ef0b1aeccb0c4047445919f667f74\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x2a1f9944df2015c081d89cd41ba22ffaf10aa6285969f0dc612b235cc448999c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x06a78f9b3ee3e6d0eb4e4cd635ba49960bea34cac1db8c0a27c75f2319f1fd65\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"},\"contracts/dataRegistry/interfaces/IDataRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.24;\\n\\ninterface IDataRegistry {\\n    struct ProofData {\\n        uint256 score;\\n        uint256 timestamp;\\n        string metadata;\\n        string proofUrl;\\n        string instruction;\\n    }\\n\\n    struct Proof {\\n        bytes signature;\\n        ProofData data;\\n    }\\n\\n    struct File {\\n        address ownerAddress;\\n        string url;\\n        uint256 addedAtBlock;\\n        uint256 proofsCount;\\n        mapping(uint256 proofId => Proof proof) proofs;\\n        mapping(address account => string key) permissions;\\n    }\\n\\n    struct FileResponse {\\n        uint256 id;\\n        address ownerAddress;\\n        string url;\\n        uint256 addedAtBlock;\\n    }\\n\\n    function version() external pure returns (uint256);\\n    function filesCount() external view returns (uint256);\\n    function files(uint256 index) external view returns (FileResponse memory);\\n    function fileProofs(uint256 fileId, uint256 index) external view returns (Proof memory);\\n    function filePermissions(uint256 fileId, address account) external view returns (string memory);\\n    function pause() external;\\n    function unpause() external;\\n    function addFile(string memory url) external returns (uint256);\\n    function addProof(uint256 fileId, Proof memory proof) external;\\n    function addFilePermission(uint256 fileId, address account, string memory key) external;\\n}\\n\",\"keccak256\":\"0x8a01d6e58e78e0af32d1ab3ec30385332fea5662b577fbf124426b98faf22f03\",\"license\":\"Apache-2.0\"},\"contracts/teePool/TeePoolImplementation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.24;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"./interfaces/TeePoolStorageV1.sol\\\";\\n\\ncontract TeePoolImplementation is\\n    UUPSUpgradeable,\\n    PausableUpgradeable,\\n    Ownable2StepUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    TeePoolStorageV1\\n{\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /**\\n     * @notice Triggered when a job has been submitted\\n     *\\n     * @param jobId                             id of the job\\n     * @param fileId                            id of the file\\n     * @param bidAmount                         bid amount\\n     */\\n    event JobSubmitted(uint256 indexed jobId, uint256 indexed fileId, uint256 bidAmount);\\n\\n    /**\\n     * @notice Triggered when a job has been cancelled\\n     *\\n     * @param jobId                             id of the job\\n     */\\n    event JobCanceled(uint256 indexed jobId);\\n\\n    /**\\n     * @notice Triggered when a proof has been added\\n     *\\n     * @param attestator                         address of the attestator\\n     * @param jobId                             id of the job\\n     * @param fileId                            id of the file\\n     */\\n    event ProofAdded(address indexed attestator, uint256 indexed jobId, uint256 indexed fileId);\\n\\n    /**\\n     * @notice Triggered when a tee has been added\\n     *\\n     * @param teeAddress                        address of the tee\\n     */\\n    event TeeAdded(address indexed teeAddress);\\n\\n    /**\\n     * @notice Triggered when a tee has been removed\\n     *\\n     * @param teeAddress                        address of the tee\\n     */\\n    event TeeRemoved(address indexed teeAddress);\\n\\n    /**\\n     * @notice Triggered when a claim has been made\\n     *\\n     * @param teeAddress                        address of the tee\\n     * @param amount                            amount claimed\\n     */\\n    event Claimed(address indexed teeAddress, uint256 amount);\\n\\n    error TeeAlreadyAdded();\\n    error TeeNotActive();\\n    error JobCompleted();\\n    error InvalidJobStatus();\\n    error NothingToClaim();\\n    error InsufficientFee();\\n    error NoActiveTee();\\n    error NotJobOwner();\\n    error CancelDelayNotPassed();\\n    error TransferFailed();\\n\\n    modifier onlyActiveTee() {\\n        if (!(_tees[msg.sender].status == TeeStatus.Active)) {\\n            revert TeeNotActive();\\n        }\\n        _;\\n    }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @notice Initialize the contract\\n     *\\n     * @param ownerAddress                      address of the owner\\n     * @param dataRegistryAddress               address of the data registry contract\\n     * @param initialCancelDelay                initial cancel delay\\n     */\\n    function initialize(\\n        address ownerAddress,\\n        address dataRegistryAddress,\\n        uint256 initialCancelDelay\\n    ) external initializer {\\n        __Ownable2Step_init();\\n        __UUPSUpgradeable_init();\\n        __Pausable_init();\\n        __ReentrancyGuard_init();\\n\\n        dataRegistry = IDataRegistry(dataRegistryAddress);\\n        cancelDelay = initialCancelDelay;\\n\\n        _transferOwnership(ownerAddress);\\n    }\\n\\n    /**\\n     * @notice Upgrade the contract\\n     * This function is required by OpenZeppelin's UUPSUpgradeable\\n     *\\n     * @param newImplementation                  new implementation\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual override onlyOwner {}\\n\\n    /**\\n     * @notice Returns the version of the contract\\n     */\\n    function version() external pure virtual override returns (uint256) {\\n        return 1;\\n    }\\n\\n    /**\\n     * @notice Returns the details of the job\\n     *\\n     * @param jobId                             id of the job\\n     * @return Job                              details of the job\\n     */\\n    function jobs(uint256 jobId) external view override returns (Job memory) {\\n        return _jobs[jobId];\\n    }\\n\\n    /**\\n     * @notice Returns the details of the tee\\n     *\\n     * @param teeAddress                        address of the tee\\n     * @return TeeDetails                       details of the tee\\n     */\\n    function tees(address teeAddress) public view override returns (TeeInfo memory) {\\n        return\\n            TeeInfo({\\n                teeAddress: teeAddress,\\n                url: _tees[teeAddress].url,\\n                status: _tees[teeAddress].status,\\n                amount: _tees[teeAddress].amount,\\n                withdrawnAmount: _tees[teeAddress].withdrawnAmount\\n            });\\n    }\\n\\n    /**\\n     * @notice Returns the number of tees\\n     */\\n    function teesCount() external view override returns (uint256) {\\n        return _teeList.length();\\n    }\\n\\n    /**\\n     * @notice Returns the list of tees\\n     */\\n    function teeList() external view override returns (address[] memory) {\\n        return _teeList.values();\\n    }\\n\\n    /**\\n     * @notice Returns the details of the tee at the given index\\n     *\\n     * @param index                             index of the tee\\n     * @return TeeDetails                       details of the tee\\n     */\\n    function teeListAt(uint256 index) external view override returns (TeeInfo memory) {\\n        return tees(_teeList.at(index));\\n    }\\n\\n    /**\\n     * @notice Returns the number of active tees\\n     */\\n    function activeTeesCount() external view override returns (uint256) {\\n        return _activeTeeList.length();\\n    }\\n\\n    /**\\n     * @notice Returns the list of active tees\\n     */\\n    function activeTeeList() external view override returns (address[] memory) {\\n        return _activeTeeList.values();\\n    }\\n\\n    /**\\n     * @notice Returns the details of the active tee at the given index\\n     *\\n     * @param index                             index of the tee\\n     * @return TeeDetails                       details of the tee\\n     */\\n    function activeTeeListAt(uint256 index) external view override returns (TeeInfo memory) {\\n        return tees(_activeTeeList.at(index));\\n    }\\n\\n    function isTee(address teeAddress) external view override returns (bool) {\\n        return _tees[teeAddress].status == TeeStatus.Active;\\n    }\\n\\n    /**\\n     * @notice Returns details of the tee for the given job\\n     *\\n     * @param jobId                             id of the job\\n     * @return TeeDetails                       details of the tee\\n     */\\n    function jobTee(uint256 jobId) external view override returns (TeeInfo memory) {\\n        if (_activeTeeList.length() == 0) {\\n            revert NoActiveTee();\\n        }\\n        return tees(_activeTeeList.at(jobId % _activeTeeList.length()));\\n    }\\n\\n    /**\\n     * @dev Pauses the contract\\n     */\\n    function pause() external override onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpauses the contract\\n     */\\n    function unpause() external override onlyOwner {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @notice Updates the file registry\\n     *\\n     * @param newDataRegistry                   new file registry\\n     */\\n    function updateDataRegistry(IDataRegistry newDataRegistry) external override onlyOwner {\\n        dataRegistry = newDataRegistry;\\n    }\\n\\n    /**\\n     * @notice Updates the tee fee\\n     *\\n     * @param newTeeFee                         new fee\\n     */\\n    function updateTeeFee(uint256 newTeeFee) external override onlyOwner {\\n        teeFee = newTeeFee;\\n    }\\n\\n    /**\\n     * @notice Updates the cancel delay\\n     *\\n     * @param newCancelDelay                    new cancel delay\\n     */\\n    function updateCancelDelay(uint256 newCancelDelay) external override onlyOwner {\\n        cancelDelay = newCancelDelay;\\n    }\\n\\n    /**\\n     * @notice Adds a tee to the pool\\n     *\\n     * @param teeAddress                        address of the tee\\n     * @param url                               url of the tee\\n     */\\n    function addTee(address teeAddress, string memory url) external override onlyOwner {\\n        if (_activeTeeList.contains(teeAddress)) {\\n            revert TeeAlreadyAdded();\\n        }\\n        _teeList.add(teeAddress);\\n        _activeTeeList.add(teeAddress);\\n        _tees[teeAddress].status = TeeStatus.Active;\\n        _tees[teeAddress].url = url;\\n\\n        emit TeeAdded(teeAddress);\\n    }\\n\\n    /**\\n     * @notice Removes a tee from the pool\\n     *\\n     * @param teeAddress                        address of the tee\\n     */\\n    function removeTee(address teeAddress) external override onlyOwner {\\n        if (!_activeTeeList.contains(teeAddress)) {\\n            revert TeeNotActive();\\n        }\\n\\n        _tees[teeAddress].status = TeeStatus.Removed;\\n        _activeTeeList.remove(teeAddress);\\n\\n        emit TeeRemoved(teeAddress);\\n    }\\n\\n    /**\\n     * @notice Adds a contribution proof request\\n     *\\n     * @param fileId                            id of the file\\n     */\\n    function requestContributionProof(uint256 fileId) public payable override {\\n        if (msg.value < teeFee) {\\n            revert InsufficientFee();\\n        }\\n\\n        jobsCount++;\\n        _jobs[jobsCount].fileId = fileId;\\n        _jobs[jobsCount].bidAmount = msg.value;\\n        _jobs[jobsCount].addedTimestamp = block.timestamp;\\n        _jobs[jobsCount].ownerAddress = msg.sender;\\n        _jobs[jobsCount].status = JobStatus.Submitted;\\n\\n        emit JobSubmitted(jobsCount, fileId, msg.value);\\n    }\\n\\n    /**\\n     * @notice Submits a contribution proof request\\n     *\\n     * @param fileId                            id of the file\\n     */\\n    function submitJob(uint256 fileId) external payable override {\\n        requestContributionProof(fileId);\\n    }\\n\\n    /**\\n     * @notice Cancels a contribution proof request\\n     *\\n     * @param jobId                            id of the job\\n     */\\n    function cancelJob(uint256 jobId) external override nonReentrant {\\n        if (_jobs[jobId].ownerAddress != msg.sender) {\\n            revert NotJobOwner();\\n        }\\n\\n        if (_jobs[jobId].status != JobStatus.Submitted) {\\n            revert InvalidJobStatus();\\n        }\\n\\n        if (_jobs[jobId].addedTimestamp + cancelDelay > block.timestamp) {\\n            revert CancelDelayNotPassed();\\n        }\\n\\n        _jobs[jobsCount].status = JobStatus.Canceled;\\n\\n        (bool success, ) = payable(msg.sender).call{value: _jobs[jobId].bidAmount}(\\\"\\\");\\n        if (!success) {\\n            revert TransferFailed();\\n        }\\n\\n        emit JobCanceled(jobId);\\n    }\\n\\n    /**\\n     * @notice Adds a proof to the file\\n     *\\n     * @param jobId                             id of the job\\n     * @param proof                             proof for the file\\n     */\\n    function addProof(uint256 jobId, IDataRegistry.Proof memory proof) external payable override onlyActiveTee {\\n        Job storage job = _jobs[jobId];\\n\\n        if (job.status != JobStatus.Submitted) {\\n            revert JobCompleted();\\n        }\\n\\n        dataRegistry.addProof(job.fileId, proof);\\n\\n        _tees[msg.sender].amount += job.bidAmount;\\n        job.status = JobStatus.Completed;\\n\\n        emit ProofAdded(msg.sender, jobId, job.fileId);\\n    }\\n\\n    /**\\n     * @notice method used by tees for claiming their rewards\\n     */\\n    function claim() external nonReentrant {\\n        uint256 amount = _tees[msg.sender].amount - _tees[msg.sender].withdrawnAmount;\\n\\n        if (amount == 0) {\\n            revert NothingToClaim();\\n        }\\n\\n        _tees[msg.sender].withdrawnAmount = _tees[msg.sender].amount;\\n\\n        (bool success, ) = payable(msg.sender).call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert TransferFailed();\\n        }\\n\\n        emit Claimed(msg.sender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xa18f98e9e432734d5de449319b5335b90acf54d5f6892b9a58512d5002f418d8\",\"license\":\"Apache-2.0\"},\"contracts/teePool/interfaces/ITeePool.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.24;\\n\\nimport {IDataRegistry} from \\\"../../dataRegistry/interfaces/IDataRegistry.sol\\\";\\n\\ninterface ITeePool {\\n    enum TeeStatus {\\n        None,\\n        Active,\\n        Removed\\n    }\\n\\n    enum JobStatus {\\n        None,\\n        Submitted,\\n        Completed,\\n        Canceled\\n    }\\n\\n    struct Job {\\n        uint256 fileId;\\n        uint256 bidAmount;\\n        JobStatus status;\\n        uint256 addedTimestamp;\\n        address ownerAddress;\\n    }\\n\\n    struct Tee {\\n        TeeStatus status;\\n        string url;\\n        uint256 amount;\\n        uint256 withdrawnAmount;\\n    }\\n\\n    function version() external pure returns (uint256);\\n    function dataRegistry() external view returns (IDataRegistry);\\n    function cancelDelay() external view returns (uint256);\\n    function jobsCount() external view returns (uint256);\\n    function jobs(uint256 jobId) external view returns (Job memory);\\n    struct TeeInfo {\\n        address teeAddress;\\n        string url;\\n        TeeStatus status;\\n        uint256 amount;\\n        uint256 withdrawnAmount;\\n    }\\n    function tees(address teeAddress) external view returns (TeeInfo memory);\\n    function teesCount() external view returns (uint256);\\n    function teeList() external view returns (address[] memory);\\n    function teeListAt(uint256 index) external view returns (TeeInfo memory);\\n    function activeTeesCount() external view returns (uint256);\\n    function activeTeeList() external view returns (address[] memory);\\n    function activeTeeListAt(uint256 index) external view returns (TeeInfo memory);\\n    function isTee(address teeAddress) external view returns (bool);\\n    function teeFee() external view returns (uint256);\\n    function jobTee(uint256 jobId) external view returns (TeeInfo memory);\\n    function pause() external;\\n    function unpause() external;\\n    function updateDataRegistry(IDataRegistry dataRegistry) external;\\n    function updateTeeFee(uint256 newTeeFee) external;\\n    function updateCancelDelay(uint256 newCancelDelay) external;\\n    function addTee(address teeAddress, string memory url) external;\\n    function removeTee(address teeAddress) external;\\n    function requestContributionProof(uint256 fileId) external payable;\\n    function submitJob(uint256 fileId) external payable;\\n    function cancelJob(uint256 jobId) external;\\n    function addProof(uint256 fileId, IDataRegistry.Proof memory proof) external payable;\\n}\\n\",\"keccak256\":\"0x2c3052233671b6f53e9dcc726af9674497035ce5cede93763b60c18dfa4cb338\",\"license\":\"Apache-2.0\"},\"contracts/teePool/interfaces/TeePoolStorageV1.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.24;\\n\\nimport \\\"./ITeePool.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n/**`\\n * @title Storage for TeePool\\n * @notice For future upgrades, do not change TeePoolStorageV1. Create a new\\n * contract which implements TeePoolStorageV1\\n */\\nabstract contract TeePoolStorageV1 is ITeePool {\\n    IDataRegistry public override dataRegistry;\\n\\n    uint256 public override jobsCount;\\n    mapping(uint256 jobId => Job job) internal _jobs;\\n\\n    EnumerableSet.AddressSet internal _teeList;\\n    EnumerableSet.AddressSet internal _activeTeeList;\\n    mapping(address teeAddress => Tee tee) internal _tees;\\n\\n    uint256 public override teeFee;\\n    uint256 public override cancelDelay;\\n}\\n\",\"keccak256\":\"0x5ee8a922af47889abc6ae3ee2fd9b84e114cfa4ef9ad9e63464af5ef350ce4cb\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60a06040523060805234801561001457600080fd5b5061001d610022565b6100d4565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000900460ff16156100725760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b03908116146100d15780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b608051612352620000fe600039600081816114460152818161146f01526115b501526123526000f3fe60806040526004361061021a5760003560e01c8063715018a611610123578063c26045f7116100ab578063e30c39781161006f578063e30c3978146105f1578063e7aa019414610606578063eb07b9c614610619578063f2fde38b1461062e578063f5d548d81461064e57600080fd5b8063c26045f714610580578063ca45a28814610593578063d2ef73d9146105b3578063d402919f146105c6578063d5fbcf42146105db57600080fd5b80638da5cb5b116100f25780638da5cb5b146104b5578063961884aa146104e2578063a39c1d6b14610502578063a7016f7014610522578063ad3cb1cc1461054257600080fd5b8063715018a61461045657806373c883961461046b57806379ba50971461048b5780638456cb59146104a057600080fd5b80634e71d92d116101a6578063576d6d4d11610175578063576d6d4d146103ba5780635b818d36146103da5780635c975abb146103ef578063638a0f091461042057806369e8de561461043657600080fd5b80634e71d92d1461035b5780634f1ef2861461037057806352d1902d1461038357806354fd4d50146103a657600080fd5b80631a204098116101ed5780631a204098146102b95780631dffa3dc146102e6578063288fffac1461030657806336011aca146103265780633f4ba83a1461034657600080fd5b80630e2a14a31461021f57806310f3cd30146102415780631794bb3c1461026c578063180aedf31461028c575b600080fd5b34801561022b57600080fd5b5061023f61023a366004611ba1565b610664565b005b34801561024d57600080fd5b5061025661068e565b6040516102639190611bbe565b60405180910390f35b34801561027857600080fd5b5061023f610287366004611c0b565b61069f565b34801561029857600080fd5b506102ac6102a7366004611c4c565b6107f1565b6040516102639190611c7b565b3480156102c557600080fd5b506102d96102d4366004611c4c565b610878565b6040516102639190611d1c565b3480156102f257600080fd5b5061023f610301366004611c4c565b6108d2565b34801561031257600080fd5b5061023f610321366004611ba1565b610a72565b34801561033257600080fd5b5061023f610341366004611e75565b610b08565b34801561035257600080fd5b5061023f610bba565b34801561036757600080fd5b5061023f610bcc565b61023f61037e366004611e75565b610ce9565b34801561038f57600080fd5b50610398610d08565b604051908152602001610263565b3480156103b257600080fd5b506001610398565b3480156103c657600080fd5b5061023f6103d5366004611c4c565b610d25565b3480156103e657600080fd5b50610256610d32565b3480156103fb57600080fd5b506000805160206122dd8339815191525460ff165b6040519015158152602001610263565b34801561042c57600080fd5b5061039860095481565b34801561044257600080fd5b5061023f610451366004611c4c565b610d3e565b34801561046257600080fd5b5061023f610d4b565b34801561047757600080fd5b506102d9610486366004611c4c565b610d5d565b34801561049757600080fd5b5061023f610d73565b3480156104ac57600080fd5b5061023f610dbd565b3480156104c157600080fd5b506104ca610dcd565b6040516001600160a01b039091168152602001610263565b3480156104ee57600080fd5b506102d96104fd366004611ba1565b610e02565b34801561050e57600080fd5b506000546104ca906001600160a01b031681565b34801561052e57600080fd5b5061041061053d366004611ba1565b610f33565b34801561054e57600080fd5b50610573604051806040016040528060058152602001640352e302e360dc1b81525081565b6040516102639190611ec5565b61023f61058e366004611ed8565b610f6b565b34801561059f57600080fd5b506102d96105ae366004611c4c565b6110ca565b61023f6105c1366004611c4c565b6110e0565b3480156105d257600080fd5b506103986111b8565b3480156105e757600080fd5b5061039860015481565b3480156105fd57600080fd5b506104ca6111c4565b61023f610614366004611c4c565b6111ed565b34801561062557600080fd5b506103986111f6565b34801561063a57600080fd5b5061023f610649366004611ba1565b611202565b34801561065a57600080fd5b5061039860085481565b61066c611287565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b606061069a60056112b9565b905090565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff166000811580156106e55750825b905060008267ffffffffffffffff1660011480156107025750303b155b905081158015610710575080155b1561072e5760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561075857845460ff60401b1916600160401b1785555b6107606112cd565b6107686112cd565b6107706112d5565b6107786112e5565b600080546001600160a01b0319166001600160a01b03891617905560098690556107a1886112f5565b83156107e757845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050505050565b6107f9611b1d565b600082815260026020818152604092839020835160a0810185528154815260018201549281019290925291820154909283019060ff16600381111561084057610840611c65565b600381111561085157610851611c65565b8152600382015460208201526004909101546001600160a01b031660409091015292915050565b610880611b5d565b61088a600561132d565b6000036108aa576040516329ed7f2760e01b815260040160405180910390fd5b6108cc6104fd6108ba600561132d565b6108c49085611fff565b600590611337565b92915050565b6108da611343565b6000818152600260205260409020600401546001600160a01b0316331461091457604051639015f92360e01b815260040160405180910390fd5b60016000828152600260208190526040909120015460ff16600381111561093d5761093d611c65565b1461095b5760405163b969563b60e01b815260040160405180910390fd5b600954600082815260026020526040902060030154429161097b91612037565b111561099a57604051634b40143d60e01b815260040160405180910390fd5b600180546000908152600260208190526040808320909101805460ff19166003179055838252808220909201549151909133918381818185875af1925050503d8060008114610a05576040519150601f19603f3d011682016040523d82523d6000602084013e610a0a565b606091505b5050905080610a2c576040516312171d8360e31b815260040160405180910390fd5b60405182907f68a66a704ceacc38da3f12c63779e47866d9d72e875ec5d43237777adc666d6590600090a250610a6f60016000805160206122fd83398151915255565b50565b610a7a611287565b610a8560058261138f565b610aa2576040516310eddccd60e01b815260040160405180910390fd5b6001600160a01b0381166000908152600760205260409020805460ff19166002179055610ad06005826113b1565b506040516001600160a01b038216907f18a003b29a5d1b1d6f0603956003fdc00a42ea8db3825c24a6bf532d5bae0bdf90600090a250565b610b10611287565b610b1b60058361138f565b15610b3957604051637668d56b60e01b815260040160405180910390fd5b610b446003836113c6565b50610b506005836113c6565b506001600160a01b0382166000908152600760205260409020805460ff19166001908117825501610b8182826120d4565b506040516001600160a01b038316907fcc7ab74a9b11b56487e4c7356320d0be894972f6132884ccd04e04baa284fb7990600090a25050565b610bc2611287565b610bca6113db565b565b610bd4611343565b3360009081526007602052604081206003810154600290910154610bf89190612194565b905080600003610c1b576040516312d37ee560e31b815260040160405180910390fd5b3360008181526007602052604080822060028101546003909101555190919083908381818185875af1925050503d8060008114610c74576040519150601f19603f3d011682016040523d82523d6000602084013e610c79565b606091505b5050905080610c9b576040516312171d8360e31b815260040160405180910390fd5b60405182815233907fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a9060200160405180910390a25050610bca60016000805160206122fd83398151915255565b610cf161143b565b610cfa826114e0565b610d0482826114e8565b5050565b6000610d126115aa565b506000805160206122bd83398151915290565b610d2d611287565b600955565b606061069a60036112b9565b610d46611287565b600855565b610d53611287565b610bca60006112f5565b610d65611b5d565b6108cc6104fd600384611337565b3380610d7d6111c4565b6001600160a01b031614610db45760405163118cdaa760e01b81526001600160a01b03821660048201526024015b60405180910390fd5b610a6f816112f5565b610dc5611287565b610bca6115f3565b6000807f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c1993005b546001600160a01b031692915050565b610e0a611b5d565b6040805160a0810182526001600160a01b03841680825260009081526007602090815292902060010180549192830191610e439061204a565b80601f0160208091040260200160405190810160405280929190818152602001828054610e6f9061204a565b8015610ebc5780601f10610e9157610100808354040283529160200191610ebc565b820191906000526020600020905b815481529060010190602001808311610e9f57829003601f168201915b50505091835250506001600160a01b03841660009081526007602090815260409091205491019060ff166002811115610ef757610ef7611c65565b81526001600160a01b0390931660008181526007602081815260408084206002810154838a015294909352526003909101549301929092525090565b600060016001600160a01b03831660009081526007602052604090205460ff166002811115610f6457610f64611c65565b1492915050565b60013360009081526007602052604090205460ff166002811115610f9157610f91611c65565b14610faf576040516310eddccd60e01b815260040160405180910390fd5b60008281526002602052604090206001600282015460ff166003811115610fd857610fd8611c65565b14610ff6576040516361ff6d4560e11b815260040160405180910390fd5b600054815460405163c26045f760e01b81526001600160a01b039092169163c26045f7916110289186906004016121a7565b600060405180830381600087803b15801561104257600080fd5b505af1158015611056573d6000803e3d6000fd5b5050506001820154336000908152600760205260408120600201805492935091611081908490612037565b90915550506002818101805460ff191690911790558054604051849033907f41eb9d6336d189fb4bf444a6b5056628c51aa4405c87f7389a107686e805726390600090a4505050565b6110d2611b5d565b6108cc6104fd600584611337565b6008543410156111025760405162976f7560e21b815260040160405180910390fd5b6001805490600061111283612242565b909155505060018054600090815260026020819052604080832085905583548352808320349085015583548352808320426003909101558354835280832060040180546001600160a01b031916331790558354835290912001805460ff191682800217905550806001547ff54343d979b7d5a02524b04415a6513e2114a8284ccb9cc0e58c12a2190cb230346040516111ad91815260200190565b60405180910390a350565b600061069a600561132d565b6000807f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c00610df2565b610a6f816110e0565b600061069a600361132d565b61120a611287565b7f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c0080546001600160a01b0319166001600160a01b038316908117825561124e610dcd565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a35050565b33611290610dcd565b6001600160a01b031614610bca5760405163118cdaa760e01b8152336004820152602401610dab565b606060006112c68361163c565b9392505050565b610bca611698565b6112dd611698565b610bca6116e1565b6112ed611698565b610bca611702565b7f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c0080546001600160a01b0319168155610d048261170a565b60006108cc825490565b60006112c6838361177b565b6000805160206122fd83398151915280546001190161137557604051633ee5aeb560e01b815260040160405180910390fd5b60029055565b60016000805160206122fd83398151915255565b6001600160a01b038116600090815260018301602052604081205415156112c6565b60006112c6836001600160a01b0384166117a5565b60006112c6836001600160a01b038416611898565b6113e36118e7565b6000805160206122dd833981519152805460ff191681557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a150565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806114c257507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166114b66000805160206122bd833981519152546001600160a01b031690565b6001600160a01b031614155b15610bca5760405163703e46dd60e11b815260040160405180910390fd5b610a6f611287565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611542575060408051601f3d908101601f1916820190925261153f9181019061225b565b60015b61156a57604051634c9c8ce360e01b81526001600160a01b0383166004820152602401610dab565b6000805160206122bd833981519152811461159b57604051632a87526960e21b815260048101829052602401610dab565b6115a58383611917565b505050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610bca5760405163703e46dd60e11b815260040160405180910390fd5b6115fb61196d565b6000805160206122dd833981519152805460ff191660011781557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2583361141d565b60608160000180548060200260200160405190810160405280929190818152602001828054801561168c57602002820191906000526020600020905b815481526020019060010190808311611678575b50505050509050919050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff16610bca57604051631afcd79f60e31b815260040160405180910390fd5b6116e9611698565b6000805160206122dd833981519152805460ff19169055565b61137b611698565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b600082600001828154811061179257611792612274565b9060005260206000200154905092915050565b6000818152600183016020526040812054801561188e5760006117c9600183612194565b85549091506000906117dd90600190612194565b90508082146118425760008660000182815481106117fd576117fd612274565b906000526020600020015490508087600001848154811061182057611820612274565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806118535761185361228a565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506108cc565b60009150506108cc565b60008181526001830160205260408120546118df575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556108cc565b5060006108cc565b6000805160206122dd8339815191525460ff16610bca57604051638dfc202b60e01b815260040160405180910390fd5b6119208261199e565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a2805115611965576115a58282611a03565b610d04611a79565b6000805160206122dd8339815191525460ff1615610bca5760405163d93c066560e01b815260040160405180910390fd5b806001600160a01b03163b6000036119d457604051634c9c8ce360e01b81526001600160a01b0382166004820152602401610dab565b6000805160206122bd83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b031684604051611a2091906122a0565b600060405180830381855af49150503d8060008114611a5b576040519150601f19603f3d011682016040523d82523d6000602084013e611a60565b606091505b5091509150611a70858383611a98565b95945050505050565b3415610bca5760405163b398979f60e01b815260040160405180910390fd5b606082611aad57611aa882611af4565b6112c6565b8151158015611ac457506001600160a01b0384163b155b15611aed57604051639996b31560e01b81526001600160a01b0385166004820152602401610dab565b5092915050565b805115611b045780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6040518060a00160405280600081526020016000815260200160006003811115611b4957611b49611c65565b815260006020820181905260409091015290565b6040805160a0810182526000808252606060208301529091820190815260200160008152602001600081525090565b6001600160a01b0381168114610a6f57600080fd5b600060208284031215611bb357600080fd5b81356112c681611b8c565b6020808252825182820181905260009190848201906040850190845b81811015611bff5783516001600160a01b031683529284019291840191600101611bda565b50909695505050505050565b600080600060608486031215611c2057600080fd5b8335611c2b81611b8c565b92506020840135611c3b81611b8c565b929592945050506040919091013590565b600060208284031215611c5e57600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b8151815260208083015190820152604082015160a082019060048110611ca357611ca3611c65565b6040830152606083810151908301526080928301516001600160a01b0316929091019190915290565b60005b83811015611ce7578181015183820152602001611ccf565b50506000910152565b60008151808452611d08816020860160208601611ccc565b601f01601f19169290920160200192915050565b602080825282516001600160a01b03168282015282015160a06040830152600090611d4a60c0840182611cf0565b9050604084015160038110611d6157611d61611c65565b8060608501525060608401516080840152608084015160a08401528091505092915050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715611dbf57611dbf611d86565b60405290565b60405160a0810167ffffffffffffffff81118282101715611dbf57611dbf611d86565b600082601f830112611df957600080fd5b813567ffffffffffffffff80821115611e1457611e14611d86565b604051601f8301601f19908116603f01168101908282118183101715611e3c57611e3c611d86565b81604052838152866020858801011115611e5557600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060408385031215611e8857600080fd5b8235611e9381611b8c565b9150602083013567ffffffffffffffff811115611eaf57600080fd5b611ebb85828601611de8565b9150509250929050565b6020815260006112c66020830184611cf0565b60008060408385031215611eeb57600080fd5b82359150602083013567ffffffffffffffff80821115611f0a57600080fd5b9084019060408287031215611f1e57600080fd5b611f26611d9c565b823582811115611f3557600080fd5b611f4188828601611de8565b825250602083013582811115611f5657600080fd5b929092019160a08388031215611f6b57600080fd5b611f73611dc5565b8335815260208401356020820152604084013583811115611f9357600080fd5b611f9f89828701611de8565b604083015250606084013583811115611fb757600080fd5b611fc389828701611de8565b606083015250608084013583811115611fdb57600080fd5b611fe789828701611de8565b60808301525060208201529396939550929350505050565b60008261201c57634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052601160045260246000fd5b808201808211156108cc576108cc612021565b600181811c9082168061205e57607f821691505b60208210810361207e57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156115a5576000816000526020600020601f850160051c810160208610156120ad5750805b601f850160051c820191505b818110156120cc578281556001016120b9565b505050505050565b815167ffffffffffffffff8111156120ee576120ee611d86565b612102816120fc845461204a565b84612084565b602080601f831160018114612137576000841561211f5750858301515b600019600386901b1c1916600185901b1785556120cc565b600085815260208120601f198616915b8281101561216657888601518255948401946001909101908401612147565b50858210156121845787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b818103818111156108cc576108cc612021565b82815260406020820152600082516040808401526121c86080840182611cf0565b90506020840151603f198483030160608501528051825260208101516020830152604081015160a0604084015261220260a0840182611cf0565b90506060820151838203606085015261221b8282611cf0565b9150506080820151915082810360808401526122378183611cf0565b979650505050505050565b60006001820161225457612254612021565b5060010190565b60006020828403121561226d57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b600082516122b2818460208701611ccc565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbccd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f033009b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00a264697066735822122093000dc9f518d1b66d26fb3b4528267f505f525d6c05b821a55f869ce685fa9464736f6c63430008180033",
  "deployedBytecode": "0x60806040526004361061021a5760003560e01c8063715018a611610123578063c26045f7116100ab578063e30c39781161006f578063e30c3978146105f1578063e7aa019414610606578063eb07b9c614610619578063f2fde38b1461062e578063f5d548d81461064e57600080fd5b8063c26045f714610580578063ca45a28814610593578063d2ef73d9146105b3578063d402919f146105c6578063d5fbcf42146105db57600080fd5b80638da5cb5b116100f25780638da5cb5b146104b5578063961884aa146104e2578063a39c1d6b14610502578063a7016f7014610522578063ad3cb1cc1461054257600080fd5b8063715018a61461045657806373c883961461046b57806379ba50971461048b5780638456cb59146104a057600080fd5b80634e71d92d116101a6578063576d6d4d11610175578063576d6d4d146103ba5780635b818d36146103da5780635c975abb146103ef578063638a0f091461042057806369e8de561461043657600080fd5b80634e71d92d1461035b5780634f1ef2861461037057806352d1902d1461038357806354fd4d50146103a657600080fd5b80631a204098116101ed5780631a204098146102b95780631dffa3dc146102e6578063288fffac1461030657806336011aca146103265780633f4ba83a1461034657600080fd5b80630e2a14a31461021f57806310f3cd30146102415780631794bb3c1461026c578063180aedf31461028c575b600080fd5b34801561022b57600080fd5b5061023f61023a366004611ba1565b610664565b005b34801561024d57600080fd5b5061025661068e565b6040516102639190611bbe565b60405180910390f35b34801561027857600080fd5b5061023f610287366004611c0b565b61069f565b34801561029857600080fd5b506102ac6102a7366004611c4c565b6107f1565b6040516102639190611c7b565b3480156102c557600080fd5b506102d96102d4366004611c4c565b610878565b6040516102639190611d1c565b3480156102f257600080fd5b5061023f610301366004611c4c565b6108d2565b34801561031257600080fd5b5061023f610321366004611ba1565b610a72565b34801561033257600080fd5b5061023f610341366004611e75565b610b08565b34801561035257600080fd5b5061023f610bba565b34801561036757600080fd5b5061023f610bcc565b61023f61037e366004611e75565b610ce9565b34801561038f57600080fd5b50610398610d08565b604051908152602001610263565b3480156103b257600080fd5b506001610398565b3480156103c657600080fd5b5061023f6103d5366004611c4c565b610d25565b3480156103e657600080fd5b50610256610d32565b3480156103fb57600080fd5b506000805160206122dd8339815191525460ff165b6040519015158152602001610263565b34801561042c57600080fd5b5061039860095481565b34801561044257600080fd5b5061023f610451366004611c4c565b610d3e565b34801561046257600080fd5b5061023f610d4b565b34801561047757600080fd5b506102d9610486366004611c4c565b610d5d565b34801561049757600080fd5b5061023f610d73565b3480156104ac57600080fd5b5061023f610dbd565b3480156104c157600080fd5b506104ca610dcd565b6040516001600160a01b039091168152602001610263565b3480156104ee57600080fd5b506102d96104fd366004611ba1565b610e02565b34801561050e57600080fd5b506000546104ca906001600160a01b031681565b34801561052e57600080fd5b5061041061053d366004611ba1565b610f33565b34801561054e57600080fd5b50610573604051806040016040528060058152602001640352e302e360dc1b81525081565b6040516102639190611ec5565b61023f61058e366004611ed8565b610f6b565b34801561059f57600080fd5b506102d96105ae366004611c4c565b6110ca565b61023f6105c1366004611c4c565b6110e0565b3480156105d257600080fd5b506103986111b8565b3480156105e757600080fd5b5061039860015481565b3480156105fd57600080fd5b506104ca6111c4565b61023f610614366004611c4c565b6111ed565b34801561062557600080fd5b506103986111f6565b34801561063a57600080fd5b5061023f610649366004611ba1565b611202565b34801561065a57600080fd5b5061039860085481565b61066c611287565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b606061069a60056112b9565b905090565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff166000811580156106e55750825b905060008267ffffffffffffffff1660011480156107025750303b155b905081158015610710575080155b1561072e5760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561075857845460ff60401b1916600160401b1785555b6107606112cd565b6107686112cd565b6107706112d5565b6107786112e5565b600080546001600160a01b0319166001600160a01b03891617905560098690556107a1886112f5565b83156107e757845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050505050565b6107f9611b1d565b600082815260026020818152604092839020835160a0810185528154815260018201549281019290925291820154909283019060ff16600381111561084057610840611c65565b600381111561085157610851611c65565b8152600382015460208201526004909101546001600160a01b031660409091015292915050565b610880611b5d565b61088a600561132d565b6000036108aa576040516329ed7f2760e01b815260040160405180910390fd5b6108cc6104fd6108ba600561132d565b6108c49085611fff565b600590611337565b92915050565b6108da611343565b6000818152600260205260409020600401546001600160a01b0316331461091457604051639015f92360e01b815260040160405180910390fd5b60016000828152600260208190526040909120015460ff16600381111561093d5761093d611c65565b1461095b5760405163b969563b60e01b815260040160405180910390fd5b600954600082815260026020526040902060030154429161097b91612037565b111561099a57604051634b40143d60e01b815260040160405180910390fd5b600180546000908152600260208190526040808320909101805460ff19166003179055838252808220909201549151909133918381818185875af1925050503d8060008114610a05576040519150601f19603f3d011682016040523d82523d6000602084013e610a0a565b606091505b5050905080610a2c576040516312171d8360e31b815260040160405180910390fd5b60405182907f68a66a704ceacc38da3f12c63779e47866d9d72e875ec5d43237777adc666d6590600090a250610a6f60016000805160206122fd83398151915255565b50565b610a7a611287565b610a8560058261138f565b610aa2576040516310eddccd60e01b815260040160405180910390fd5b6001600160a01b0381166000908152600760205260409020805460ff19166002179055610ad06005826113b1565b506040516001600160a01b038216907f18a003b29a5d1b1d6f0603956003fdc00a42ea8db3825c24a6bf532d5bae0bdf90600090a250565b610b10611287565b610b1b60058361138f565b15610b3957604051637668d56b60e01b815260040160405180910390fd5b610b446003836113c6565b50610b506005836113c6565b506001600160a01b0382166000908152600760205260409020805460ff19166001908117825501610b8182826120d4565b506040516001600160a01b038316907fcc7ab74a9b11b56487e4c7356320d0be894972f6132884ccd04e04baa284fb7990600090a25050565b610bc2611287565b610bca6113db565b565b610bd4611343565b3360009081526007602052604081206003810154600290910154610bf89190612194565b905080600003610c1b576040516312d37ee560e31b815260040160405180910390fd5b3360008181526007602052604080822060028101546003909101555190919083908381818185875af1925050503d8060008114610c74576040519150601f19603f3d011682016040523d82523d6000602084013e610c79565b606091505b5050905080610c9b576040516312171d8360e31b815260040160405180910390fd5b60405182815233907fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a9060200160405180910390a25050610bca60016000805160206122fd83398151915255565b610cf161143b565b610cfa826114e0565b610d0482826114e8565b5050565b6000610d126115aa565b506000805160206122bd83398151915290565b610d2d611287565b600955565b606061069a60036112b9565b610d46611287565b600855565b610d53611287565b610bca60006112f5565b610d65611b5d565b6108cc6104fd600384611337565b3380610d7d6111c4565b6001600160a01b031614610db45760405163118cdaa760e01b81526001600160a01b03821660048201526024015b60405180910390fd5b610a6f816112f5565b610dc5611287565b610bca6115f3565b6000807f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c1993005b546001600160a01b031692915050565b610e0a611b5d565b6040805160a0810182526001600160a01b03841680825260009081526007602090815292902060010180549192830191610e439061204a565b80601f0160208091040260200160405190810160405280929190818152602001828054610e6f9061204a565b8015610ebc5780601f10610e9157610100808354040283529160200191610ebc565b820191906000526020600020905b815481529060010190602001808311610e9f57829003601f168201915b50505091835250506001600160a01b03841660009081526007602090815260409091205491019060ff166002811115610ef757610ef7611c65565b81526001600160a01b0390931660008181526007602081815260408084206002810154838a015294909352526003909101549301929092525090565b600060016001600160a01b03831660009081526007602052604090205460ff166002811115610f6457610f64611c65565b1492915050565b60013360009081526007602052604090205460ff166002811115610f9157610f91611c65565b14610faf576040516310eddccd60e01b815260040160405180910390fd5b60008281526002602052604090206001600282015460ff166003811115610fd857610fd8611c65565b14610ff6576040516361ff6d4560e11b815260040160405180910390fd5b600054815460405163c26045f760e01b81526001600160a01b039092169163c26045f7916110289186906004016121a7565b600060405180830381600087803b15801561104257600080fd5b505af1158015611056573d6000803e3d6000fd5b5050506001820154336000908152600760205260408120600201805492935091611081908490612037565b90915550506002818101805460ff191690911790558054604051849033907f41eb9d6336d189fb4bf444a6b5056628c51aa4405c87f7389a107686e805726390600090a4505050565b6110d2611b5d565b6108cc6104fd600584611337565b6008543410156111025760405162976f7560e21b815260040160405180910390fd5b6001805490600061111283612242565b909155505060018054600090815260026020819052604080832085905583548352808320349085015583548352808320426003909101558354835280832060040180546001600160a01b031916331790558354835290912001805460ff191682800217905550806001547ff54343d979b7d5a02524b04415a6513e2114a8284ccb9cc0e58c12a2190cb230346040516111ad91815260200190565b60405180910390a350565b600061069a600561132d565b6000807f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c00610df2565b610a6f816110e0565b600061069a600361132d565b61120a611287565b7f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c0080546001600160a01b0319166001600160a01b038316908117825561124e610dcd565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a35050565b33611290610dcd565b6001600160a01b031614610bca5760405163118cdaa760e01b8152336004820152602401610dab565b606060006112c68361163c565b9392505050565b610bca611698565b6112dd611698565b610bca6116e1565b6112ed611698565b610bca611702565b7f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c0080546001600160a01b0319168155610d048261170a565b60006108cc825490565b60006112c6838361177b565b6000805160206122fd83398151915280546001190161137557604051633ee5aeb560e01b815260040160405180910390fd5b60029055565b60016000805160206122fd83398151915255565b6001600160a01b038116600090815260018301602052604081205415156112c6565b60006112c6836001600160a01b0384166117a5565b60006112c6836001600160a01b038416611898565b6113e36118e7565b6000805160206122dd833981519152805460ff191681557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a150565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806114c257507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166114b66000805160206122bd833981519152546001600160a01b031690565b6001600160a01b031614155b15610bca5760405163703e46dd60e11b815260040160405180910390fd5b610a6f611287565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611542575060408051601f3d908101601f1916820190925261153f9181019061225b565b60015b61156a57604051634c9c8ce360e01b81526001600160a01b0383166004820152602401610dab565b6000805160206122bd833981519152811461159b57604051632a87526960e21b815260048101829052602401610dab565b6115a58383611917565b505050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610bca5760405163703e46dd60e11b815260040160405180910390fd5b6115fb61196d565b6000805160206122dd833981519152805460ff191660011781557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2583361141d565b60608160000180548060200260200160405190810160405280929190818152602001828054801561168c57602002820191906000526020600020905b815481526020019060010190808311611678575b50505050509050919050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff16610bca57604051631afcd79f60e31b815260040160405180910390fd5b6116e9611698565b6000805160206122dd833981519152805460ff19169055565b61137b611698565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b600082600001828154811061179257611792612274565b9060005260206000200154905092915050565b6000818152600183016020526040812054801561188e5760006117c9600183612194565b85549091506000906117dd90600190612194565b90508082146118425760008660000182815481106117fd576117fd612274565b906000526020600020015490508087600001848154811061182057611820612274565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806118535761185361228a565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506108cc565b60009150506108cc565b60008181526001830160205260408120546118df575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556108cc565b5060006108cc565b6000805160206122dd8339815191525460ff16610bca57604051638dfc202b60e01b815260040160405180910390fd5b6119208261199e565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a2805115611965576115a58282611a03565b610d04611a79565b6000805160206122dd8339815191525460ff1615610bca5760405163d93c066560e01b815260040160405180910390fd5b806001600160a01b03163b6000036119d457604051634c9c8ce360e01b81526001600160a01b0382166004820152602401610dab565b6000805160206122bd83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b031684604051611a2091906122a0565b600060405180830381855af49150503d8060008114611a5b576040519150601f19603f3d011682016040523d82523d6000602084013e611a60565b606091505b5091509150611a70858383611a98565b95945050505050565b3415610bca5760405163b398979f60e01b815260040160405180910390fd5b606082611aad57611aa882611af4565b6112c6565b8151158015611ac457506001600160a01b0384163b155b15611aed57604051639996b31560e01b81526001600160a01b0385166004820152602401610dab565b5092915050565b805115611b045780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6040518060a00160405280600081526020016000815260200160006003811115611b4957611b49611c65565b815260006020820181905260409091015290565b6040805160a0810182526000808252606060208301529091820190815260200160008152602001600081525090565b6001600160a01b0381168114610a6f57600080fd5b600060208284031215611bb357600080fd5b81356112c681611b8c565b6020808252825182820181905260009190848201906040850190845b81811015611bff5783516001600160a01b031683529284019291840191600101611bda565b50909695505050505050565b600080600060608486031215611c2057600080fd5b8335611c2b81611b8c565b92506020840135611c3b81611b8c565b929592945050506040919091013590565b600060208284031215611c5e57600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b8151815260208083015190820152604082015160a082019060048110611ca357611ca3611c65565b6040830152606083810151908301526080928301516001600160a01b0316929091019190915290565b60005b83811015611ce7578181015183820152602001611ccf565b50506000910152565b60008151808452611d08816020860160208601611ccc565b601f01601f19169290920160200192915050565b602080825282516001600160a01b03168282015282015160a06040830152600090611d4a60c0840182611cf0565b9050604084015160038110611d6157611d61611c65565b8060608501525060608401516080840152608084015160a08401528091505092915050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715611dbf57611dbf611d86565b60405290565b60405160a0810167ffffffffffffffff81118282101715611dbf57611dbf611d86565b600082601f830112611df957600080fd5b813567ffffffffffffffff80821115611e1457611e14611d86565b604051601f8301601f19908116603f01168101908282118183101715611e3c57611e3c611d86565b81604052838152866020858801011115611e5557600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060408385031215611e8857600080fd5b8235611e9381611b8c565b9150602083013567ffffffffffffffff811115611eaf57600080fd5b611ebb85828601611de8565b9150509250929050565b6020815260006112c66020830184611cf0565b60008060408385031215611eeb57600080fd5b82359150602083013567ffffffffffffffff80821115611f0a57600080fd5b9084019060408287031215611f1e57600080fd5b611f26611d9c565b823582811115611f3557600080fd5b611f4188828601611de8565b825250602083013582811115611f5657600080fd5b929092019160a08388031215611f6b57600080fd5b611f73611dc5565b8335815260208401356020820152604084013583811115611f9357600080fd5b611f9f89828701611de8565b604083015250606084013583811115611fb757600080fd5b611fc389828701611de8565b606083015250608084013583811115611fdb57600080fd5b611fe789828701611de8565b60808301525060208201529396939550929350505050565b60008261201c57634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052601160045260246000fd5b808201808211156108cc576108cc612021565b600181811c9082168061205e57607f821691505b60208210810361207e57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156115a5576000816000526020600020601f850160051c810160208610156120ad5750805b601f850160051c820191505b818110156120cc578281556001016120b9565b505050505050565b815167ffffffffffffffff8111156120ee576120ee611d86565b612102816120fc845461204a565b84612084565b602080601f831160018114612137576000841561211f5750858301515b600019600386901b1c1916600185901b1785556120cc565b600085815260208120601f198616915b8281101561216657888601518255948401946001909101908401612147565b50858210156121845787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b818103818111156108cc576108cc612021565b82815260406020820152600082516040808401526121c86080840182611cf0565b90506020840151603f198483030160608501528051825260208101516020830152604081015160a0604084015261220260a0840182611cf0565b90506060820151838203606085015261221b8282611cf0565b9150506080820151915082810360808401526122378183611cf0565b979650505050505050565b60006001820161225457612254612021565b5060010190565b60006020828403121561226d57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b600082516122b2818460208701611ccc565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbccd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f033009b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00a264697066735822122093000dc9f518d1b66d26fb3b4528267f505f525d6c05b821a55f869ce685fa9464736f6c63430008180033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "ERC1967InvalidImplementation(address)": [
        {
          "details": "The `implementation` of the proxy is invalid."
        }
      ],
      "ERC1967NonPayable()": [
        {
          "details": "An upgrade function sees `msg.value > 0` that may be lost."
        }
      ],
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "UUPSUnauthorizedCallContext()": [
        {
          "details": "The call is from an unauthorized context."
        }
      ],
      "UUPSUnsupportedProxiableUUID(bytes32)": [
        {
          "details": "The storage `slot` is unsupported as a UUID."
        }
      ]
    },
    "events": {
      "Claimed(address,uint256)": {
        "params": {
          "amount": "amount claimed",
          "teeAddress": "address of the tee"
        }
      },
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "JobCanceled(uint256)": {
        "params": {
          "jobId": "id of the job"
        }
      },
      "JobSubmitted(uint256,uint256,uint256)": {
        "params": {
          "bidAmount": "bid amount",
          "fileId": "id of the file",
          "jobId": "id of the job"
        }
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "ProofAdded(address,uint256,uint256)": {
        "params": {
          "attestator": "address of the attestator",
          "fileId": "id of the file",
          "jobId": "id of the job"
        }
      },
      "TeeAdded(address)": {
        "params": {
          "teeAddress": "address of the tee"
        }
      },
      "TeeRemoved(address)": {
        "params": {
          "teeAddress": "address of the tee"
        }
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "activeTeeListAt(uint256)": {
        "params": {
          "index": "index of the tee"
        },
        "returns": {
          "_0": "TeeDetails                       details of the tee"
        }
      },
      "addProof(uint256,(bytes,(uint256,uint256,string,string,string)))": {
        "params": {
          "jobId": "id of the job",
          "proof": "proof for the file"
        }
      },
      "addTee(address,string)": {
        "params": {
          "teeAddress": "address of the tee",
          "url": "url of the tee"
        }
      },
      "cancelJob(uint256)": {
        "params": {
          "jobId": "id of the job"
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "initialize(address,address,uint256)": {
        "params": {
          "dataRegistryAddress": "address of the data registry contract",
          "initialCancelDelay": "initial cancel delay",
          "ownerAddress": "address of the owner"
        }
      },
      "jobTee(uint256)": {
        "params": {
          "jobId": "id of the job"
        },
        "returns": {
          "_0": "TeeDetails                       details of the tee"
        }
      },
      "jobs(uint256)": {
        "params": {
          "jobId": "id of the job"
        },
        "returns": {
          "_0": "Job                              details of the job"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "Pauses the contract"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "removeTee(address)": {
        "params": {
          "teeAddress": "address of the tee"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "requestContributionProof(uint256)": {
        "params": {
          "fileId": "id of the file"
        }
      },
      "submitJob(uint256)": {
        "params": {
          "fileId": "id of the file"
        }
      },
      "teeListAt(uint256)": {
        "params": {
          "index": "index of the tee"
        },
        "returns": {
          "_0": "TeeDetails                       details of the tee"
        }
      },
      "tees(address)": {
        "params": {
          "teeAddress": "address of the tee"
        },
        "returns": {
          "_0": "TeeDetails                       details of the tee"
        }
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      },
      "unpause()": {
        "details": "Unpauses the contract"
      },
      "updateCancelDelay(uint256)": {
        "params": {
          "newCancelDelay": "new cancel delay"
        }
      },
      "updateDataRegistry(address)": {
        "params": {
          "newDataRegistry": "new file registry"
        }
      },
      "updateTeeFee(uint256)": {
        "params": {
          "newTeeFee": "new fee"
        }
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Claimed(address,uint256)": {
        "notice": "Triggered when a claim has been made"
      },
      "JobCanceled(uint256)": {
        "notice": "Triggered when a job has been cancelled"
      },
      "JobSubmitted(uint256,uint256,uint256)": {
        "notice": "Triggered when a job has been submitted"
      },
      "ProofAdded(address,uint256,uint256)": {
        "notice": "Triggered when a proof has been added"
      },
      "TeeAdded(address)": {
        "notice": "Triggered when a tee has been added"
      },
      "TeeRemoved(address)": {
        "notice": "Triggered when a tee has been removed"
      }
    },
    "kind": "user",
    "methods": {
      "activeTeeList()": {
        "notice": "Returns the list of active tees"
      },
      "activeTeeListAt(uint256)": {
        "notice": "Returns the details of the active tee at the given index"
      },
      "activeTeesCount()": {
        "notice": "Returns the number of active tees"
      },
      "addProof(uint256,(bytes,(uint256,uint256,string,string,string)))": {
        "notice": "Adds a proof to the file"
      },
      "addTee(address,string)": {
        "notice": "Adds a tee to the pool"
      },
      "cancelJob(uint256)": {
        "notice": "Cancels a contribution proof request"
      },
      "claim()": {
        "notice": "method used by tees for claiming their rewards"
      },
      "initialize(address,address,uint256)": {
        "notice": "Initialize the contract"
      },
      "jobTee(uint256)": {
        "notice": "Returns details of the tee for the given job"
      },
      "jobs(uint256)": {
        "notice": "Returns the details of the job"
      },
      "removeTee(address)": {
        "notice": "Removes a tee from the pool"
      },
      "requestContributionProof(uint256)": {
        "notice": "Adds a contribution proof request"
      },
      "submitJob(uint256)": {
        "notice": "Submits a contribution proof request"
      },
      "teeList()": {
        "notice": "Returns the list of tees"
      },
      "teeListAt(uint256)": {
        "notice": "Returns the details of the tee at the given index"
      },
      "tees(address)": {
        "notice": "Returns the details of the tee"
      },
      "teesCount()": {
        "notice": "Returns the number of tees"
      },
      "updateCancelDelay(uint256)": {
        "notice": "Updates the cancel delay"
      },
      "updateDataRegistry(address)": {
        "notice": "Updates the file registry"
      },
      "updateTeeFee(uint256)": {
        "notice": "Updates the tee fee"
      },
      "version()": {
        "notice": "Returns the version of the contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 21752,
        "contract": "contracts/teePool/TeePoolImplementation.sol:TeePoolImplementation",
        "label": "dataRegistry",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IDataRegistry)11222"
      },
      {
        "astId": 21755,
        "contract": "contracts/teePool/TeePoolImplementation.sol:TeePoolImplementation",
        "label": "jobsCount",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 21760,
        "contract": "contracts/teePool/TeePoolImplementation.sol:TeePoolImplementation",
        "label": "_jobs",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Job)21566_storage)"
      },
      {
        "astId": 21763,
        "contract": "contracts/teePool/TeePoolImplementation.sol:TeePoolImplementation",
        "label": "_teeList",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(AddressSet)10192_storage"
      },
      {
        "astId": 21766,
        "contract": "contracts/teePool/TeePoolImplementation.sol:TeePoolImplementation",
        "label": "_activeTeeList",
        "offset": 0,
        "slot": "5",
        "type": "t_struct(AddressSet)10192_storage"
      },
      {
        "astId": 21771,
        "contract": "contracts/teePool/TeePoolImplementation.sol:TeePoolImplementation",
        "label": "_tees",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_struct(Tee)21576_storage)"
      },
      {
        "astId": 21774,
        "contract": "contracts/teePool/TeePoolImplementation.sol:TeePoolImplementation",
        "label": "teeFee",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 21777,
        "contract": "contracts/teePool/TeePoolImplementation.sol:TeePoolImplementation",
        "label": "cancelDelay",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IDataRegistry)11222": {
        "encoding": "inplace",
        "label": "contract IDataRegistry",
        "numberOfBytes": "20"
      },
      "t_enum(JobStatus)21554": {
        "encoding": "inplace",
        "label": "enum ITeePool.JobStatus",
        "numberOfBytes": "1"
      },
      "t_enum(TeeStatus)21549": {
        "encoding": "inplace",
        "label": "enum ITeePool.TeeStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(Tee)21576_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ITeePool.Tee)",
        "numberOfBytes": "32",
        "value": "t_struct(Tee)21576_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Job)21566_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ITeePool.Job)",
        "numberOfBytes": "32",
        "value": "t_struct(Job)21566_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)10192_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 10191,
            "contract": "contracts/teePool/TeePoolImplementation.sol:TeePoolImplementation",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)9877_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Job)21566_storage": {
        "encoding": "inplace",
        "label": "struct ITeePool.Job",
        "members": [
          {
            "astId": 21556,
            "contract": "contracts/teePool/TeePoolImplementation.sol:TeePoolImplementation",
            "label": "fileId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 21558,
            "contract": "contracts/teePool/TeePoolImplementation.sol:TeePoolImplementation",
            "label": "bidAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 21561,
            "contract": "contracts/teePool/TeePoolImplementation.sol:TeePoolImplementation",
            "label": "status",
            "offset": 0,
            "slot": "2",
            "type": "t_enum(JobStatus)21554"
          },
          {
            "astId": 21563,
            "contract": "contracts/teePool/TeePoolImplementation.sol:TeePoolImplementation",
            "label": "addedTimestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 21565,
            "contract": "contracts/teePool/TeePoolImplementation.sol:TeePoolImplementation",
            "label": "ownerAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Set)9877_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 9872,
            "contract": "contracts/teePool/TeePoolImplementation.sol:TeePoolImplementation",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 9876,
            "contract": "contracts/teePool/TeePoolImplementation.sol:TeePoolImplementation",
            "label": "_positions",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Tee)21576_storage": {
        "encoding": "inplace",
        "label": "struct ITeePool.Tee",
        "members": [
          {
            "astId": 21569,
            "contract": "contracts/teePool/TeePoolImplementation.sol:TeePoolImplementation",
            "label": "status",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(TeeStatus)21549"
          },
          {
            "astId": 21571,
            "contract": "contracts/teePool/TeePoolImplementation.sol:TeePoolImplementation",
            "label": "url",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 21573,
            "contract": "contracts/teePool/TeePoolImplementation.sol:TeePoolImplementation",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 21575,
            "contract": "contracts/teePool/TeePoolImplementation.sol:TeePoolImplementation",
            "label": "withdrawnAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}