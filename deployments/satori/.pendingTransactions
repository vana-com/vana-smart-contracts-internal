{
  "0x4e348bd547ee71741a7ba661cb73bef5662bc34f9be89f8ad9cb34cdafe47411": {
    "name": "FileRegistryImplementation",
    "deployment": {
      "_format": "hh-sol-artifact-1",
      "contractName": "FileRegistryImplementation",
      "sourceName": "contracts/fileRegistry/FileRegistryImplementation.sol",
      "abi": [
        {
          "inputs": [],
          "name": "AccessControlBadConfirmation",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "neededRole",
              "type": "bytes32"
            }
          ],
          "name": "AccessControlUnauthorizedAccount",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            }
          ],
          "name": "AddressEmptyCode",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "implementation",
              "type": "address"
            }
          ],
          "name": "ERC1967InvalidImplementation",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "ERC1967NonPayable",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "EnforcedPause",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "ExpectedPause",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "FailedInnerCall",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "InvalidInitialization",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "NotFileAttestator",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "NotFileOwner",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "NotInitializing",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "name": "OwnableInvalidOwner",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "OwnableUnauthorizedAccount",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "UUPSUnauthorizedCallContext",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "slot",
              "type": "bytes32"
            }
          ],
          "name": "UUPSUnsupportedProxiableUUID",
          "type": "error"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "fileId",
              "type": "uint256"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "ownerAddress",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "string",
              "name": "url",
              "type": "string"
            }
          ],
          "name": "FileAdded",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint64",
              "name": "version",
              "type": "uint64"
            }
          ],
          "name": "Initialized",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "previousOwner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "OwnershipTransferStarted",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "previousOwner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "OwnershipTransferred",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "Paused",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "fileId",
              "type": "uint256"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "entity",
              "type": "address"
            }
          ],
          "name": "PermissionGranted",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "fileId",
              "type": "uint256"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "entity",
              "type": "address"
            }
          ],
          "name": "PermissionRequested",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "fileId",
              "type": "uint256"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "entity",
              "type": "address"
            }
          ],
          "name": "ProofAdded",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "indexed": true,
              "internalType": "bytes32",
              "name": "previousAdminRole",
              "type": "bytes32"
            },
            {
              "indexed": true,
              "internalType": "bytes32",
              "name": "newAdminRole",
              "type": "bytes32"
            }
          ],
          "name": "RoleAdminChanged",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "sender",
              "type": "address"
            }
          ],
          "name": "RoleGranted",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "sender",
              "type": "address"
            }
          ],
          "name": "RoleRevoked",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "Unpaused",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "implementation",
              "type": "address"
            }
          ],
          "name": "Upgraded",
          "type": "event"
        },
        {
          "inputs": [],
          "name": "DEFAULT_ADMIN_ROLE",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "UPGRADE_INTERFACE_VERSION",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "name": "_files",
          "outputs": [
            {
              "internalType": "address",
              "name": "ownerAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "url",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "addedAtBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "permissionRequestsCount",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "acceptOwnership",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "url",
              "type": "string"
            }
          ],
          "name": "addFile",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "url",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "entity",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "key",
                  "type": "string"
                }
              ],
              "internalType": "struct IFileRegistry.FilePermissions[]",
              "name": "permissions",
              "type": "tuple[]"
            }
          ],
          "name": "addFileWithPermissions",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "fileId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "valid",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "score",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "authenticity",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "ownership",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "quality",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "uniqueness",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IFileRegistry.Proof",
              "name": "proof",
              "type": "tuple"
            }
          ],
          "name": "addProof",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "fileId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "valid",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "score",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "authenticity",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "ownership",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "quality",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "uniqueness",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IFileRegistry.Proof",
              "name": "proof",
              "type": "tuple"
            }
          ],
          "name": "addProofOrigin",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "fileId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "entity",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "key",
                  "type": "string"
                }
              ],
              "internalType": "struct IFileRegistry.FilePermissions[]",
              "name": "permissions",
              "type": "tuple[]"
            }
          ],
          "name": "authorize",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "fileId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            }
          ],
          "name": "filePermissionRequests",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "fileId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "entity",
              "type": "address"
            }
          ],
          "name": "filePermissions",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "fileId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "entity",
              "type": "address"
            }
          ],
          "name": "fileProofs",
          "outputs": [
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "valid",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "score",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "authenticity",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "ownership",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "quality",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "uniqueness",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IFileRegistry.Proof",
              "name": "",
              "type": "tuple"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "fileId",
              "type": "uint256"
            }
          ],
          "name": "files",
          "outputs": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "ownerAddress",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "url",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "addedAtBlock",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "permissionRequestsCount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IFileRegistry.FileResponse",
              "name": "",
              "type": "tuple"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "filesCount",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            }
          ],
          "name": "getRoleAdmin",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "grantRole",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "hasRole",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "ownerAddress",
              "type": "address"
            }
          ],
          "name": "initialize",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "pause",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "paused",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "pendingOwner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "proxiableUUID",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "renounceOwnership",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "callerConfirmation",
              "type": "address"
            }
          ],
          "name": "renounceRole",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "fileId",
              "type": "uint256"
            }
          ],
          "name": "requestPermission",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "revokeRole",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "transferOwnership",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "unpause",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newImplementation",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "name": "upgradeToAndCall",
          "outputs": [],
          "stateMutability": "payable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "version",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "pure",
          "type": "function"
        }
      ],
      "bytecode": "",
      "deployedBytecode": "0x6080604052600436106101e35760003560e01c80638456cb5911610102578063c99b680311610095578063e30c397811610064578063e30c3978146105db578063eb9b9b64146105f0578063f2fde38b14610610578063f4c714b41461063057600080fd5b8063c99b680314610517578063cd35364a14610537578063d547741f146105a5578063dfb5e9ba146105c557600080fd5b8063a217fddf116100d1578063a217fddf14610481578063ac1abb6814610496578063ad3cb1cc146104c6578063c4d66de8146104f757600080fd5b80638456cb59146104175780638da5cb5b1461042c578063905c26861461044157806391d148541461046157600080fd5b806352d1902d1161017a57806367a3f59b1161014957806367a3f59b14610370578063715018a6146103cd5780637468cd62146103e257806379ba50971461040257600080fd5b806352d1902d146102f557806354fd4d501461030a5780635c975abb1461031e57806360f1c43a1461034357600080fd5b80633bbaf127116101b65780633bbaf1271461028d5780633f4ba83a146102ad5780633ff36d65146102c25780634f1ef286146102e257600080fd5b806301ffc9a7146101e8578063248a9ca31461021d5780632f2ff15d1461024b57806336568abe1461026d575b600080fd5b3480156101f457600080fd5b5061020861020336600461185f565b61065d565b60405190151581526020015b60405180910390f35b34801561022957600080fd5b5061023d610238366004611889565b610694565b604051908152602001610214565b34801561025757600080fd5b5061026b6102663660046118b9565b6106b6565b005b34801561027957600080fd5b5061026b6102883660046118b9565b6106d8565b34801561029957600080fd5b5061023d6102a8366004611ad4565b610710565b3480156102b957600080fd5b5061026b610739565b3480156102ce57600080fd5b5061026b6102dd366004611889565b61074b565b61026b6102f0366004611b38565b6107d6565b34801561030157600080fd5b5061023d6107f5565b34801561031657600080fd5b50600161023d565b34801561032a57600080fd5b50600080516020611fb58339815191525460ff16610208565b34801561034f57600080fd5b5061036361035e3660046118b9565b610812565b6040516102149190611be0565b34801561037c57600080fd5b506103b561038b366004611bf3565b6000918252600160209081526040808420928452600490920190529020546001600160a01b031690565b6040516001600160a01b039091168152602001610214565b3480156103d957600080fd5b5061026b6108cc565b3480156103ee57600080fd5b5061026b6103fd366004611c15565b6108de565b34801561040e57600080fd5b5061026b610927565b34801561042357600080fd5b5061026b610974565b34801561043857600080fd5b506103b5610984565b34801561044d57600080fd5b5061026b61045c366004611c52565b6109b9565b34801561046d57600080fd5b5061020861047c3660046118b9565b6109cc565b34801561048d57600080fd5b5061023d600081565b3480156104a257600080fd5b506104b66104b1366004611889565b610a04565b6040516102149493929190611cd9565b3480156104d257600080fd5b50610363604051806040016040528060058152602001640352e302e360dc1b81525081565b34801561050357600080fd5b5061026b610512366004611d10565b610ac0565b34801561052357600080fd5b5061026b610532366004611c52565b610bf0565b34801561054357600080fd5b506105576105523660046118b9565b610c03565b6040516102149190600060c0820190508251151582526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015292915050565b3480156105b157600080fd5b5061026b6105c03660046118b9565b610cb7565b3480156105d157600080fd5b5061023d60005481565b3480156105e757600080fd5b506103b5610cd3565b3480156105fc57600080fd5b5061023d61060b366004611d2b565b610cfc565b34801561061c57600080fd5b5061026b61062b366004611d10565b610d19565b34801561063c57600080fd5b5061065061064b366004611889565b610d9e565b6040516102149190611d68565b60006001600160e01b03198216637965db0b60e01b148061068e57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000908152600080516020611f95833981519152602052604090206001015490565b6106bf82610694565b6106c881610ebb565b6106d28383610ec5565b50505050565b6001600160a01b03811633146107015760405163334bd91960e11b815260040160405180910390fd5b61070b8282610f6a565b505050565b600061071a610fe6565b61072383611017565b61072f600054836110b6565b5060005492915050565b610741611179565b6107496111ab565b565b610753610fe6565b600081815260016020526040812060030180549161077083611dc0565b909155505060008181526001602090815260408083206003810154845260040190915280822080546001600160a01b031916339081179091559051909183917f539186f88413c222585ff95ba62e32a55eb0153d0265293bfe5b2c324935a0a49190a350565b6107de61120b565b6107e7826112b0565b6107f182826112b8565b5050565b60006107ff611375565b50600080516020611f7583398151915290565b60008281526001602090815260408083206001600160a01b0385168452600501909152902080546060919061084690611de7565b80601f016020809104026020016040519081016040528092919081815260200182805461087290611de7565b80156108bf5780601f10610894576101008083540402835291602001916108bf565b820191906000526020600020905b8154815290600101906020018083116108a257829003601f168201915b5050505050905092915050565b6108d4611179565b61074960006113be565b6108e6610fe6565b6000828152600160205260409020546001600160a01b0316331461091d5760405163abea322960e01b815260040160405180910390fd5b6107f182826110b6565b3380610931610cd3565b6001600160a01b0316146109685760405163118cdaa760e01b81526001600160a01b03821660048201526024015b60405180910390fd5b610971816113be565b50565b61097c611179565b6107496113f6565b6000807f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c1993005b546001600160a01b031692915050565b6109c1610fe6565b6107f132838361143f565b6000918252600080516020611f95833981519152602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6001602081905260009182526040909120805491810180546001600160a01b0390931692610a3190611de7565b80601f0160208091040260200160405190810160405280929190818152602001828054610a5d90611de7565b8015610aaa5780601f10610a7f57610100808354040283529160200191610aaa565b820191906000526020600020905b815481529060010190602001808311610a8d57829003601f168201915b5050505050908060020154908060030154905084565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff16600081158015610b065750825b905060008267ffffffffffffffff166001148015610b235750303b155b905081158015610b31575080155b15610b4f5760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff191660011785558315610b7957845460ff60401b1916600160401b1785555b610b8161152b565b610b8961152b565b610b91611533565b610b9961152b565b610ba2866113be565b8315610be857845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050565b610bf8610fe6565b6107f133838361143f565b610c3e6040518060c0016040528060001515815260200160008152602001600081526020016000815260200160008152602001600081525090565b506040805160c0810182526000938452600160208181528386206001600160a01b03959095168087526006909501808252848720805460ff16151585529283015482850152600283015494840194909452600382015460608401526004820154608084015293909452915260059091015460a082015290565b610cc082610694565b610cc981610ebb565b6106d28383610f6a565b6000807f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c006109a9565b6000610d06610fe6565b610d0f82611017565b506000545b919050565b610d21611179565b7f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c0080546001600160a01b0319166001600160a01b0383169081178255610d65610984565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a35050565b610dd96040518060a001604052806000815260200160006001600160a01b031681526020016060815260200160008152602001600081525090565b600082815260016020818152604092839020835160a08101855286815281546001600160a01b03169281019290925291820180549293919291830191610e1e90611de7565b80601f0160208091040260200160405190810160405280929190818152602001828054610e4a90611de7565b8015610e975780601f10610e6c57610100808354040283529160200191610e97565b820191906000526020600020905b815481529060010190602001808311610e7a57829003601f168201915b50505050508152602001826002015481526020018260030154815250915050919050565b6109718133611543565b6000600080516020611f95833981519152610ee084846109cc565b610f60576000848152602082815260408083206001600160a01b03871684529091529020805460ff19166001179055610f163390565b6001600160a01b0316836001600160a01b0316857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4600191505061068e565b600091505061068e565b6000600080516020611f95833981519152610f8584846109cc565b15610f60576000848152602082815260408083206001600160a01b0387168085529252808320805460ff1916905551339287917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a4600191505061068e565b600080516020611fb58339815191525460ff16156107495760405163d93c066560e01b815260040160405180910390fd5b60008054908061102683611dc0565b909155505060008054815260016020819052604080832080546001600160a01b03191633179055825483529091200161105f8282611e69565b506000805481526001602052604080822043600290910155905490513391907f2980b13036c0d9df6b71ea9e9c09536efd24d7dd1868e29aa730f0c3fbd1a0dc906110ab908590611be0565b60405180910390a350565b60005b815181101561070b5760008282815181106110d6576110d6611f29565b602002602001015160000151905060008383815181106110f8576110f8611f29565b60209081029190910181015181015160008781526001835260408082206001600160a01b0387168352600501909352919091209091506111388282611e69565b506040516001600160a01b0383169086907f6e0403ef2b13328247bf9260ad8dd9c18fb5a18b95ea25de817ca991da05929b90600090a350506001016110b9565b33611182610984565b6001600160a01b0316146107495760405163118cdaa760e01b815233600482015260240161095f565b6111b361157c565b600080516020611fb5833981519152805460ff191681557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a150565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061129257507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611286600080516020611f75833981519152546001600160a01b031690565b6001600160a01b031614155b156107495760405163703e46dd60e11b815260040160405180910390fd5b610971611179565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611312575060408051601f3d908101601f1916820190925261130f91810190611f3f565b60015b61133a57604051634c9c8ce360e01b81526001600160a01b038316600482015260240161095f565b600080516020611f75833981519152811461136b57604051632a87526960e21b81526004810182905260240161095f565b61070b83836115ac565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107495760405163703e46dd60e11b815260040160405180910390fd5b7f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c0080546001600160a01b03191681556107f182611602565b6113fe610fe6565b600080516020611fb5833981519152805460ff191660011781557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258336111ed565b60008281526001602090815260408083206001600160a01b03871684526005019091529020805461146f90611de7565b905060000361149157604051630e98031160e21b815260040160405180910390fd5b60008281526001602081815260408084206001600160a01b038816808652600690910183528185208651815460ff19169015151781559286015193830193909355848101516002830155606085015160038301556080850151600483015560a085015160059092019190915551909184917f1f310120c84fb25b6c2653131bfefa18228693a3138d87303ca4a51570f600d29190a3505050565b610749611673565b61153b611673565b6107496116bc565b61154d82826109cc565b6107f15760405163e2517d3f60e01b81526001600160a01b03821660048201526024810183905260440161095f565b600080516020611fb58339815191525460ff1661074957604051638dfc202b60e01b815260040160405180910390fd5b6115b5826116dd565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a28051156115fa5761070b8282611742565b6107f16117b8565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff1661074957604051631afcd79f60e31b815260040160405180910390fd5b6116c4611673565b600080516020611fb5833981519152805460ff19169055565b806001600160a01b03163b60000361171357604051634c9c8ce360e01b81526001600160a01b038216600482015260240161095f565b600080516020611f7583398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b03168460405161175f9190611f58565b600060405180830381855af49150503d806000811461179a576040519150601f19603f3d011682016040523d82523d6000602084013e61179f565b606091505b50915091506117af8583836117d7565b95945050505050565b34156107495760405163b398979f60e01b815260040160405180910390fd5b6060826117ec576117e782611836565b61182f565b815115801561180357506001600160a01b0384163b155b1561182c57604051639996b31560e01b81526001600160a01b038516600482015260240161095f565b50805b9392505050565b8051156118465780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b60006020828403121561187157600080fd5b81356001600160e01b03198116811461182f57600080fd5b60006020828403121561189b57600080fd5b5035919050565b80356001600160a01b0381168114610d1457600080fd5b600080604083850312156118cc57600080fd5b823591506118dc602084016118a2565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561191e5761191e6118e5565b60405290565b60405160c0810167ffffffffffffffff8111828210171561191e5761191e6118e5565b604051601f8201601f1916810167ffffffffffffffff81118282101715611970576119706118e5565b604052919050565b600067ffffffffffffffff831115611992576119926118e5565b6119a5601f8401601f1916602001611947565b90508281528383830111156119b957600080fd5b828260208301376000602084830101529392505050565b600082601f8301126119e157600080fd5b61182f83833560208501611978565b600082601f830112611a0157600080fd5b8135602067ffffffffffffffff80831115611a1e57611a1e6118e5565b8260051b611a2d838201611947565b9384528581018301938381019088861115611a4757600080fd5b84880192505b85831015611ac857823584811115611a655760008081fd5b88016040818b03601f1901811315611a7d5760008081fd5b611a856118fb565b611a908884016118a2565b8152908201359086821115611aa55760008081fd5b611ab38c89848601016119d0565b81890152845250509184019190840190611a4d565b98975050505050505050565b60008060408385031215611ae757600080fd5b823567ffffffffffffffff80821115611aff57600080fd5b611b0b868387016119d0565b93506020850135915080821115611b2157600080fd5b50611b2e858286016119f0565b9150509250929050565b60008060408385031215611b4b57600080fd5b611b54836118a2565b9150602083013567ffffffffffffffff811115611b7057600080fd5b8301601f81018513611b8157600080fd5b611b2e85823560208401611978565b60005b83811015611bab578181015183820152602001611b93565b50506000910152565b60008151808452611bcc816020860160208601611b90565b601f01601f19169290920160200192915050565b60208152600061182f6020830184611bb4565b60008060408385031215611c0657600080fd5b50508035926020909101359150565b60008060408385031215611c2857600080fd5b82359150602083013567ffffffffffffffff811115611c4657600080fd5b611b2e858286016119f0565b60008082840360e0811215611c6657600080fd5b8335925060c0601f1982011215611c7c57600080fd5b50611c85611924565b60208401358015158114611c9857600080fd5b8082525060408401356020820152606084013560408201526080840135606082015260a0840135608082015260c084013560a0820152809150509250929050565b6001600160a01b0385168152608060208201819052600090611cfd90830186611bb4565b6040830194909452506060015292915050565b600060208284031215611d2257600080fd5b61182f826118a2565b600060208284031215611d3d57600080fd5b813567ffffffffffffffff811115611d5457600080fd5b611d60848285016119d0565b949350505050565b602081528151602082015260018060a01b0360208301511660408201526000604083015160a06060840152611da060c0840182611bb4565b905060608401516080840152608084015160a08401528091505092915050565b600060018201611de057634e487b7160e01b600052601160045260246000fd5b5060010190565b600181811c90821680611dfb57607f821691505b602082108103611e1b57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561070b576000816000526020600020601f850160051c81016020861015611e4a5750805b601f850160051c820191505b81811015610be857828155600101611e56565b815167ffffffffffffffff811115611e8357611e836118e5565b611e9781611e918454611de7565b84611e21565b602080601f831160018114611ecc5760008415611eb45750858301515b600019600386901b1c1916600185901b178555610be8565b600085815260208120601f198616915b82811015611efb57888601518255948401946001909101908401611edc565b5085821015611f195787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b600060208284031215611f5157600080fd5b5051919050565b60008251611f6a818460208701611b90565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800cd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300a264697066735822122076bf878f1d536c006076736c1bdd44399982e69b61c253234292fb9fd63579d364736f6c63430008180033",
      "linkReferences": {},
      "deployedLinkReferences": {},
      "devdoc": {
        "errors": {
          "AccessControlBadConfirmation()": [
            {
              "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
            }
          ],
          "AccessControlUnauthorizedAccount(address,bytes32)": [
            {
              "details": "The `account` is missing a role."
            }
          ],
          "AddressEmptyCode(address)": [
            {
              "details": "There's no code at `target` (it is not a contract)."
            }
          ],
          "ERC1967InvalidImplementation(address)": [
            {
              "details": "The `implementation` of the proxy is invalid."
            }
          ],
          "ERC1967NonPayable()": [
            {
              "details": "An upgrade function sees `msg.value > 0` that may be lost."
            }
          ],
          "EnforcedPause()": [
            {
              "details": "The operation failed because the contract is paused."
            }
          ],
          "ExpectedPause()": [
            {
              "details": "The operation failed because the contract is not paused."
            }
          ],
          "FailedInnerCall()": [
            {
              "details": "A call to an address target failed. The target may have reverted."
            }
          ],
          "InvalidInitialization()": [
            {
              "details": "The contract is already initialized."
            }
          ],
          "NotInitializing()": [
            {
              "details": "The contract is not initializing."
            }
          ],
          "OwnableInvalidOwner(address)": [
            {
              "details": "The owner is not a valid owner account. (eg. `address(0)`)"
            }
          ],
          "OwnableUnauthorizedAccount(address)": [
            {
              "details": "The caller account is not authorized to perform an operation."
            }
          ],
          "UUPSUnauthorizedCallContext()": [
            {
              "details": "The call is from an unauthorized context."
            }
          ],
          "UUPSUnsupportedProxiableUUID(bytes32)": [
            {
              "details": "The storage `slot` is unsupported as a UUID."
            }
          ]
        },
        "events": {
          "FileAdded(uint256,address,string)": {
            "params": {
              "fileId": "id of the file",
              "ownerAddress": "address of the owner",
              "url": "url of the file"
            }
          },
          "Initialized(uint64)": {
            "details": "Triggered when the contract has been initialized or reinitialized."
          },
          "Paused(address)": {
            "details": "Emitted when the pause is triggered by `account`."
          },
          "PermissionGranted(uint256,address)": {
            "params": {
              "entity": "address of the entity",
              "fileId": "id of the file"
            }
          },
          "PermissionRequested(uint256,address)": {
            "params": {
              "entity": "address of the entity",
              "fileId": "id of the file"
            }
          },
          "ProofAdded(uint256,address)": {
            "params": {
              "entity": "address of the entity",
              "fileId": "id of the file"
            }
          },
          "RoleAdminChanged(bytes32,bytes32,bytes32)": {
            "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
          },
          "RoleGranted(bytes32,address,address)": {
            "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
          },
          "RoleRevoked(bytes32,address,address)": {
            "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
          },
          "Unpaused(address)": {
            "details": "Emitted when the pause is lifted by `account`."
          },
          "Upgraded(address)": {
            "details": "Emitted when the implementation is upgraded."
          }
        },
        "kind": "dev",
        "methods": {
          "acceptOwnership()": {
            "details": "The new owner accepts the ownership transfer."
          },
          "addFile(string)": {
            "params": {
              "url": "url of the file"
            },
            "returns": {
              "_0": "uint256                          id of the file"
            }
          },
          "addFileWithPermissions(string,(address,string)[])": {
            "params": {
              "permissions": "permissions for the file",
              "url": "url of the file"
            },
            "returns": {
              "_0": "uint256                          id of the file"
            }
          },
          "addProof(uint256,(bool,uint256,uint256,uint256,uint256,uint256))": {
            "params": {
              "fileId": "id of the file",
              "proof": "proof for the file"
            }
          },
          "addProofOrigin(uint256,(bool,uint256,uint256,uint256,uint256,uint256))": {
            "params": {
              "fileId": "id of the file",
              "proof": "proof for the file"
            }
          },
          "authorize(uint256,(address,string)[])": {
            "params": {
              "permissions": "permissions for the file",
              "fileId": "id of the file"
            }
          },
          "filePermissionRequests(uint256,uint256)": {
            "params": {
              "fileId": "id of the file",
              "index": "index of the permission request"
            },
            "returns": {
              "_0": "address                          address of the entity who requested permission"
            }
          },
          "filePermissions(uint256,address)": {
            "params": {
              "entity": "address of the entity",
              "fileId": "id of the file"
            },
            "returns": {
              "_0": "string                           key for the entity"
            }
          },
          "fileProofs(uint256,address)": {
            "params": {
              "entity": "address of the entity",
              "fileId": "id of the file"
            },
            "returns": {
              "_0": "Proof                      proof for the file"
            }
          },
          "files(uint256)": {
            "params": {
              "fileId": "id of the file"
            },
            "returns": {
              "_0": "FileResponse                     information about the file"
            }
          },
          "getRoleAdmin(bytes32)": {
            "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
          },
          "grantRole(bytes32,address)": {
            "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
          },
          "hasRole(bytes32,address)": {
            "details": "Returns `true` if `account` has been granted `role`."
          },
          "initialize(address)": {
            "params": {
              "ownerAddress": "address of the owner"
            }
          },
          "owner()": {
            "details": "Returns the address of the current owner."
          },
          "pause()": {
            "details": "Pauses the contract"
          },
          "paused()": {
            "details": "Returns true if the contract is paused, and false otherwise."
          },
          "pendingOwner()": {
            "details": "Returns the address of the pending owner."
          },
          "proxiableUUID()": {
            "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
          },
          "renounceOwnership()": {
            "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
          },
          "renounceRole(bytes32,address)": {
            "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
          },
          "requestPermission(uint256)": {
            "params": {
              "fileId": "id of the file"
            }
          },
          "revokeRole(bytes32,address)": {
            "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
          },
          "supportsInterface(bytes4)": {
            "details": "See {IERC165-supportsInterface}."
          },
          "transferOwnership(address)": {
            "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
          },
          "unpause()": {
            "details": "Unpauses the contract"
          },
          "upgradeToAndCall(address,bytes)": {
            "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
            "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
          }
        },
        "version": 1
      },
      "evm": {
        "bytecode": {
          "functionDebugData": {},
          "generatedSources": [],
          "linkReferences": {},
          "object": "",
          "opcodes": "PUSH1 0xA0 PUSH1 0x40 MSTORE ADDRESS PUSH1 0x80 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x14 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x80 MLOAD PUSH2 0x200A PUSH2 0x3E PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x1216 ADD MSTORE DUP2 DUP2 PUSH2 0x123F ADD MSTORE PUSH2 0x1380 ADD MSTORE PUSH2 0x200A PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1E3 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8456CB59 GT PUSH2 0x102 JUMPI DUP1 PUSH4 0xC99B6803 GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xE30C3978 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xE30C3978 EQ PUSH2 0x5DB JUMPI DUP1 PUSH4 0xEB9B9B64 EQ PUSH2 0x5F0 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x610 JUMPI DUP1 PUSH4 0xF4C714B4 EQ PUSH2 0x630 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xC99B6803 EQ PUSH2 0x517 JUMPI DUP1 PUSH4 0xCD35364A EQ PUSH2 0x537 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x5A5 JUMPI DUP1 PUSH4 0xDFB5E9BA EQ PUSH2 0x5C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA217FDDF GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x481 JUMPI DUP1 PUSH4 0xAC1ABB68 EQ PUSH2 0x496 JUMPI DUP1 PUSH4 0xAD3CB1CC EQ PUSH2 0x4C6 JUMPI DUP1 PUSH4 0xC4D66DE8 EQ PUSH2 0x4F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x417 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x42C JUMPI DUP1 PUSH4 0x905C2686 EQ PUSH2 0x441 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x461 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x52D1902D GT PUSH2 0x17A JUMPI DUP1 PUSH4 0x67A3F59B GT PUSH2 0x149 JUMPI DUP1 PUSH4 0x67A3F59B EQ PUSH2 0x370 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x3CD JUMPI DUP1 PUSH4 0x7468CD62 EQ PUSH2 0x3E2 JUMPI DUP1 PUSH4 0x79BA5097 EQ PUSH2 0x402 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x52D1902D EQ PUSH2 0x2F5 JUMPI DUP1 PUSH4 0x54FD4D50 EQ PUSH2 0x30A JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x31E JUMPI DUP1 PUSH4 0x60F1C43A EQ PUSH2 0x343 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3BBAF127 GT PUSH2 0x1B6 JUMPI DUP1 PUSH4 0x3BBAF127 EQ PUSH2 0x28D JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x2AD JUMPI DUP1 PUSH4 0x3FF36D65 EQ PUSH2 0x2C2 JUMPI DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0x2E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1E8 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x21D JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x24B JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x26D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x208 PUSH2 0x203 CALLDATASIZE PUSH1 0x4 PUSH2 0x185F JUMP JUMPDEST PUSH2 0x65D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x229 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH2 0x238 CALLDATASIZE PUSH1 0x4 PUSH2 0x1889 JUMP JUMPDEST PUSH2 0x694 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x214 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x257 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26B PUSH2 0x266 CALLDATASIZE PUSH1 0x4 PUSH2 0x18B9 JUMP JUMPDEST PUSH2 0x6B6 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x279 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26B PUSH2 0x288 CALLDATASIZE PUSH1 0x4 PUSH2 0x18B9 JUMP JUMPDEST PUSH2 0x6D8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x299 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH2 0x2A8 CALLDATASIZE PUSH1 0x4 PUSH2 0x1AD4 JUMP JUMPDEST PUSH2 0x710 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26B PUSH2 0x739 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26B PUSH2 0x2DD CALLDATASIZE PUSH1 0x4 PUSH2 0x1889 JUMP JUMPDEST PUSH2 0x74B JUMP JUMPDEST PUSH2 0x26B PUSH2 0x2F0 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B38 JUMP JUMPDEST PUSH2 0x7D6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x301 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH2 0x7F5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x316 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH2 0x23D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x32A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1FB5 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0xFF AND PUSH2 0x208 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x34F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x363 PUSH2 0x35E CALLDATASIZE PUSH1 0x4 PUSH2 0x18B9 JUMP JUMPDEST PUSH2 0x812 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x214 SWAP2 SWAP1 PUSH2 0x1BE0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x37C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3B5 PUSH2 0x38B CALLDATASIZE PUSH1 0x4 PUSH2 0x1BF3 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP3 DUP5 MSTORE PUSH1 0x4 SWAP1 SWAP3 ADD SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x214 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26B PUSH2 0x8CC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26B PUSH2 0x3FD CALLDATASIZE PUSH1 0x4 PUSH2 0x1C15 JUMP JUMPDEST PUSH2 0x8DE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x40E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26B PUSH2 0x927 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x423 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26B PUSH2 0x974 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x438 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3B5 PUSH2 0x984 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x44D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26B PUSH2 0x45C CALLDATASIZE PUSH1 0x4 PUSH2 0x1C52 JUMP JUMPDEST PUSH2 0x9B9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x46D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x208 PUSH2 0x47C CALLDATASIZE PUSH1 0x4 PUSH2 0x18B9 JUMP JUMPDEST PUSH2 0x9CC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x48D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH1 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4B6 PUSH2 0x4B1 CALLDATASIZE PUSH1 0x4 PUSH2 0x1889 JUMP JUMPDEST PUSH2 0xA04 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x214 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1CD9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x363 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH5 0x352E302E3 PUSH1 0xDC SHL DUP2 MSTORE POP DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x503 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26B PUSH2 0x512 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D10 JUMP JUMPDEST PUSH2 0xAC0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x523 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26B PUSH2 0x532 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C52 JUMP JUMPDEST PUSH2 0xBF0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x543 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x557 PUSH2 0x552 CALLDATASIZE PUSH1 0x4 PUSH2 0x18B9 JUMP JUMPDEST PUSH2 0xC03 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x214 SWAP2 SWAP1 PUSH1 0x0 PUSH1 0xC0 DUP3 ADD SWAP1 POP DUP3 MLOAD ISZERO ISZERO DUP3 MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0xA0 DUP4 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26B PUSH2 0x5C0 CALLDATASIZE PUSH1 0x4 PUSH2 0x18B9 JUMP JUMPDEST PUSH2 0xCB7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3B5 PUSH2 0xCD3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH2 0x60B CALLDATASIZE PUSH1 0x4 PUSH2 0x1D2B JUMP JUMPDEST PUSH2 0xCFC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x61C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26B PUSH2 0x62B CALLDATASIZE PUSH1 0x4 PUSH2 0x1D10 JUMP JUMPDEST PUSH2 0xD19 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x63C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x650 PUSH2 0x64B CALLDATASIZE PUSH1 0x4 PUSH2 0x1889 JUMP JUMPDEST PUSH2 0xD9E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x214 SWAP2 SWAP1 PUSH2 0x1D68 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x7965DB0B PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x68E JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1F95 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x6BF DUP3 PUSH2 0x694 JUMP JUMPDEST PUSH2 0x6C8 DUP2 PUSH2 0xEBB JUMP JUMPDEST PUSH2 0x6D2 DUP4 DUP4 PUSH2 0xEC5 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0x701 JUMPI PUSH1 0x40 MLOAD PUSH4 0x334BD919 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x70B DUP3 DUP3 PUSH2 0xF6A JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x71A PUSH2 0xFE6 JUMP JUMPDEST PUSH2 0x723 DUP4 PUSH2 0x1017 JUMP JUMPDEST PUSH2 0x72F PUSH1 0x0 SLOAD DUP4 PUSH2 0x10B6 JUMP JUMPDEST POP PUSH1 0x0 SLOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x741 PUSH2 0x1179 JUMP JUMPDEST PUSH2 0x749 PUSH2 0x11AB JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x753 PUSH2 0xFE6 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x3 ADD DUP1 SLOAD SWAP2 PUSH2 0x770 DUP4 PUSH2 0x1DC0 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x3 DUP2 ADD SLOAD DUP5 MSTORE PUSH1 0x4 ADD SWAP1 SWAP2 MSTORE DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD SWAP1 SWAP2 DUP4 SWAP2 PUSH32 0x539186F88413C222585FF95BA62E32A55EB0153D0265293BFE5B2C324935A0A4 SWAP2 SWAP1 LOG3 POP JUMP JUMPDEST PUSH2 0x7DE PUSH2 0x120B JUMP JUMPDEST PUSH2 0x7E7 DUP3 PUSH2 0x12B0 JUMP JUMPDEST PUSH2 0x7F1 DUP3 DUP3 PUSH2 0x12B8 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7FF PUSH2 0x1375 JUMP JUMPDEST POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1F75 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE PUSH1 0x5 ADD SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x60 SWAP2 SWAP1 PUSH2 0x846 SWAP1 PUSH2 0x1DE7 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x872 SWAP1 PUSH2 0x1DE7 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x8BF JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x894 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x8BF JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x8A2 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x8D4 PUSH2 0x1179 JUMP JUMPDEST PUSH2 0x749 PUSH1 0x0 PUSH2 0x13BE JUMP JUMPDEST PUSH2 0x8E6 PUSH2 0xFE6 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x91D JUMPI PUSH1 0x40 MLOAD PUSH4 0xABEA3229 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x7F1 DUP3 DUP3 PUSH2 0x10B6 JUMP JUMPDEST CALLER DUP1 PUSH2 0x931 PUSH2 0xCD3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x968 JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x971 DUP2 PUSH2 0x13BE JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x97C PUSH2 0x1179 JUMP JUMPDEST PUSH2 0x749 PUSH2 0x13F6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x9016D09D72D40FDAE2FD8CEAC6B6234C7706214FD39C1CD1E609A0528C199300 JUMPDEST SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x9C1 PUSH2 0xFE6 JUMP JUMPDEST PUSH2 0x7F1 ORIGIN DUP4 DUP4 PUSH2 0x143F JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1F95 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD SWAP2 DUP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND SWAP3 PUSH2 0xA31 SWAP1 PUSH2 0x1DE7 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xA5D SWAP1 PUSH2 0x1DE7 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xAAA JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xA7F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xAAA JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xA8D JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 DUP1 PUSH1 0x2 ADD SLOAD SWAP1 DUP1 PUSH1 0x3 ADD SLOAD SWAP1 POP DUP5 JUMP JUMPDEST PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 DUP1 SLOAD PUSH1 0x1 PUSH1 0x40 SHL DUP2 DIV PUSH1 0xFF AND ISZERO SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP2 ISZERO DUP1 ISZERO PUSH2 0xB06 JUMPI POP DUP3 JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x1 EQ DUP1 ISZERO PUSH2 0xB23 JUMPI POP ADDRESS EXTCODESIZE ISZERO JUMPDEST SWAP1 POP DUP2 ISZERO DUP1 ISZERO PUSH2 0xB31 JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0xB4F JUMPI PUSH1 0x40 MLOAD PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 OR DUP6 SSTORE DUP4 ISZERO PUSH2 0xB79 JUMPI DUP5 SLOAD PUSH1 0xFF PUSH1 0x40 SHL NOT AND PUSH1 0x1 PUSH1 0x40 SHL OR DUP6 SSTORE JUMPDEST PUSH2 0xB81 PUSH2 0x152B JUMP JUMPDEST PUSH2 0xB89 PUSH2 0x152B JUMP JUMPDEST PUSH2 0xB91 PUSH2 0x1533 JUMP JUMPDEST PUSH2 0xB99 PUSH2 0x152B JUMP JUMPDEST PUSH2 0xBA2 DUP7 PUSH2 0x13BE JUMP JUMPDEST DUP4 ISZERO PUSH2 0xBE8 JUMPI DUP5 SLOAD PUSH1 0xFF PUSH1 0x40 SHL NOT AND DUP6 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0xC7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xBF8 PUSH2 0xFE6 JUMP JUMPDEST PUSH2 0x7F1 CALLER DUP4 DUP4 PUSH2 0x143F JUMP JUMPDEST PUSH2 0xC3E PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 SWAP4 DUP5 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE DUP4 DUP7 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 SWAP1 SWAP6 AND DUP1 DUP8 MSTORE PUSH1 0x6 SWAP1 SWAP6 ADD DUP1 DUP3 MSTORE DUP5 DUP8 KECCAK256 DUP1 SLOAD PUSH1 0xFF AND ISZERO ISZERO DUP6 MSTORE SWAP3 DUP4 ADD SLOAD DUP3 DUP6 ADD MSTORE PUSH1 0x2 DUP4 ADD SLOAD SWAP5 DUP5 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x3 DUP3 ADD SLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x4 DUP3 ADD SLOAD PUSH1 0x80 DUP5 ADD MSTORE SWAP4 SWAP1 SWAP5 MSTORE SWAP2 MSTORE PUSH1 0x5 SWAP1 SWAP2 ADD SLOAD PUSH1 0xA0 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH2 0xCC0 DUP3 PUSH2 0x694 JUMP JUMPDEST PUSH2 0xCC9 DUP2 PUSH2 0xEBB JUMP JUMPDEST PUSH2 0x6D2 DUP4 DUP4 PUSH2 0xF6A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x237E158222E3E6968B72B9DB0D8043AACF074AD9F650F0D1606B4D82EE432C00 PUSH2 0x9A9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD06 PUSH2 0xFE6 JUMP JUMPDEST PUSH2 0xD0F DUP3 PUSH2 0x1017 JUMP JUMPDEST POP PUSH1 0x0 SLOAD JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xD21 PUSH2 0x1179 JUMP JUMPDEST PUSH32 0x237E158222E3E6968B72B9DB0D8043AACF074AD9F650F0D1606B4D82EE432C00 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 DUP2 OR DUP3 SSTORE PUSH2 0xD65 PUSH2 0x984 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x38D16B8CAC22D99FC7C124B9CD0DE2D3FA1FAEF420BFE791D8C362D765E22700 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0xDD9 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP3 DUP4 SWAP1 KECCAK256 DUP4 MLOAD PUSH1 0xA0 DUP2 ADD DUP6 MSTORE DUP7 DUP2 MSTORE DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP2 DUP3 ADD DUP1 SLOAD SWAP3 SWAP4 SWAP2 SWAP3 SWAP2 DUP4 ADD SWAP2 PUSH2 0xE1E SWAP1 PUSH2 0x1DE7 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xE4A SWAP1 PUSH2 0x1DE7 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xE97 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xE6C JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xE97 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xE7A JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x2 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x3 ADD SLOAD DUP2 MSTORE POP SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x971 DUP2 CALLER PUSH2 0x1543 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1F95 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xEE0 DUP5 DUP5 PUSH2 0x9CC JUMP JUMPDEST PUSH2 0xF60 JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0xF16 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH1 0x1 SWAP2 POP POP PUSH2 0x68E JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP PUSH2 0x68E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1F95 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xF85 DUP5 DUP5 PUSH2 0x9CC JUMP JUMPDEST ISZERO PUSH2 0xF60 JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP8 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 PUSH1 0x1 SWAP2 POP POP PUSH2 0x68E JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1FB5 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x749 JUMPI PUSH1 0x40 MLOAD PUSH4 0xD93C0665 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 DUP1 PUSH2 0x1026 DUP4 PUSH2 0x1DC0 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x0 DUP1 SLOAD DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER OR SWAP1 SSTORE DUP3 SLOAD DUP4 MSTORE SWAP1 SWAP2 KECCAK256 ADD PUSH2 0x105F DUP3 DUP3 PUSH2 0x1E69 JUMP JUMPDEST POP PUSH1 0x0 DUP1 SLOAD DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 NUMBER PUSH1 0x2 SWAP1 SWAP2 ADD SSTORE SWAP1 SLOAD SWAP1 MLOAD CALLER SWAP2 SWAP1 PUSH32 0x2980B13036C0D9DF6B71EA9E9C09536EFD24D7DD1868E29AA730F0C3FBD1A0DC SWAP1 PUSH2 0x10AB SWAP1 DUP6 SWAP1 PUSH2 0x1BE0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x70B JUMPI PUSH1 0x0 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x10D6 JUMPI PUSH2 0x10D6 PUSH2 0x1F29 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD SWAP1 POP PUSH1 0x0 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x10F8 JUMPI PUSH2 0x10F8 PUSH2 0x1F29 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD DUP2 ADD MLOAD PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x1 DUP4 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP4 MSTORE PUSH1 0x5 ADD SWAP1 SWAP4 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SWAP1 SWAP2 POP PUSH2 0x1138 DUP3 DUP3 PUSH2 0x1E69 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 DUP7 SWAP1 PUSH32 0x6E0403EF2B13328247BF9260AD8DD9C18FB5A18B95EA25DE817CA991DA05929B SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP PUSH1 0x1 ADD PUSH2 0x10B9 JUMP JUMPDEST CALLER PUSH2 0x1182 PUSH2 0x984 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x749 JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x95F JUMP JUMPDEST PUSH2 0x11B3 PUSH2 0x157C JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1FB5 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0xFF NOT AND DUP2 SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA CALLER JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ DUP1 PUSH2 0x1292 JUMPI POP PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1286 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1F75 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x749 JUMPI PUSH1 0x40 MLOAD PUSH4 0x703E46DD PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x971 PUSH2 0x1179 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x52D1902D PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1312 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x130F SWAP2 DUP2 ADD SWAP1 PUSH2 0x1F3F JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x133A JUMPI PUSH1 0x40 MLOAD PUSH4 0x4C9C8CE3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x95F JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1F75 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 EQ PUSH2 0x136B JUMPI PUSH1 0x40 MLOAD PUSH4 0x2A875269 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x95F JUMP JUMPDEST PUSH2 0x70B DUP4 DUP4 PUSH2 0x15AC JUMP JUMPDEST ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x749 JUMPI PUSH1 0x40 MLOAD PUSH4 0x703E46DD PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x237E158222E3E6968B72B9DB0D8043AACF074AD9F650F0D1606B4D82EE432C00 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND DUP2 SSTORE PUSH2 0x7F1 DUP3 PUSH2 0x1602 JUMP JUMPDEST PUSH2 0x13FE PUSH2 0xFE6 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1FB5 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR DUP2 SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 CALLER PUSH2 0x11ED JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE PUSH1 0x5 ADD SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH2 0x146F SWAP1 PUSH2 0x1DE7 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 SUB PUSH2 0x1491 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE980311 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND DUP1 DUP7 MSTORE PUSH1 0x6 SWAP1 SWAP2 ADD DUP4 MSTORE DUP2 DUP6 KECCAK256 DUP7 MLOAD DUP2 SLOAD PUSH1 0xFF NOT AND SWAP1 ISZERO ISZERO OR DUP2 SSTORE SWAP3 DUP7 ADD MLOAD SWAP4 DUP4 ADD SWAP4 SWAP1 SWAP4 SSTORE DUP5 DUP2 ADD MLOAD PUSH1 0x2 DUP4 ADD SSTORE PUSH1 0x60 DUP6 ADD MLOAD PUSH1 0x3 DUP4 ADD SSTORE PUSH1 0x80 DUP6 ADD MLOAD PUSH1 0x4 DUP4 ADD SSTORE PUSH1 0xA0 DUP6 ADD MLOAD PUSH1 0x5 SWAP1 SWAP3 ADD SWAP2 SWAP1 SWAP2 SSTORE MLOAD SWAP1 SWAP2 DUP5 SWAP2 PUSH32 0x1F310120C84FB25B6C2653131BFEFA18228693A3138D87303CA4A51570F600D2 SWAP2 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x749 PUSH2 0x1673 JUMP JUMPDEST PUSH2 0x153B PUSH2 0x1673 JUMP JUMPDEST PUSH2 0x749 PUSH2 0x16BC JUMP JUMPDEST PUSH2 0x154D DUP3 DUP3 PUSH2 0x9CC JUMP JUMPDEST PUSH2 0x7F1 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE2517D3F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x95F JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1FB5 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0xFF AND PUSH2 0x749 JUMPI PUSH1 0x40 MLOAD PUSH4 0x8DFC202B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x15B5 DUP3 PUSH2 0x16DD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP1 PUSH1 0x0 SWAP1 LOG2 DUP1 MLOAD ISZERO PUSH2 0x15FA JUMPI PUSH2 0x70B DUP3 DUP3 PUSH2 0x1742 JUMP JUMPDEST PUSH2 0x7F1 PUSH2 0x17B8 JUMP JUMPDEST PUSH32 0x9016D09D72D40FDAE2FD8CEAC6B6234C7706214FD39C1CD1E609A0528C199300 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 DUP3 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP3 AND SWAP2 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 SLOAD PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x749 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1AFCD79F PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x16C4 PUSH2 0x1673 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1FB5 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EXTCODESIZE PUSH1 0x0 SUB PUSH2 0x1713 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4C9C8CE3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x95F JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1F75 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x40 MLOAD PUSH2 0x175F SWAP2 SWAP1 PUSH2 0x1F58 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x179A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x179F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x17AF DUP6 DUP4 DUP4 PUSH2 0x17D7 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x749 JUMPI PUSH1 0x40 MLOAD PUSH4 0xB398979F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x60 DUP3 PUSH2 0x17EC JUMPI PUSH2 0x17E7 DUP3 PUSH2 0x1836 JUMP JUMPDEST PUSH2 0x182F JUMP JUMPDEST DUP2 MLOAD ISZERO DUP1 ISZERO PUSH2 0x1803 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO JUMPDEST ISZERO PUSH2 0x182C JUMPI PUSH1 0x40 MLOAD PUSH4 0x9996B315 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x95F JUMP JUMPDEST POP DUP1 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD ISZERO PUSH2 0x1846 JUMPI DUP1 MLOAD DUP1 DUP3 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA12F521 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1871 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x182F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x189B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xD14 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x18CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x18DC PUSH1 0x20 DUP5 ADD PUSH2 0x18A2 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x191E JUMPI PUSH2 0x191E PUSH2 0x18E5 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xC0 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x191E JUMPI PUSH2 0x191E PUSH2 0x18E5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x1970 JUMPI PUSH2 0x1970 PUSH2 0x18E5 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT ISZERO PUSH2 0x1992 JUMPI PUSH2 0x1992 PUSH2 0x18E5 JUMP JUMPDEST PUSH2 0x19A5 PUSH1 0x1F DUP5 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH2 0x1947 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE DUP4 DUP4 DUP4 ADD GT ISZERO PUSH2 0x19B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP3 PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x19E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x182F DUP4 DUP4 CALLDATALOAD PUSH1 0x20 DUP6 ADD PUSH2 0x1978 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1A01 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP4 GT ISZERO PUSH2 0x1A1E JUMPI PUSH2 0x1A1E PUSH2 0x18E5 JUMP JUMPDEST DUP3 PUSH1 0x5 SHL PUSH2 0x1A2D DUP4 DUP3 ADD PUSH2 0x1947 JUMP JUMPDEST SWAP4 DUP5 MSTORE DUP6 DUP2 ADD DUP4 ADD SWAP4 DUP4 DUP2 ADD SWAP1 DUP9 DUP7 GT ISZERO PUSH2 0x1A47 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 DUP9 ADD SWAP3 POP JUMPDEST DUP6 DUP4 LT ISZERO PUSH2 0x1AC8 JUMPI DUP3 CALLDATALOAD DUP5 DUP2 GT ISZERO PUSH2 0x1A65 JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST DUP9 ADD PUSH1 0x40 DUP2 DUP12 SUB PUSH1 0x1F NOT ADD DUP2 SGT ISZERO PUSH2 0x1A7D JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST PUSH2 0x1A85 PUSH2 0x18FB JUMP JUMPDEST PUSH2 0x1A90 DUP9 DUP5 ADD PUSH2 0x18A2 JUMP JUMPDEST DUP2 MSTORE SWAP1 DUP3 ADD CALLDATALOAD SWAP1 DUP7 DUP3 GT ISZERO PUSH2 0x1AA5 JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST PUSH2 0x1AB3 DUP13 DUP10 DUP5 DUP7 ADD ADD PUSH2 0x19D0 JUMP JUMPDEST DUP2 DUP10 ADD MSTORE DUP5 MSTORE POP POP SWAP2 DUP5 ADD SWAP2 SWAP1 DUP5 ADD SWAP1 PUSH2 0x1A4D JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1AE7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1AFF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1B0B DUP7 DUP4 DUP8 ADD PUSH2 0x19D0 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1B21 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B2E DUP6 DUP3 DUP7 ADD PUSH2 0x19F0 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1B4B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1B54 DUP4 PUSH2 0x18A2 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1B70 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x1B81 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1B2E DUP6 DUP3 CALLDATALOAD PUSH1 0x20 DUP5 ADD PUSH2 0x1978 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1BAB JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1B93 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1BCC DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1B90 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x182F PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1BB4 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1C06 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1C28 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1C46 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1B2E DUP6 DUP3 DUP7 ADD PUSH2 0x19F0 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 SUB PUSH1 0xE0 DUP2 SLT ISZERO PUSH2 0x1C66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0xC0 PUSH1 0x1F NOT DUP3 ADD SLT ISZERO PUSH2 0x1C7C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1C85 PUSH2 0x1924 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1C98 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP3 MSTORE POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 DUP5 ADD CALLDATALOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x80 DUP5 ADD CALLDATALOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0xA0 DUP5 ADD CALLDATALOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xC0 DUP5 ADD CALLDATALOAD PUSH1 0xA0 DUP3 ADD MSTORE DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP2 MSTORE PUSH1 0x80 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x1CFD SWAP1 DUP4 ADD DUP7 PUSH2 0x1BB4 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD SWAP5 SWAP1 SWAP5 MSTORE POP PUSH1 0x60 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1D22 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x182F DUP3 PUSH2 0x18A2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1D3D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1D54 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D60 DUP5 DUP3 DUP6 ADD PUSH2 0x19D0 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE DUP2 MLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x20 DUP4 ADD MLOAD AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0xA0 PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x1DA0 PUSH1 0xC0 DUP5 ADD DUP3 PUSH2 0x1BB4 JUMP JUMPDEST SWAP1 POP PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x80 DUP5 ADD MLOAD PUSH1 0xA0 DUP5 ADD MSTORE DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x1DE0 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1DFB JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1E1B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x70B JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x1E4A JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xBE8 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x1E56 JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1E83 JUMPI PUSH2 0x1E83 PUSH2 0x18E5 JUMP JUMPDEST PUSH2 0x1E97 DUP2 PUSH2 0x1E91 DUP5 SLOAD PUSH2 0x1DE7 JUMP JUMPDEST DUP5 PUSH2 0x1E21 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x1ECC JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x1EB4 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0xBE8 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1EFB JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0x1EDC JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0x1F19 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1F51 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x1F6A DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1B90 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP INVALID CALLDATASIZE ADDMOD SWAP5 LOG1 EXTCODESIZE LOG1 LOG3 0x21 MOD PUSH8 0xC828492DB98DCA3E KECCAK256 PUSH23 0xCC3735A920A3CA505D382BBC02DD7BC7DEC4DCEEDDA775 0xE5 DUP14 0xD5 COINBASE 0xE0 DUP11 GT PUSH13 0x6C53815C0BD028192F7B626800 0xCD MCOPY 0xD1 TLOAD PUSH15 0x187E77E9AEE88184C21F4F2182AB58 0x27 0xCB EXTCODESIZE PUSH31 0x7FBEDCD63F03300A264697066735822122076BF878F1D536C006076736C1B 0xDD PREVRANDAO CODECOPY SWAP10 DUP3 0xE6 SWAP12 PUSH2 0xC253 0x23 TIMESTAMP SWAP3 0xFB SWAP16 0xD6 CALLDATALOAD PUSH26 0xD364736F6C634300081800330000000000000000000000000000 ",
          "sourceMap": "463:9108:17:-:0;;;1171:4:4;1128:48;;463:9108:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
        },
        "deployedBytecode": {
          "functionDebugData": {
            "@DEFAULT_ADMIN_ROLE_28": {
              "entryPoint": null,
              "id": 28,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@UPGRADE_INTERFACE_VERSION_972": {
              "entryPoint": null,
              "id": 972,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@__AccessControl_init_63": {
              "entryPoint": null,
              "id": 63,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@__Ownable2Step_init_400": {
              "entryPoint": 5419,
              "id": 400,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@__Pausable_init_1228": {
              "entryPoint": 5427,
              "id": 1228,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@__Pausable_init_unchained_1246": {
              "entryPoint": 5820,
              "id": 1246,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@__UUPSUpgradeable_init_1002": {
              "entryPoint": null,
              "id": 1002,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_addFile_3443": {
              "entryPoint": 4119,
              "id": 3443,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_addProof_3351": {
              "entryPoint": 5183,
              "id": 3351,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@_authorizeUpgrade_3002": {
              "entryPoint": 4784,
              "id": 3002,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_authorize_3403": {
              "entryPoint": 4278,
              "id": 3403,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_checkInitializing_870": {
              "entryPoint": 5747,
              "id": 870,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_checkNonPayable_1916": {
              "entryPoint": 6072,
              "id": 1916,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_checkNotDelegated_1078": {
              "entryPoint": 4981,
              "id": 1078,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_checkOwner_622": {
              "entryPoint": 4473,
              "id": 622,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_checkProxy_1062": {
              "entryPoint": 4619,
              "id": 1062,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_checkRole_129": {
              "entryPoint": 3771,
              "id": 129,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_checkRole_150": {
              "entryPoint": 5443,
              "id": 150,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_files_3458": {
              "entryPoint": 2564,
              "id": 3458,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_getAccessControlStorage_46": {
              "entryPoint": null,
              "id": 46,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@_getInitializableStorage_947": {
              "entryPoint": null,
              "id": 947,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@_getOwnable2StepStorage_388": {
              "entryPoint": null,
              "id": 388,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@_getOwnableStorage_525": {
              "entryPoint": null,
              "id": 525,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@_getPausableStorage_1202": {
              "entryPoint": null,
              "id": 1202,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@_grantRole_315": {
              "entryPoint": 3781,
              "id": 315,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@_isInitializing_938": {
              "entryPoint": null,
              "id": 938,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@_msgSender_1158": {
              "entryPoint": null,
              "id": 1158,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@_pause_1327": {
              "entryPoint": 5110,
              "id": 1327,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_requireNotPaused_1290": {
              "entryPoint": 4070,
              "id": 1290,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_requirePaused_1303": {
              "entryPoint": 5500,
              "id": 1303,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_revert_2179": {
              "entryPoint": 6198,
              "id": 2179,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_revokeRole_361": {
              "entryPoint": 3946,
              "id": 361,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@_setImplementation_1702": {
              "entryPoint": 5853,
              "id": 1702,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_transferOwnership_474": {
              "entryPoint": 5054,
              "id": 474,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_transferOwnership_693": {
              "entryPoint": 5634,
              "id": 693,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_unpause_1351": {
              "entryPoint": 4523,
              "id": 1351,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_upgradeToAndCallUUPS_1129": {
              "entryPoint": 4792,
              "id": 1129,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@acceptOwnership_498": {
              "entryPoint": 2343,
              "id": 498,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@addFileWithPermissions_3202": {
              "entryPoint": 1808,
              "id": 3202,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@addFile_3176": {
              "entryPoint": 3324,
              "id": 3176,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@addProofOrigin_3308": {
              "entryPoint": 2489,
              "id": 3308,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@addProof_3288": {
              "entryPoint": 3056,
              "id": 3288,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@authorize_3268": {
              "entryPoint": 2270,
              "id": 3268,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@filePermissionRequests_3082": {
              "entryPoint": null,
              "id": 3082,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@filePermissions_3101": {
              "entryPoint": 2066,
              "id": 3101,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@fileProofs_3159": {
              "entryPoint": 3075,
              "id": 3159,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@filesCount_3453": {
              "entryPoint": null,
              "id": 3453,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@files_3063": {
              "entryPoint": 3486,
              "id": 3063,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@functionDelegateCall_2099": {
              "entryPoint": 5954,
              "id": 2099,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@getAddressSlot_2212": {
              "entryPoint": null,
              "id": 2212,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@getImplementation_1675": {
              "entryPoint": null,
              "id": 1675,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@getRoleAdmin_171": {
              "entryPoint": 1684,
              "id": 171,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@grantRole_190": {
              "entryPoint": 1718,
              "id": 190,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@hasRole_116": {
              "entryPoint": 2508,
              "id": 116,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@initialize_2992": {
              "entryPoint": 2752,
              "id": 2992,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@owner_605": {
              "entryPoint": 2436,
              "id": 605,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@pause_3023": {
              "entryPoint": 2420,
              "id": 3023,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@paused_1278": {
              "entryPoint": null,
              "id": 1278,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@pendingOwner_422": {
              "entryPoint": 3283,
              "id": 422,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@proxiableUUID_1020": {
              "entryPoint": 2037,
              "id": 1020,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@renounceOwnership_636": {
              "entryPoint": 2252,
              "id": 636,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@renounceRole_232": {
              "entryPoint": 1752,
              "id": 232,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@requestPermission_3237": {
              "entryPoint": 1867,
              "id": 3237,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@revokeRole_209": {
              "entryPoint": 3255,
              "id": 209,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@supportsInterface_1520": {
              "entryPoint": null,
              "id": 1520,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@supportsInterface_91": {
              "entryPoint": 1629,
              "id": 91,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@transferOwnership_450": {
              "entryPoint": 3353,
              "id": 450,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@unpause_3034": {
              "entryPoint": 1849,
              "id": 3034,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@upgradeToAndCall_1040": {
              "entryPoint": 2006,
              "id": 1040,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@upgradeToAndCall_1736": {
              "entryPoint": 5548,
              "id": 1736,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@verifyCallResultFromTarget_2139": {
              "entryPoint": 6103,
              "id": 2139,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "@version_3012": {
              "entryPoint": null,
              "id": 3012,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "abi_decode_address": {
              "entryPoint": 6306,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_decode_array_struct_FilePermissions_dyn": {
              "entryPoint": 6640,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_available_length_string": {
              "entryPoint": 6520,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_decode_string": {
              "entryPoint": 6608,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_address": {
              "entryPoint": 7440,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_addresst_bytes_memory_ptr": {
              "entryPoint": 6968,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_bytes32": {
              "entryPoint": 6281,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_bytes32_fromMemory": {
              "entryPoint": 7999,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_bytes32t_address": {
              "entryPoint": 6329,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_bytes4": {
              "entryPoint": 6239,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_string_memory_ptr": {
              "entryPoint": 7467,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_string_memory_ptrt_array$_t_struct$_FilePermissions_$3515_memory_ptr_$dyn_memory_ptr": {
              "entryPoint": 6868,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_uint256": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_uint256t_address": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_uint256t_array$_t_struct$_FilePermissions_$3515_memory_ptr_$dyn_memory_ptr": {
              "entryPoint": 7189,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_uint256t_struct$_Proof_$3477_memory_ptr": {
              "entryPoint": 7250,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_uint256t_uint256": {
              "entryPoint": 7155,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_encode_string": {
              "entryPoint": 7092,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
              "entryPoint": 8024,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_bytes32__to_t_address_t_bytes32__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_string_memory_ptr_t_uint256_t_uint256__to_t_address_t_string_memory_ptr_t_uint256_t_uint256__fromStack_reversed": {
              "entryPoint": 7385,
              "id": null,
              "parameterSlots": 5,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_rational_1_by_1__to_t_uint64__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 7136,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_struct$_FileResponse_$3510_memory_ptr__to_t_struct$_FileResponse_$3510_memory_ptr__fromStack_reversed": {
              "entryPoint": 7528,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_struct$_Proof_$3477_memory_ptr__to_t_struct$_Proof_$3477_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "allocate_memory": {
              "entryPoint": 6471,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "allocate_memory_1948": {
              "entryPoint": 6395,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "allocate_memory_1950": {
              "entryPoint": 6436,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "array_dataslot_string_storage": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "clean_up_bytearray_end_slots_string_storage": {
              "entryPoint": 7713,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage": {
              "entryPoint": 7785,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "copy_memory_to_memory_with_cleanup": {
              "entryPoint": 7056,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "extract_byte_array_length": {
              "entryPoint": 7655,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "extract_used_part_and_set_length_of_short_byte_array": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "increment_t_uint256": {
              "entryPoint": 7616,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "panic_error_0x32": {
              "entryPoint": 7977,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x41": {
              "entryPoint": 6373,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            }
          },
          "generatedSources": [
            {
              "ast": {
                "nativeSrc": "0:14819:26",
                "nodeType": "YulBlock",
                "src": "0:14819:26",
                "statements": [
                  {
                    "nativeSrc": "6:3:26",
                    "nodeType": "YulBlock",
                    "src": "6:3:26",
                    "statements": []
                  },
                  {
                    "body": {
                      "nativeSrc": "83:217:26",
                      "nodeType": "YulBlock",
                      "src": "83:217:26",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "129:16:26",
                            "nodeType": "YulBlock",
                            "src": "129:16:26",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "138:1:26",
                                      "nodeType": "YulLiteral",
                                      "src": "138:1:26",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "141:1:26",
                                      "nodeType": "YulLiteral",
                                      "src": "141:1:26",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "131:6:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "131:6:26"
                                  },
                                  "nativeSrc": "131:12:26",
                                  "nodeType": "YulFunctionCall",
                                  "src": "131:12:26"
                                },
                                "nativeSrc": "131:12:26",
                                "nodeType": "YulExpressionStatement",
                                "src": "131:12:26"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "104:7:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "104:7:26"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "113:9:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "113:9:26"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "100:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "100:3:26"
                                },
                                "nativeSrc": "100:23:26",
                                "nodeType": "YulFunctionCall",
                                "src": "100:23:26"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "125:2:26",
                                "nodeType": "YulLiteral",
                                "src": "125:2:26",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nativeSrc": "96:3:26",
                              "nodeType": "YulIdentifier",
                              "src": "96:3:26"
                            },
                            "nativeSrc": "96:32:26",
                            "nodeType": "YulFunctionCall",
                            "src": "96:32:26"
                          },
                          "nativeSrc": "93:52:26",
                          "nodeType": "YulIf",
                          "src": "93:52:26"
                        },
                        {
                          "nativeSrc": "154:36:26",
                          "nodeType": "YulVariableDeclaration",
                          "src": "154:36:26",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "180:9:26",
                                "nodeType": "YulIdentifier",
                                "src": "180:9:26"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nativeSrc": "167:12:26",
                              "nodeType": "YulIdentifier",
                              "src": "167:12:26"
                            },
                            "nativeSrc": "167:23:26",
                            "nodeType": "YulFunctionCall",
                            "src": "167:23:26"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nativeSrc": "158:5:26",
                              "nodeType": "YulTypedName",
                              "src": "158:5:26",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "254:16:26",
                            "nodeType": "YulBlock",
                            "src": "254:16:26",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "263:1:26",
                                      "nodeType": "YulLiteral",
                                      "src": "263:1:26",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "266:1:26",
                                      "nodeType": "YulLiteral",
                                      "src": "266:1:26",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "256:6:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "256:6:26"
                                  },
                                  "nativeSrc": "256:12:26",
                                  "nodeType": "YulFunctionCall",
                                  "src": "256:12:26"
                                },
                                "nativeSrc": "256:12:26",
                                "nodeType": "YulExpressionStatement",
                                "src": "256:12:26"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "212:5:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "212:5:26"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nativeSrc": "223:5:26",
                                        "nodeType": "YulIdentifier",
                                        "src": "223:5:26"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nativeSrc": "234:3:26",
                                            "nodeType": "YulLiteral",
                                            "src": "234:3:26",
                                            "type": "",
                                            "value": "224"
                                          },
                                          {
                                            "kind": "number",
                                            "nativeSrc": "239:10:26",
                                            "nodeType": "YulLiteral",
                                            "src": "239:10:26",
                                            "type": "",
                                            "value": "0xffffffff"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nativeSrc": "230:3:26",
                                          "nodeType": "YulIdentifier",
                                          "src": "230:3:26"
                                        },
                                        "nativeSrc": "230:20:26",
                                        "nodeType": "YulFunctionCall",
                                        "src": "230:20:26"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nativeSrc": "219:3:26",
                                      "nodeType": "YulIdentifier",
                                      "src": "219:3:26"
                                    },
                                    "nativeSrc": "219:32:26",
                                    "nodeType": "YulFunctionCall",
                                    "src": "219:32:26"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nativeSrc": "209:2:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "209:2:26"
                                },
                                "nativeSrc": "209:43:26",
                                "nodeType": "YulFunctionCall",
                                "src": "209:43:26"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nativeSrc": "202:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "202:6:26"
                            },
                            "nativeSrc": "202:51:26",
                            "nodeType": "YulFunctionCall",
                            "src": "202:51:26"
                          },
                          "nativeSrc": "199:71:26",
                          "nodeType": "YulIf",
                          "src": "199:71:26"
                        },
                        {
                          "nativeSrc": "279:15:26",
                          "nodeType": "YulAssignment",
                          "src": "279:15:26",
                          "value": {
                            "name": "value",
                            "nativeSrc": "289:5:26",
                            "nodeType": "YulIdentifier",
                            "src": "289:5:26"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nativeSrc": "279:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "279:6:26"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes4",
                    "nativeSrc": "14:286:26",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "49:9:26",
                        "nodeType": "YulTypedName",
                        "src": "49:9:26",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nativeSrc": "60:7:26",
                        "nodeType": "YulTypedName",
                        "src": "60:7:26",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nativeSrc": "72:6:26",
                        "nodeType": "YulTypedName",
                        "src": "72:6:26",
                        "type": ""
                      }
                    ],
                    "src": "14:286:26"
                  },
                  {
                    "body": {
                      "nativeSrc": "400:92:26",
                      "nodeType": "YulBlock",
                      "src": "400:92:26",
                      "statements": [
                        {
                          "nativeSrc": "410:26:26",
                          "nodeType": "YulAssignment",
                          "src": "410:26:26",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "422:9:26",
                                "nodeType": "YulIdentifier",
                                "src": "422:9:26"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "433:2:26",
                                "nodeType": "YulLiteral",
                                "src": "433:2:26",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "418:3:26",
                              "nodeType": "YulIdentifier",
                              "src": "418:3:26"
                            },
                            "nativeSrc": "418:18:26",
                            "nodeType": "YulFunctionCall",
                            "src": "418:18:26"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "410:4:26",
                              "nodeType": "YulIdentifier",
                              "src": "410:4:26"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "452:9:26",
                                "nodeType": "YulIdentifier",
                                "src": "452:9:26"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nativeSrc": "477:6:26",
                                        "nodeType": "YulIdentifier",
                                        "src": "477:6:26"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nativeSrc": "470:6:26",
                                      "nodeType": "YulIdentifier",
                                      "src": "470:6:26"
                                    },
                                    "nativeSrc": "470:14:26",
                                    "nodeType": "YulFunctionCall",
                                    "src": "470:14:26"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nativeSrc": "463:6:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "463:6:26"
                                },
                                "nativeSrc": "463:22:26",
                                "nodeType": "YulFunctionCall",
                                "src": "463:22:26"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "445:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "445:6:26"
                            },
                            "nativeSrc": "445:41:26",
                            "nodeType": "YulFunctionCall",
                            "src": "445:41:26"
                          },
                          "nativeSrc": "445:41:26",
                          "nodeType": "YulExpressionStatement",
                          "src": "445:41:26"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
                    "nativeSrc": "305:187:26",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "369:9:26",
                        "nodeType": "YulTypedName",
                        "src": "369:9:26",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "380:6:26",
                        "nodeType": "YulTypedName",
                        "src": "380:6:26",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "391:4:26",
                        "nodeType": "YulTypedName",
                        "src": "391:4:26",
                        "type": ""
                      }
                    ],
                    "src": "305:187:26"
                  },
                  {
                    "body": {
                      "nativeSrc": "567:110:26",
                      "nodeType": "YulBlock",
                      "src": "567:110:26",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "613:16:26",
                            "nodeType": "YulBlock",
                            "src": "613:16:26",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "622:1:26",
                                      "nodeType": "YulLiteral",
                                      "src": "622:1:26",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "625:1:26",
                                      "nodeType": "YulLiteral",
                                      "src": "625:1:26",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "615:6:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "615:6:26"
                                  },
                                  "nativeSrc": "615:12:26",
                                  "nodeType": "YulFunctionCall",
                                  "src": "615:12:26"
                                },
                                "nativeSrc": "615:12:26",
                                "nodeType": "YulExpressionStatement",
                                "src": "615:12:26"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "588:7:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "588:7:26"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "597:9:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "597:9:26"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "584:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "584:3:26"
                                },
                                "nativeSrc": "584:23:26",
                                "nodeType": "YulFunctionCall",
                                "src": "584:23:26"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "609:2:26",
                                "nodeType": "YulLiteral",
                                "src": "609:2:26",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nativeSrc": "580:3:26",
                              "nodeType": "YulIdentifier",
                              "src": "580:3:26"
                            },
                            "nativeSrc": "580:32:26",
                            "nodeType": "YulFunctionCall",
                            "src": "580:32:26"
                          },
                          "nativeSrc": "577:52:26",
                          "nodeType": "YulIf",
                          "src": "577:52:26"
                        },
                        {
                          "nativeSrc": "638:33:26",
                          "nodeType": "YulAssignment",
                          "src": "638:33:26",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "661:9:26",
                                "nodeType": "YulIdentifier",
                                "src": "661:9:26"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nativeSrc": "648:12:26",
                              "nodeType": "YulIdentifier",
                              "src": "648:12:26"
                            },
                            "nativeSrc": "648:23:26",
                            "nodeType": "YulFunctionCall",
                            "src": "648:23:26"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nativeSrc": "638:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "638:6:26"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes32",
                    "nativeSrc": "497:180:26",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "533:9:26",
                        "nodeType": "YulTypedName",
                        "src": "533:9:26",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nativeSrc": "544:7:26",
                        "nodeType": "YulTypedName",
                        "src": "544:7:26",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nativeSrc": "556:6:26",
                        "nodeType": "YulTypedName",
                        "src": "556:6:26",
                        "type": ""
                      }
                    ],
                    "src": "497:180:26"
                  },
                  {
                    "body": {
                      "nativeSrc": "783:76:26",
                      "nodeType": "YulBlock",
                      "src": "783:76:26",
                      "statements": [
                        {
                          "nativeSrc": "793:26:26",
                          "nodeType": "YulAssignment",
                          "src": "793:26:26",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "805:9:26",
                                "nodeType": "YulIdentifier",
                                "src": "805:9:26"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "816:2:26",
                                "nodeType": "YulLiteral",
                                "src": "816:2:26",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "801:3:26",
                              "nodeType": "YulIdentifier",
                              "src": "801:3:26"
                            },
                            "nativeSrc": "801:18:26",
                            "nodeType": "YulFunctionCall",
                            "src": "801:18:26"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "793:4:26",
                              "nodeType": "YulIdentifier",
                              "src": "793:4:26"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "835:9:26",
                                "nodeType": "YulIdentifier",
                                "src": "835:9:26"
                              },
                              {
                                "name": "value0",
                                "nativeSrc": "846:6:26",
                                "nodeType": "YulIdentifier",
                                "src": "846:6:26"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "828:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "828:6:26"
                            },
                            "nativeSrc": "828:25:26",
                            "nodeType": "YulFunctionCall",
                            "src": "828:25:26"
                          },
                          "nativeSrc": "828:25:26",
                          "nodeType": "YulExpressionStatement",
                          "src": "828:25:26"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
                    "nativeSrc": "682:177:26",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "752:9:26",
                        "nodeType": "YulTypedName",
                        "src": "752:9:26",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "763:6:26",
                        "nodeType": "YulTypedName",
                        "src": "763:6:26",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "774:4:26",
                        "nodeType": "YulTypedName",
                        "src": "774:4:26",
                        "type": ""
                      }
                    ],
                    "src": "682:177:26"
                  },
                  {
                    "body": {
                      "nativeSrc": "913:124:26",
                      "nodeType": "YulBlock",
                      "src": "913:124:26",
                      "statements": [
                        {
                          "nativeSrc": "923:29:26",
                          "nodeType": "YulAssignment",
                          "src": "923:29:26",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nativeSrc": "945:6:26",
                                "nodeType": "YulIdentifier",
                                "src": "945:6:26"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nativeSrc": "932:12:26",
                              "nodeType": "YulIdentifier",
                              "src": "932:12:26"
                            },
                            "nativeSrc": "932:20:26",
                            "nodeType": "YulFunctionCall",
                            "src": "932:20:26"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nativeSrc": "923:5:26",
                              "nodeType": "YulIdentifier",
                              "src": "923:5:26"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "1015:16:26",
                            "nodeType": "YulBlock",
                            "src": "1015:16:26",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "1024:1:26",
                                      "nodeType": "YulLiteral",
                                      "src": "1024:1:26",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "1027:1:26",
                                      "nodeType": "YulLiteral",
                                      "src": "1027:1:26",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "1017:6:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "1017:6:26"
                                  },
                                  "nativeSrc": "1017:12:26",
                                  "nodeType": "YulFunctionCall",
                                  "src": "1017:12:26"
                                },
                                "nativeSrc": "1017:12:26",
                                "nodeType": "YulExpressionStatement",
                                "src": "1017:12:26"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "974:5:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "974:5:26"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nativeSrc": "985:5:26",
                                        "nodeType": "YulIdentifier",
                                        "src": "985:5:26"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nativeSrc": "1000:3:26",
                                                "nodeType": "YulLiteral",
                                                "src": "1000:3:26",
                                                "type": "",
                                                "value": "160"
                                              },
                                              {
                                                "kind": "number",
                                                "nativeSrc": "1005:1:26",
                                                "nodeType": "YulLiteral",
                                                "src": "1005:1:26",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nativeSrc": "996:3:26",
                                              "nodeType": "YulIdentifier",
                                              "src": "996:3:26"
                                            },
                                            "nativeSrc": "996:11:26",
                                            "nodeType": "YulFunctionCall",
                                            "src": "996:11:26"
                                          },
                                          {
                                            "kind": "number",
                                            "nativeSrc": "1009:1:26",
                                            "nodeType": "YulLiteral",
                                            "src": "1009:1:26",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nativeSrc": "992:3:26",
                                          "nodeType": "YulIdentifier",
                                          "src": "992:3:26"
                                        },
                                        "nativeSrc": "992:19:26",
                                        "nodeType": "YulFunctionCall",
                                        "src": "992:19:26"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nativeSrc": "981:3:26",
                                      "nodeType": "YulIdentifier",
                                      "src": "981:3:26"
                                    },
                                    "nativeSrc": "981:31:26",
                                    "nodeType": "YulFunctionCall",
                                    "src": "981:31:26"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nativeSrc": "971:2:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "971:2:26"
                                },
                                "nativeSrc": "971:42:26",
                                "nodeType": "YulFunctionCall",
                                "src": "971:42:26"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nativeSrc": "964:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "964:6:26"
                            },
                            "nativeSrc": "964:50:26",
                            "nodeType": "YulFunctionCall",
                            "src": "964:50:26"
                          },
                          "nativeSrc": "961:70:26",
                          "nodeType": "YulIf",
                          "src": "961:70:26"
                        }
                      ]
                    },
                    "name": "abi_decode_address",
                    "nativeSrc": "864:173:26",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nativeSrc": "892:6:26",
                        "nodeType": "YulTypedName",
                        "src": "892:6:26",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nativeSrc": "903:5:26",
                        "nodeType": "YulTypedName",
                        "src": "903:5:26",
                        "type": ""
                      }
                    ],
                    "src": "864:173:26"
                  },
                  {
                    "body": {
                      "nativeSrc": "1129:167:26",
                      "nodeType": "YulBlock",
                      "src": "1129:167:26",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "1175:16:26",
                            "nodeType": "YulBlock",
                            "src": "1175:16:26",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "1184:1:26",
                                      "nodeType": "YulLiteral",
                                      "src": "1184:1:26",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "1187:1:26",
                                      "nodeType": "YulLiteral",
                                      "src": "1187:1:26",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "1177:6:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "1177:6:26"
                                  },
                                  "nativeSrc": "1177:12:26",
                                  "nodeType": "YulFunctionCall",
                                  "src": "1177:12:26"
                                },
                                "nativeSrc": "1177:12:26",
                                "nodeType": "YulExpressionStatement",
                                "src": "1177:12:26"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "1150:7:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "1150:7:26"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "1159:9:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "1159:9:26"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "1146:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "1146:3:26"
                                },
                                "nativeSrc": "1146:23:26",
                                "nodeType": "YulFunctionCall",
                                "src": "1146:23:26"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "1171:2:26",
                                "nodeType": "YulLiteral",
                                "src": "1171:2:26",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nativeSrc": "1142:3:26",
                              "nodeType": "YulIdentifier",
                              "src": "1142:3:26"
                            },
                            "nativeSrc": "1142:32:26",
                            "nodeType": "YulFunctionCall",
                            "src": "1142:32:26"
                          },
                          "nativeSrc": "1139:52:26",
                          "nodeType": "YulIf",
                          "src": "1139:52:26"
                        },
                        {
                          "nativeSrc": "1200:33:26",
                          "nodeType": "YulAssignment",
                          "src": "1200:33:26",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "1223:9:26",
                                "nodeType": "YulIdentifier",
                                "src": "1223:9:26"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nativeSrc": "1210:12:26",
                              "nodeType": "YulIdentifier",
                              "src": "1210:12:26"
                            },
                            "nativeSrc": "1210:23:26",
                            "nodeType": "YulFunctionCall",
                            "src": "1210:23:26"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nativeSrc": "1200:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "1200:6:26"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "1242:48:26",
                          "nodeType": "YulAssignment",
                          "src": "1242:48:26",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "1275:9:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "1275:9:26"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "1286:2:26",
                                    "nodeType": "YulLiteral",
                                    "src": "1286:2:26",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "1271:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "1271:3:26"
                                },
                                "nativeSrc": "1271:18:26",
                                "nodeType": "YulFunctionCall",
                                "src": "1271:18:26"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nativeSrc": "1252:18:26",
                              "nodeType": "YulIdentifier",
                              "src": "1252:18:26"
                            },
                            "nativeSrc": "1252:38:26",
                            "nodeType": "YulFunctionCall",
                            "src": "1252:38:26"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nativeSrc": "1242:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "1242:6:26"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes32t_address",
                    "nativeSrc": "1042:254:26",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "1087:9:26",
                        "nodeType": "YulTypedName",
                        "src": "1087:9:26",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nativeSrc": "1098:7:26",
                        "nodeType": "YulTypedName",
                        "src": "1098:7:26",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nativeSrc": "1110:6:26",
                        "nodeType": "YulTypedName",
                        "src": "1110:6:26",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nativeSrc": "1118:6:26",
                        "nodeType": "YulTypedName",
                        "src": "1118:6:26",
                        "type": ""
                      }
                    ],
                    "src": "1042:254:26"
                  },
                  {
                    "body": {
                      "nativeSrc": "1333:95:26",
                      "nodeType": "YulBlock",
                      "src": "1333:95:26",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "1350:1:26",
                                "nodeType": "YulLiteral",
                                "src": "1350:1:26",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nativeSrc": "1357:3:26",
                                    "nodeType": "YulLiteral",
                                    "src": "1357:3:26",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "1362:10:26",
                                    "nodeType": "YulLiteral",
                                    "src": "1362:10:26",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nativeSrc": "1353:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "1353:3:26"
                                },
                                "nativeSrc": "1353:20:26",
                                "nodeType": "YulFunctionCall",
                                "src": "1353:20:26"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "1343:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "1343:6:26"
                            },
                            "nativeSrc": "1343:31:26",
                            "nodeType": "YulFunctionCall",
                            "src": "1343:31:26"
                          },
                          "nativeSrc": "1343:31:26",
                          "nodeType": "YulExpressionStatement",
                          "src": "1343:31:26"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "1390:1:26",
                                "nodeType": "YulLiteral",
                                "src": "1390:1:26",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "1393:4:26",
                                "nodeType": "YulLiteral",
                                "src": "1393:4:26",
                                "type": "",
                                "value": "0x41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "1383:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "1383:6:26"
                            },
                            "nativeSrc": "1383:15:26",
                            "nodeType": "YulFunctionCall",
                            "src": "1383:15:26"
                          },
                          "nativeSrc": "1383:15:26",
                          "nodeType": "YulExpressionStatement",
                          "src": "1383:15:26"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "1414:1:26",
                                "nodeType": "YulLiteral",
                                "src": "1414:1:26",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "1417:4:26",
                                "nodeType": "YulLiteral",
                                "src": "1417:4:26",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nativeSrc": "1407:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "1407:6:26"
                            },
                            "nativeSrc": "1407:15:26",
                            "nodeType": "YulFunctionCall",
                            "src": "1407:15:26"
                          },
                          "nativeSrc": "1407:15:26",
                          "nodeType": "YulExpressionStatement",
                          "src": "1407:15:26"
                        }
                      ]
                    },
                    "name": "panic_error_0x41",
                    "nativeSrc": "1301:127:26",
                    "nodeType": "YulFunctionDefinition",
                    "src": "1301:127:26"
                  },
                  {
                    "body": {
                      "nativeSrc": "1479:211:26",
                      "nodeType": "YulBlock",
                      "src": "1479:211:26",
                      "statements": [
                        {
                          "nativeSrc": "1489:21:26",
                          "nodeType": "YulAssignment",
                          "src": "1489:21:26",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "1505:4:26",
                                "nodeType": "YulLiteral",
                                "src": "1505:4:26",
                                "type": "",
                                "value": "0x40"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nativeSrc": "1499:5:26",
                              "nodeType": "YulIdentifier",
                              "src": "1499:5:26"
                            },
                            "nativeSrc": "1499:11:26",
                            "nodeType": "YulFunctionCall",
                            "src": "1499:11:26"
                          },
                          "variableNames": [
                            {
                              "name": "memPtr",
                              "nativeSrc": "1489:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "1489:6:26"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "1519:35:26",
                          "nodeType": "YulVariableDeclaration",
                          "src": "1519:35:26",
                          "value": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nativeSrc": "1541:6:26",
                                "nodeType": "YulIdentifier",
                                "src": "1541:6:26"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "1549:4:26",
                                "nodeType": "YulLiteral",
                                "src": "1549:4:26",
                                "type": "",
                                "value": "0x40"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "1537:3:26",
                              "nodeType": "YulIdentifier",
                              "src": "1537:3:26"
                            },
                            "nativeSrc": "1537:17:26",
                            "nodeType": "YulFunctionCall",
                            "src": "1537:17:26"
                          },
                          "variables": [
                            {
                              "name": "newFreePtr",
                              "nativeSrc": "1523:10:26",
                              "nodeType": "YulTypedName",
                              "src": "1523:10:26",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "1629:22:26",
                            "nodeType": "YulBlock",
                            "src": "1629:22:26",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nativeSrc": "1631:16:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "1631:16:26"
                                  },
                                  "nativeSrc": "1631:18:26",
                                  "nodeType": "YulFunctionCall",
                                  "src": "1631:18:26"
                                },
                                "nativeSrc": "1631:18:26",
                                "nodeType": "YulExpressionStatement",
                                "src": "1631:18:26"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nativeSrc": "1572:10:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "1572:10:26"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "1584:18:26",
                                    "nodeType": "YulLiteral",
                                    "src": "1584:18:26",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nativeSrc": "1569:2:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "1569:2:26"
                                },
                                "nativeSrc": "1569:34:26",
                                "nodeType": "YulFunctionCall",
                                "src": "1569:34:26"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nativeSrc": "1608:10:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "1608:10:26"
                                  },
                                  {
                                    "name": "memPtr",
                                    "nativeSrc": "1620:6:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "1620:6:26"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nativeSrc": "1605:2:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "1605:2:26"
                                },
                                "nativeSrc": "1605:22:26",
                                "nodeType": "YulFunctionCall",
                                "src": "1605:22:26"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nativeSrc": "1566:2:26",
                              "nodeType": "YulIdentifier",
                              "src": "1566:2:26"
                            },
                            "nativeSrc": "1566:62:26",
                            "nodeType": "YulFunctionCall",
                            "src": "1566:62:26"
                          },
                          "nativeSrc": "1563:88:26",
                          "nodeType": "YulIf",
                          "src": "1563:88:26"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "1667:4:26",
                                "nodeType": "YulLiteral",
                                "src": "1667:4:26",
                                "type": "",
                                "value": "0x40"
                              },
                              {
                                "name": "newFreePtr",
                                "nativeSrc": "1673:10:26",
                                "nodeType": "YulIdentifier",
                                "src": "1673:10:26"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "1660:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "1660:6:26"
                            },
                            "nativeSrc": "1660:24:26",
                            "nodeType": "YulFunctionCall",
                            "src": "1660:24:26"
                          },
                          "nativeSrc": "1660:24:26",
                          "nodeType": "YulExpressionStatement",
                          "src": "1660:24:26"
                        }
                      ]
                    },
                    "name": "allocate_memory_1948",
                    "nativeSrc": "1433:257:26",
                    "nodeType": "YulFunctionDefinition",
                    "returnVariables": [
                      {
                        "name": "memPtr",
                        "nativeSrc": "1468:6:26",
                        "nodeType": "YulTypedName",
                        "src": "1468:6:26",
                        "type": ""
                      }
                    ],
                    "src": "1433:257:26"
                  },
                  {
                    "body": {
                      "nativeSrc": "1741:207:26",
                      "nodeType": "YulBlock",
                      "src": "1741:207:26",
                      "statements": [
                        {
                          "nativeSrc": "1751:19:26",
                          "nodeType": "YulAssignment",
                          "src": "1751:19:26",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "1767:2:26",
                                "nodeType": "YulLiteral",
                                "src": "1767:2:26",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nativeSrc": "1761:5:26",
                              "nodeType": "YulIdentifier",
                              "src": "1761:5:26"
                            },
                            "nativeSrc": "1761:9:26",
                            "nodeType": "YulFunctionCall",
                            "src": "1761:9:26"
                          },
                          "variableNames": [
                            {
                              "name": "memPtr",
                              "nativeSrc": "1751:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "1751:6:26"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "1779:35:26",
                          "nodeType": "YulVariableDeclaration",
                          "src": "1779:35:26",
                          "value": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nativeSrc": "1801:6:26",
                                "nodeType": "YulIdentifier",
                                "src": "1801:6:26"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "1809:4:26",
                                "nodeType": "YulLiteral",
                                "src": "1809:4:26",
                                "type": "",
                                "value": "0xc0"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "1797:3:26",
                              "nodeType": "YulIdentifier",
                              "src": "1797:3:26"
                            },
                            "nativeSrc": "1797:17:26",
                            "nodeType": "YulFunctionCall",
                            "src": "1797:17:26"
                          },
                          "variables": [
                            {
                              "name": "newFreePtr",
                              "nativeSrc": "1783:10:26",
                              "nodeType": "YulTypedName",
                              "src": "1783:10:26",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "1889:22:26",
                            "nodeType": "YulBlock",
                            "src": "1889:22:26",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nativeSrc": "1891:16:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "1891:16:26"
                                  },
                                  "nativeSrc": "1891:18:26",
                                  "nodeType": "YulFunctionCall",
                                  "src": "1891:18:26"
                                },
                                "nativeSrc": "1891:18:26",
                                "nodeType": "YulExpressionStatement",
                                "src": "1891:18:26"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nativeSrc": "1832:10:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "1832:10:26"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "1844:18:26",
                                    "nodeType": "YulLiteral",
                                    "src": "1844:18:26",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nativeSrc": "1829:2:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "1829:2:26"
                                },
                                "nativeSrc": "1829:34:26",
                                "nodeType": "YulFunctionCall",
                                "src": "1829:34:26"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nativeSrc": "1868:10:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "1868:10:26"
                                  },
                                  {
                                    "name": "memPtr",
                                    "nativeSrc": "1880:6:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "1880:6:26"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nativeSrc": "1865:2:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "1865:2:26"
                                },
                                "nativeSrc": "1865:22:26",
                                "nodeType": "YulFunctionCall",
                                "src": "1865:22:26"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nativeSrc": "1826:2:26",
                              "nodeType": "YulIdentifier",
                              "src": "1826:2:26"
                            },
                            "nativeSrc": "1826:62:26",
                            "nodeType": "YulFunctionCall",
                            "src": "1826:62:26"
                          },
                          "nativeSrc": "1823:88:26",
                          "nodeType": "YulIf",
                          "src": "1823:88:26"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "1927:2:26",
                                "nodeType": "YulLiteral",
                                "src": "1927:2:26",
                                "type": "",
                                "value": "64"
                              },
                              {
                                "name": "newFreePtr",
                                "nativeSrc": "1931:10:26",
                                "nodeType": "YulIdentifier",
                                "src": "1931:10:26"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "1920:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "1920:6:26"
                            },
                            "nativeSrc": "1920:22:26",
                            "nodeType": "YulFunctionCall",
                            "src": "1920:22:26"
                          },
                          "nativeSrc": "1920:22:26",
                          "nodeType": "YulExpressionStatement",
                          "src": "1920:22:26"
                        }
                      ]
                    },
                    "name": "allocate_memory_1950",
                    "nativeSrc": "1695:253:26",
                    "nodeType": "YulFunctionDefinition",
                    "returnVariables": [
                      {
                        "name": "memPtr",
                        "nativeSrc": "1730:6:26",
                        "nodeType": "YulTypedName",
                        "src": "1730:6:26",
                        "type": ""
                      }
                    ],
                    "src": "1695:253:26"
                  },
                  {
                    "body": {
                      "nativeSrc": "1998:230:26",
                      "nodeType": "YulBlock",
                      "src": "1998:230:26",
                      "statements": [
                        {
                          "nativeSrc": "2008:19:26",
                          "nodeType": "YulAssignment",
                          "src": "2008:19:26",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "2024:2:26",
                                "nodeType": "YulLiteral",
                                "src": "2024:2:26",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nativeSrc": "2018:5:26",
                              "nodeType": "YulIdentifier",
                              "src": "2018:5:26"
                            },
                            "nativeSrc": "2018:9:26",
                            "nodeType": "YulFunctionCall",
                            "src": "2018:9:26"
                          },
                          "variableNames": [
                            {
                              "name": "memPtr",
                              "nativeSrc": "2008:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "2008:6:26"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "2036:58:26",
                          "nodeType": "YulVariableDeclaration",
                          "src": "2036:58:26",
                          "value": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nativeSrc": "2058:6:26",
                                "nodeType": "YulIdentifier",
                                "src": "2058:6:26"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "size",
                                        "nativeSrc": "2074:4:26",
                                        "nodeType": "YulIdentifier",
                                        "src": "2074:4:26"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "2080:2:26",
                                        "nodeType": "YulLiteral",
                                        "src": "2080:2:26",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "2070:3:26",
                                      "nodeType": "YulIdentifier",
                                      "src": "2070:3:26"
                                    },
                                    "nativeSrc": "2070:13:26",
                                    "nodeType": "YulFunctionCall",
                                    "src": "2070:13:26"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nativeSrc": "2089:2:26",
                                        "nodeType": "YulLiteral",
                                        "src": "2089:2:26",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nativeSrc": "2085:3:26",
                                      "nodeType": "YulIdentifier",
                                      "src": "2085:3:26"
                                    },
                                    "nativeSrc": "2085:7:26",
                                    "nodeType": "YulFunctionCall",
                                    "src": "2085:7:26"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nativeSrc": "2066:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "2066:3:26"
                                },
                                "nativeSrc": "2066:27:26",
                                "nodeType": "YulFunctionCall",
                                "src": "2066:27:26"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "2054:3:26",
                              "nodeType": "YulIdentifier",
                              "src": "2054:3:26"
                            },
                            "nativeSrc": "2054:40:26",
                            "nodeType": "YulFunctionCall",
                            "src": "2054:40:26"
                          },
                          "variables": [
                            {
                              "name": "newFreePtr",
                              "nativeSrc": "2040:10:26",
                              "nodeType": "YulTypedName",
                              "src": "2040:10:26",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "2169:22:26",
                            "nodeType": "YulBlock",
                            "src": "2169:22:26",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nativeSrc": "2171:16:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "2171:16:26"
                                  },
                                  "nativeSrc": "2171:18:26",
                                  "nodeType": "YulFunctionCall",
                                  "src": "2171:18:26"
                                },
                                "nativeSrc": "2171:18:26",
                                "nodeType": "YulExpressionStatement",
                                "src": "2171:18:26"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nativeSrc": "2112:10:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "2112:10:26"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "2124:18:26",
                                    "nodeType": "YulLiteral",
                                    "src": "2124:18:26",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nativeSrc": "2109:2:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "2109:2:26"
                                },
                                "nativeSrc": "2109:34:26",
                                "nodeType": "YulFunctionCall",
                                "src": "2109:34:26"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nativeSrc": "2148:10:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "2148:10:26"
                                  },
                                  {
                                    "name": "memPtr",
                                    "nativeSrc": "2160:6:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "2160:6:26"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nativeSrc": "2145:2:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "2145:2:26"
                                },
                                "nativeSrc": "2145:22:26",
                                "nodeType": "YulFunctionCall",
                                "src": "2145:22:26"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nativeSrc": "2106:2:26",
                              "nodeType": "YulIdentifier",
                              "src": "2106:2:26"
                            },
                            "nativeSrc": "2106:62:26",
                            "nodeType": "YulFunctionCall",
                            "src": "2106:62:26"
                          },
                          "nativeSrc": "2103:88:26",
                          "nodeType": "YulIf",
                          "src": "2103:88:26"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "2207:2:26",
                                "nodeType": "YulLiteral",
                                "src": "2207:2:26",
                                "type": "",
                                "value": "64"
                              },
                              {
                                "name": "newFreePtr",
                                "nativeSrc": "2211:10:26",
                                "nodeType": "YulIdentifier",
                                "src": "2211:10:26"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "2200:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "2200:6:26"
                            },
                            "nativeSrc": "2200:22:26",
                            "nodeType": "YulFunctionCall",
                            "src": "2200:22:26"
                          },
                          "nativeSrc": "2200:22:26",
                          "nodeType": "YulExpressionStatement",
                          "src": "2200:22:26"
                        }
                      ]
                    },
                    "name": "allocate_memory",
                    "nativeSrc": "1953:275:26",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "size",
                        "nativeSrc": "1978:4:26",
                        "nodeType": "YulTypedName",
                        "src": "1978:4:26",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "memPtr",
                        "nativeSrc": "1987:6:26",
                        "nodeType": "YulTypedName",
                        "src": "1987:6:26",
                        "type": ""
                      }
                    ],
                    "src": "1953:275:26"
                  },
                  {
                    "body": {
                      "nativeSrc": "2308:332:26",
                      "nodeType": "YulBlock",
                      "src": "2308:332:26",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "2352:22:26",
                            "nodeType": "YulBlock",
                            "src": "2352:22:26",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nativeSrc": "2354:16:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "2354:16:26"
                                  },
                                  "nativeSrc": "2354:18:26",
                                  "nodeType": "YulFunctionCall",
                                  "src": "2354:18:26"
                                },
                                "nativeSrc": "2354:18:26",
                                "nodeType": "YulExpressionStatement",
                                "src": "2354:18:26"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "length",
                                "nativeSrc": "2324:6:26",
                                "nodeType": "YulIdentifier",
                                "src": "2324:6:26"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "2332:18:26",
                                "nodeType": "YulLiteral",
                                "src": "2332:18:26",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nativeSrc": "2321:2:26",
                              "nodeType": "YulIdentifier",
                              "src": "2321:2:26"
                            },
                            "nativeSrc": "2321:30:26",
                            "nodeType": "YulFunctionCall",
                            "src": "2321:30:26"
                          },
                          "nativeSrc": "2318:56:26",
                          "nodeType": "YulIf",
                          "src": "2318:56:26"
                        },
                        {
                          "nativeSrc": "2383:66:26",
                          "nodeType": "YulAssignment",
                          "src": "2383:66:26",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "length",
                                            "nativeSrc": "2420:6:26",
                                            "nodeType": "YulIdentifier",
                                            "src": "2420:6:26"
                                          },
                                          {
                                            "kind": "number",
                                            "nativeSrc": "2428:2:26",
                                            "nodeType": "YulLiteral",
                                            "src": "2428:2:26",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nativeSrc": "2416:3:26",
                                          "nodeType": "YulIdentifier",
                                          "src": "2416:3:26"
                                        },
                                        "nativeSrc": "2416:15:26",
                                        "nodeType": "YulFunctionCall",
                                        "src": "2416:15:26"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nativeSrc": "2437:2:26",
                                            "nodeType": "YulLiteral",
                                            "src": "2437:2:26",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nativeSrc": "2433:3:26",
                                          "nodeType": "YulIdentifier",
                                          "src": "2433:3:26"
                                        },
                                        "nativeSrc": "2433:7:26",
                                        "nodeType": "YulFunctionCall",
                                        "src": "2433:7:26"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nativeSrc": "2412:3:26",
                                      "nodeType": "YulIdentifier",
                                      "src": "2412:3:26"
                                    },
                                    "nativeSrc": "2412:29:26",
                                    "nodeType": "YulFunctionCall",
                                    "src": "2412:29:26"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "2443:4:26",
                                    "nodeType": "YulLiteral",
                                    "src": "2443:4:26",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "2408:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "2408:3:26"
                                },
                                "nativeSrc": "2408:40:26",
                                "nodeType": "YulFunctionCall",
                                "src": "2408:40:26"
                              }
                            ],
                            "functionName": {
                              "name": "allocate_memory",
                              "nativeSrc": "2392:15:26",
                              "nodeType": "YulIdentifier",
                              "src": "2392:15:26"
                            },
                            "nativeSrc": "2392:57:26",
                            "nodeType": "YulFunctionCall",
                            "src": "2392:57:26"
                          },
                          "variableNames": [
                            {
                              "name": "array",
                              "nativeSrc": "2383:5:26",
                              "nodeType": "YulIdentifier",
                              "src": "2383:5:26"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "array",
                                "nativeSrc": "2465:5:26",
                                "nodeType": "YulIdentifier",
                                "src": "2465:5:26"
                              },
                              {
                                "name": "length",
                                "nativeSrc": "2472:6:26",
                                "nodeType": "YulIdentifier",
                                "src": "2472:6:26"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "2458:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "2458:6:26"
                            },
                            "nativeSrc": "2458:21:26",
                            "nodeType": "YulFunctionCall",
                            "src": "2458:21:26"
                          },
                          "nativeSrc": "2458:21:26",
                          "nodeType": "YulExpressionStatement",
                          "src": "2458:21:26"
                        },
                        {
                          "body": {
                            "nativeSrc": "2517:16:26",
                            "nodeType": "YulBlock",
                            "src": "2517:16:26",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "2526:1:26",
                                      "nodeType": "YulLiteral",
                                      "src": "2526:1:26",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "2529:1:26",
                                      "nodeType": "YulLiteral",
                                      "src": "2529:1:26",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "2519:6:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "2519:6:26"
                                  },
                                  "nativeSrc": "2519:12:26",
                                  "nodeType": "YulFunctionCall",
                                  "src": "2519:12:26"
                                },
                                "nativeSrc": "2519:12:26",
                                "nodeType": "YulExpressionStatement",
                                "src": "2519:12:26"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "src",
                                    "nativeSrc": "2498:3:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "2498:3:26"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "2503:6:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "2503:6:26"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "2494:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "2494:3:26"
                                },
                                "nativeSrc": "2494:16:26",
                                "nodeType": "YulFunctionCall",
                                "src": "2494:16:26"
                              },
                              {
                                "name": "end",
                                "nativeSrc": "2512:3:26",
                                "nodeType": "YulIdentifier",
                                "src": "2512:3:26"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nativeSrc": "2491:2:26",
                              "nodeType": "YulIdentifier",
                              "src": "2491:2:26"
                            },
                            "nativeSrc": "2491:25:26",
                            "nodeType": "YulFunctionCall",
                            "src": "2491:25:26"
                          },
                          "nativeSrc": "2488:45:26",
                          "nodeType": "YulIf",
                          "src": "2488:45:26"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "array",
                                    "nativeSrc": "2559:5:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "2559:5:26"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "2566:4:26",
                                    "nodeType": "YulLiteral",
                                    "src": "2566:4:26",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "2555:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "2555:3:26"
                                },
                                "nativeSrc": "2555:16:26",
                                "nodeType": "YulFunctionCall",
                                "src": "2555:16:26"
                              },
                              {
                                "name": "src",
                                "nativeSrc": "2573:3:26",
                                "nodeType": "YulIdentifier",
                                "src": "2573:3:26"
                              },
                              {
                                "name": "length",
                                "nativeSrc": "2578:6:26",
                                "nodeType": "YulIdentifier",
                                "src": "2578:6:26"
                              }
                            ],
                            "functionName": {
                              "name": "calldatacopy",
                              "nativeSrc": "2542:12:26",
                              "nodeType": "YulIdentifier",
                              "src": "2542:12:26"
                            },
                            "nativeSrc": "2542:43:26",
                            "nodeType": "YulFunctionCall",
                            "src": "2542:43:26"
                          },
                          "nativeSrc": "2542:43:26",
                          "nodeType": "YulExpressionStatement",
                          "src": "2542:43:26"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "array",
                                        "nativeSrc": "2609:5:26",
                                        "nodeType": "YulIdentifier",
                                        "src": "2609:5:26"
                                      },
                                      {
                                        "name": "length",
                                        "nativeSrc": "2616:6:26",
                                        "nodeType": "YulIdentifier",
                                        "src": "2616:6:26"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "2605:3:26",
                                      "nodeType": "YulIdentifier",
                                      "src": "2605:3:26"
                                    },
                                    "nativeSrc": "2605:18:26",
                                    "nodeType": "YulFunctionCall",
                                    "src": "2605:18:26"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "2625:4:26",
                                    "nodeType": "YulLiteral",
                                    "src": "2625:4:26",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "2601:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "2601:3:26"
                                },
                                "nativeSrc": "2601:29:26",
                                "nodeType": "YulFunctionCall",
                                "src": "2601:29:26"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "2632:1:26",
                                "nodeType": "YulLiteral",
                                "src": "2632:1:26",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "2594:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "2594:6:26"
                            },
                            "nativeSrc": "2594:40:26",
                            "nodeType": "YulFunctionCall",
                            "src": "2594:40:26"
                          },
                          "nativeSrc": "2594:40:26",
                          "nodeType": "YulExpressionStatement",
                          "src": "2594:40:26"
                        }
                      ]
                    },
                    "name": "abi_decode_available_length_string",
                    "nativeSrc": "2233:407:26",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "src",
                        "nativeSrc": "2277:3:26",
                        "nodeType": "YulTypedName",
                        "src": "2277:3:26",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nativeSrc": "2282:6:26",
                        "nodeType": "YulTypedName",
                        "src": "2282:6:26",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nativeSrc": "2290:3:26",
                        "nodeType": "YulTypedName",
                        "src": "2290:3:26",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "array",
                        "nativeSrc": "2298:5:26",
                        "nodeType": "YulTypedName",
                        "src": "2298:5:26",
                        "type": ""
                      }
                    ],
                    "src": "2233:407:26"
                  },
                  {
                    "body": {
                      "nativeSrc": "2698:169:26",
                      "nodeType": "YulBlock",
                      "src": "2698:169:26",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "2747:16:26",
                            "nodeType": "YulBlock",
                            "src": "2747:16:26",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "2756:1:26",
                                      "nodeType": "YulLiteral",
                                      "src": "2756:1:26",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "2759:1:26",
                                      "nodeType": "YulLiteral",
                                      "src": "2759:1:26",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "2749:6:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "2749:6:26"
                                  },
                                  "nativeSrc": "2749:12:26",
                                  "nodeType": "YulFunctionCall",
                                  "src": "2749:12:26"
                                },
                                "nativeSrc": "2749:12:26",
                                "nodeType": "YulExpressionStatement",
                                "src": "2749:12:26"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nativeSrc": "2726:6:26",
                                        "nodeType": "YulIdentifier",
                                        "src": "2726:6:26"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "2734:4:26",
                                        "nodeType": "YulLiteral",
                                        "src": "2734:4:26",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "2722:3:26",
                                      "nodeType": "YulIdentifier",
                                      "src": "2722:3:26"
                                    },
                                    "nativeSrc": "2722:17:26",
                                    "nodeType": "YulFunctionCall",
                                    "src": "2722:17:26"
                                  },
                                  {
                                    "name": "end",
                                    "nativeSrc": "2741:3:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "2741:3:26"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nativeSrc": "2718:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "2718:3:26"
                                },
                                "nativeSrc": "2718:27:26",
                                "nodeType": "YulFunctionCall",
                                "src": "2718:27:26"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nativeSrc": "2711:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "2711:6:26"
                            },
                            "nativeSrc": "2711:35:26",
                            "nodeType": "YulFunctionCall",
                            "src": "2711:35:26"
                          },
                          "nativeSrc": "2708:55:26",
                          "nodeType": "YulIf",
                          "src": "2708:55:26"
                        },
                        {
                          "nativeSrc": "2772:89:26",
                          "nodeType": "YulAssignment",
                          "src": "2772:89:26",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nativeSrc": "2820:6:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "2820:6:26"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "2828:4:26",
                                    "nodeType": "YulLiteral",
                                    "src": "2828:4:26",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "2816:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "2816:3:26"
                                },
                                "nativeSrc": "2816:17:26",
                                "nodeType": "YulFunctionCall",
                                "src": "2816:17:26"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nativeSrc": "2848:6:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "2848:6:26"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nativeSrc": "2835:12:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "2835:12:26"
                                },
                                "nativeSrc": "2835:20:26",
                                "nodeType": "YulFunctionCall",
                                "src": "2835:20:26"
                              },
                              {
                                "name": "end",
                                "nativeSrc": "2857:3:26",
                                "nodeType": "YulIdentifier",
                                "src": "2857:3:26"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_available_length_string",
                              "nativeSrc": "2781:34:26",
                              "nodeType": "YulIdentifier",
                              "src": "2781:34:26"
                            },
                            "nativeSrc": "2781:80:26",
                            "nodeType": "YulFunctionCall",
                            "src": "2781:80:26"
                          },
                          "variableNames": [
                            {
                              "name": "array",
                              "nativeSrc": "2772:5:26",
                              "nodeType": "YulIdentifier",
                              "src": "2772:5:26"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_string",
                    "nativeSrc": "2645:222:26",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nativeSrc": "2672:6:26",
                        "nodeType": "YulTypedName",
                        "src": "2672:6:26",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nativeSrc": "2680:3:26",
                        "nodeType": "YulTypedName",
                        "src": "2680:3:26",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "array",
                        "nativeSrc": "2688:5:26",
                        "nodeType": "YulTypedName",
                        "src": "2688:5:26",
                        "type": ""
                      }
                    ],
                    "src": "2645:222:26"
                  },
                  {
                    "body": {
                      "nativeSrc": "2953:1407:26",
                      "nodeType": "YulBlock",
                      "src": "2953:1407:26",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "3002:16:26",
                            "nodeType": "YulBlock",
                            "src": "3002:16:26",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "3011:1:26",
                                      "nodeType": "YulLiteral",
                                      "src": "3011:1:26",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "3014:1:26",
                                      "nodeType": "YulLiteral",
                                      "src": "3014:1:26",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "3004:6:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "3004:6:26"
                                  },
                                  "nativeSrc": "3004:12:26",
                                  "nodeType": "YulFunctionCall",
                                  "src": "3004:12:26"
                                },
                                "nativeSrc": "3004:12:26",
                                "nodeType": "YulExpressionStatement",
                                "src": "3004:12:26"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nativeSrc": "2981:6:26",
                                        "nodeType": "YulIdentifier",
                                        "src": "2981:6:26"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "2989:4:26",
                                        "nodeType": "YulLiteral",
                                        "src": "2989:4:26",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "2977:3:26",
                                      "nodeType": "YulIdentifier",
                                      "src": "2977:3:26"
                                    },
                                    "nativeSrc": "2977:17:26",
                                    "nodeType": "YulFunctionCall",
                                    "src": "2977:17:26"
                                  },
                                  {
                                    "name": "end",
                                    "nativeSrc": "2996:3:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "2996:3:26"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nativeSrc": "2973:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "2973:3:26"
                                },
                                "nativeSrc": "2973:27:26",
                                "nodeType": "YulFunctionCall",
                                "src": "2973:27:26"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nativeSrc": "2966:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "2966:6:26"
                            },
                            "nativeSrc": "2966:35:26",
                            "nodeType": "YulFunctionCall",
                            "src": "2966:35:26"
                          },
                          "nativeSrc": "2963:55:26",
                          "nodeType": "YulIf",
                          "src": "2963:55:26"
                        },
                        {
                          "nativeSrc": "3027:30:26",
                          "nodeType": "YulVariableDeclaration",
                          "src": "3027:30:26",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nativeSrc": "3050:6:26",
                                "nodeType": "YulIdentifier",
                                "src": "3050:6:26"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nativeSrc": "3037:12:26",
                              "nodeType": "YulIdentifier",
                              "src": "3037:12:26"
                            },
                            "nativeSrc": "3037:20:26",
                            "nodeType": "YulFunctionCall",
                            "src": "3037:20:26"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nativeSrc": "3031:2:26",
                              "nodeType": "YulTypedName",
                              "src": "3031:2:26",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nativeSrc": "3066:14:26",
                          "nodeType": "YulVariableDeclaration",
                          "src": "3066:14:26",
                          "value": {
                            "kind": "number",
                            "nativeSrc": "3076:4:26",
                            "nodeType": "YulLiteral",
                            "src": "3076:4:26",
                            "type": "",
                            "value": "0x20"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nativeSrc": "3070:2:26",
                              "nodeType": "YulTypedName",
                              "src": "3070:2:26",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nativeSrc": "3089:28:26",
                          "nodeType": "YulVariableDeclaration",
                          "src": "3089:28:26",
                          "value": {
                            "kind": "number",
                            "nativeSrc": "3099:18:26",
                            "nodeType": "YulLiteral",
                            "src": "3099:18:26",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_3",
                              "nativeSrc": "3093:2:26",
                              "nodeType": "YulTypedName",
                              "src": "3093:2:26",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "3140:22:26",
                            "nodeType": "YulBlock",
                            "src": "3140:22:26",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nativeSrc": "3142:16:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "3142:16:26"
                                  },
                                  "nativeSrc": "3142:18:26",
                                  "nodeType": "YulFunctionCall",
                                  "src": "3142:18:26"
                                },
                                "nativeSrc": "3142:18:26",
                                "nodeType": "YulExpressionStatement",
                                "src": "3142:18:26"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "_1",
                                "nativeSrc": "3132:2:26",
                                "nodeType": "YulIdentifier",
                                "src": "3132:2:26"
                              },
                              {
                                "name": "_3",
                                "nativeSrc": "3136:2:26",
                                "nodeType": "YulIdentifier",
                                "src": "3136:2:26"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nativeSrc": "3129:2:26",
                              "nodeType": "YulIdentifier",
                              "src": "3129:2:26"
                            },
                            "nativeSrc": "3129:10:26",
                            "nodeType": "YulFunctionCall",
                            "src": "3129:10:26"
                          },
                          "nativeSrc": "3126:36:26",
                          "nodeType": "YulIf",
                          "src": "3126:36:26"
                        },
                        {
                          "nativeSrc": "3171:20:26",
                          "nodeType": "YulVariableDeclaration",
                          "src": "3171:20:26",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "3185:1:26",
                                "nodeType": "YulLiteral",
                                "src": "3185:1:26",
                                "type": "",
                                "value": "5"
                              },
                              {
                                "name": "_1",
                                "nativeSrc": "3188:2:26",
                                "nodeType": "YulIdentifier",
                                "src": "3188:2:26"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nativeSrc": "3181:3:26",
                              "nodeType": "YulIdentifier",
                              "src": "3181:3:26"
                            },
                            "nativeSrc": "3181:10:26",
                            "nodeType": "YulFunctionCall",
                            "src": "3181:10:26"
                          },
                          "variables": [
                            {
                              "name": "_4",
                              "nativeSrc": "3175:2:26",
                              "nodeType": "YulTypedName",
                              "src": "3175:2:26",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nativeSrc": "3200:39:26",
                          "nodeType": "YulVariableDeclaration",
                          "src": "3200:39:26",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_4",
                                    "nativeSrc": "3231:2:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "3231:2:26"
                                  },
                                  {
                                    "name": "_2",
                                    "nativeSrc": "3235:2:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "3235:2:26"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "3227:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "3227:3:26"
                                },
                                "nativeSrc": "3227:11:26",
                                "nodeType": "YulFunctionCall",
                                "src": "3227:11:26"
                              }
                            ],
                            "functionName": {
                              "name": "allocate_memory",
                              "nativeSrc": "3211:15:26",
                              "nodeType": "YulIdentifier",
                              "src": "3211:15:26"
                            },
                            "nativeSrc": "3211:28:26",
                            "nodeType": "YulFunctionCall",
                            "src": "3211:28:26"
                          },
                          "variables": [
                            {
                              "name": "dst",
                              "nativeSrc": "3204:3:26",
                              "nodeType": "YulTypedName",
                              "src": "3204:3:26",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nativeSrc": "3248:16:26",
                          "nodeType": "YulVariableDeclaration",
                          "src": "3248:16:26",
                          "value": {
                            "name": "dst",
                            "nativeSrc": "3261:3:26",
                            "nodeType": "YulIdentifier",
                            "src": "3261:3:26"
                          },
                          "variables": [
                            {
                              "name": "dst_1",
                              "nativeSrc": "3252:5:26",
                              "nodeType": "YulTypedName",
                              "src": "3252:5:26",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "dst",
                                "nativeSrc": "3280:3:26",
                                "nodeType": "YulIdentifier",
                                "src": "3280:3:26"
                              },
                              {
                                "name": "_1",
                                "nativeSrc": "3285:2:26",
                                "nodeType": "YulIdentifier",
                                "src": "3285:2:26"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "3273:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "3273:6:26"
                            },
                            "nativeSrc": "3273:15:26",
                            "nodeType": "YulFunctionCall",
                            "src": "3273:15:26"
                          },
                          "nativeSrc": "3273:15:26",
                          "nodeType": "YulExpressionStatement",
                          "src": "3273:15:26"
                        },
                        {
                          "nativeSrc": "3297:19:26",
                          "nodeType": "YulAssignment",
                          "src": "3297:19:26",
                          "value": {
                            "arguments": [
                              {
                                "name": "dst",
                                "nativeSrc": "3308:3:26",
                                "nodeType": "YulIdentifier",
                                "src": "3308:3:26"
                              },
                              {
                                "name": "_2",
                                "nativeSrc": "3313:2:26",
                                "nodeType": "YulIdentifier",
                                "src": "3313:2:26"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "3304:3:26",
                              "nodeType": "YulIdentifier",
                              "src": "3304:3:26"
                            },
                            "nativeSrc": "3304:12:26",
                            "nodeType": "YulFunctionCall",
                            "src": "3304:12:26"
                          },
                          "variableNames": [
                            {
                              "name": "dst",
                              "nativeSrc": "3297:3:26",
                              "nodeType": "YulIdentifier",
                              "src": "3297:3:26"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "3325:38:26",
                          "nodeType": "YulVariableDeclaration",
                          "src": "3325:38:26",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nativeSrc": "3347:6:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "3347:6:26"
                                  },
                                  {
                                    "name": "_4",
                                    "nativeSrc": "3355:2:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "3355:2:26"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "3343:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "3343:3:26"
                                },
                                "nativeSrc": "3343:15:26",
                                "nodeType": "YulFunctionCall",
                                "src": "3343:15:26"
                              },
                              {
                                "name": "_2",
                                "nativeSrc": "3360:2:26",
                                "nodeType": "YulIdentifier",
                                "src": "3360:2:26"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "3339:3:26",
                              "nodeType": "YulIdentifier",
                              "src": "3339:3:26"
                            },
                            "nativeSrc": "3339:24:26",
                            "nodeType": "YulFunctionCall",
                            "src": "3339:24:26"
                          },
                          "variables": [
                            {
                              "name": "srcEnd",
                              "nativeSrc": "3329:6:26",
                              "nodeType": "YulTypedName",
                              "src": "3329:6:26",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "3391:16:26",
                            "nodeType": "YulBlock",
                            "src": "3391:16:26",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "3400:1:26",
                                      "nodeType": "YulLiteral",
                                      "src": "3400:1:26",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "3403:1:26",
                                      "nodeType": "YulLiteral",
                                      "src": "3403:1:26",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "3393:6:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "3393:6:26"
                                  },
                                  "nativeSrc": "3393:12:26",
                                  "nodeType": "YulFunctionCall",
                                  "src": "3393:12:26"
                                },
                                "nativeSrc": "3393:12:26",
                                "nodeType": "YulExpressionStatement",
                                "src": "3393:12:26"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "srcEnd",
                                "nativeSrc": "3378:6:26",
                                "nodeType": "YulIdentifier",
                                "src": "3378:6:26"
                              },
                              {
                                "name": "end",
                                "nativeSrc": "3386:3:26",
                                "nodeType": "YulIdentifier",
                                "src": "3386:3:26"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nativeSrc": "3375:2:26",
                              "nodeType": "YulIdentifier",
                              "src": "3375:2:26"
                            },
                            "nativeSrc": "3375:15:26",
                            "nodeType": "YulFunctionCall",
                            "src": "3375:15:26"
                          },
                          "nativeSrc": "3372:35:26",
                          "nodeType": "YulIf",
                          "src": "3372:35:26"
                        },
                        {
                          "nativeSrc": "3416:26:26",
                          "nodeType": "YulVariableDeclaration",
                          "src": "3416:26:26",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nativeSrc": "3431:6:26",
                                "nodeType": "YulIdentifier",
                                "src": "3431:6:26"
                              },
                              {
                                "name": "_2",
                                "nativeSrc": "3439:2:26",
                                "nodeType": "YulIdentifier",
                                "src": "3439:2:26"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "3427:3:26",
                              "nodeType": "YulIdentifier",
                              "src": "3427:3:26"
                            },
                            "nativeSrc": "3427:15:26",
                            "nodeType": "YulFunctionCall",
                            "src": "3427:15:26"
                          },
                          "variables": [
                            {
                              "name": "src",
                              "nativeSrc": "3420:3:26",
                              "nodeType": "YulTypedName",
                              "src": "3420:3:26",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "3507:824:26",
                            "nodeType": "YulBlock",
                            "src": "3507:824:26",
                            "statements": [
                              {
                                "nativeSrc": "3521:36:26",
                                "nodeType": "YulVariableDeclaration",
                                "src": "3521:36:26",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "src",
                                      "nativeSrc": "3553:3:26",
                                      "nodeType": "YulIdentifier",
                                      "src": "3553:3:26"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "calldataload",
                                    "nativeSrc": "3540:12:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "3540:12:26"
                                  },
                                  "nativeSrc": "3540:17:26",
                                  "nodeType": "YulFunctionCall",
                                  "src": "3540:17:26"
                                },
                                "variables": [
                                  {
                                    "name": "innerOffset",
                                    "nativeSrc": "3525:11:26",
                                    "nodeType": "YulTypedName",
                                    "src": "3525:11:26",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "body": {
                                  "nativeSrc": "3605:74:26",
                                  "nodeType": "YulBlock",
                                  "src": "3605:74:26",
                                  "statements": [
                                    {
                                      "nativeSrc": "3623:11:26",
                                      "nodeType": "YulVariableDeclaration",
                                      "src": "3623:11:26",
                                      "value": {
                                        "kind": "number",
                                        "nativeSrc": "3633:1:26",
                                        "nodeType": "YulLiteral",
                                        "src": "3633:1:26",
                                        "type": "",
                                        "value": "0"
                                      },
                                      "variables": [
                                        {
                                          "name": "_5",
                                          "nativeSrc": "3627:2:26",
                                          "nodeType": "YulTypedName",
                                          "src": "3627:2:26",
                                          "type": ""
                                        }
                                      ]
                                    },
                                    {
                                      "expression": {
                                        "arguments": [
                                          {
                                            "name": "_5",
                                            "nativeSrc": "3658:2:26",
                                            "nodeType": "YulIdentifier",
                                            "src": "3658:2:26"
                                          },
                                          {
                                            "name": "_5",
                                            "nativeSrc": "3662:2:26",
                                            "nodeType": "YulIdentifier",
                                            "src": "3662:2:26"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "revert",
                                          "nativeSrc": "3651:6:26",
                                          "nodeType": "YulIdentifier",
                                          "src": "3651:6:26"
                                        },
                                        "nativeSrc": "3651:14:26",
                                        "nodeType": "YulFunctionCall",
                                        "src": "3651:14:26"
                                      },
                                      "nativeSrc": "3651:14:26",
                                      "nodeType": "YulExpressionStatement",
                                      "src": "3651:14:26"
                                    }
                                  ]
                                },
                                "condition": {
                                  "arguments": [
                                    {
                                      "name": "innerOffset",
                                      "nativeSrc": "3576:11:26",
                                      "nodeType": "YulIdentifier",
                                      "src": "3576:11:26"
                                    },
                                    {
                                      "name": "_3",
                                      "nativeSrc": "3589:2:26",
                                      "nodeType": "YulIdentifier",
                                      "src": "3589:2:26"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "gt",
                                    "nativeSrc": "3573:2:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "3573:2:26"
                                  },
                                  "nativeSrc": "3573:19:26",
                                  "nodeType": "YulFunctionCall",
                                  "src": "3573:19:26"
                                },
                                "nativeSrc": "3570:109:26",
                                "nodeType": "YulIf",
                                "src": "3570:109:26"
                              },
                              {
                                "nativeSrc": "3692:34:26",
                                "nodeType": "YulVariableDeclaration",
                                "src": "3692:34:26",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "offset",
                                      "nativeSrc": "3706:6:26",
                                      "nodeType": "YulIdentifier",
                                      "src": "3706:6:26"
                                    },
                                    {
                                      "name": "innerOffset",
                                      "nativeSrc": "3714:11:26",
                                      "nodeType": "YulIdentifier",
                                      "src": "3714:11:26"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "3702:3:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "3702:3:26"
                                  },
                                  "nativeSrc": "3702:24:26",
                                  "nodeType": "YulFunctionCall",
                                  "src": "3702:24:26"
                                },
                                "variables": [
                                  {
                                    "name": "_6",
                                    "nativeSrc": "3696:2:26",
                                    "nodeType": "YulTypedName",
                                    "src": "3696:2:26",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "nativeSrc": "3739:14:26",
                                "nodeType": "YulVariableDeclaration",
                                "src": "3739:14:26",
                                "value": {
                                  "kind": "number",
                                  "nativeSrc": "3749:4:26",
                                  "nodeType": "YulLiteral",
                                  "src": "3749:4:26",
                                  "type": "",
                                  "value": "0x40"
                                },
                                "variables": [
                                  {
                                    "name": "_7",
                                    "nativeSrc": "3743:2:26",
                                    "nodeType": "YulTypedName",
                                    "src": "3743:2:26",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "body": {
                                  "nativeSrc": "3817:74:26",
                                  "nodeType": "YulBlock",
                                  "src": "3817:74:26",
                                  "statements": [
                                    {
                                      "nativeSrc": "3835:11:26",
                                      "nodeType": "YulVariableDeclaration",
                                      "src": "3835:11:26",
                                      "value": {
                                        "kind": "number",
                                        "nativeSrc": "3845:1:26",
                                        "nodeType": "YulLiteral",
                                        "src": "3845:1:26",
                                        "type": "",
                                        "value": "0"
                                      },
                                      "variables": [
                                        {
                                          "name": "_8",
                                          "nativeSrc": "3839:2:26",
                                          "nodeType": "YulTypedName",
                                          "src": "3839:2:26",
                                          "type": ""
                                        }
                                      ]
                                    },
                                    {
                                      "expression": {
                                        "arguments": [
                                          {
                                            "name": "_8",
                                            "nativeSrc": "3870:2:26",
                                            "nodeType": "YulIdentifier",
                                            "src": "3870:2:26"
                                          },
                                          {
                                            "name": "_8",
                                            "nativeSrc": "3874:2:26",
                                            "nodeType": "YulIdentifier",
                                            "src": "3874:2:26"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "revert",
                                          "nativeSrc": "3863:6:26",
                                          "nodeType": "YulIdentifier",
                                          "src": "3863:6:26"
                                        },
                                        "nativeSrc": "3863:14:26",
                                        "nodeType": "YulFunctionCall",
                                        "src": "3863:14:26"
                                      },
                                      "nativeSrc": "3863:14:26",
                                      "nodeType": "YulExpressionStatement",
                                      "src": "3863:14:26"
                                    }
                                  ]
                                },
                                "condition": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "end",
                                              "nativeSrc": "3781:3:26",
                                              "nodeType": "YulIdentifier",
                                              "src": "3781:3:26"
                                            },
                                            {
                                              "name": "_6",
                                              "nativeSrc": "3786:2:26",
                                              "nodeType": "YulIdentifier",
                                              "src": "3786:2:26"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "sub",
                                            "nativeSrc": "3777:3:26",
                                            "nodeType": "YulIdentifier",
                                            "src": "3777:3:26"
                                          },
                                          "nativeSrc": "3777:12:26",
                                          "nodeType": "YulFunctionCall",
                                          "src": "3777:12:26"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nativeSrc": "3795:2:26",
                                              "nodeType": "YulLiteral",
                                              "src": "3795:2:26",
                                              "type": "",
                                              "value": "31"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "not",
                                            "nativeSrc": "3791:3:26",
                                            "nodeType": "YulIdentifier",
                                            "src": "3791:3:26"
                                          },
                                          "nativeSrc": "3791:7:26",
                                          "nodeType": "YulFunctionCall",
                                          "src": "3791:7:26"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nativeSrc": "3773:3:26",
                                        "nodeType": "YulIdentifier",
                                        "src": "3773:3:26"
                                      },
                                      "nativeSrc": "3773:26:26",
                                      "nodeType": "YulFunctionCall",
                                      "src": "3773:26:26"
                                    },
                                    {
                                      "name": "_7",
                                      "nativeSrc": "3801:2:26",
                                      "nodeType": "YulIdentifier",
                                      "src": "3801:2:26"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "slt",
                                    "nativeSrc": "3769:3:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "3769:3:26"
                                  },
                                  "nativeSrc": "3769:35:26",
                                  "nodeType": "YulFunctionCall",
                                  "src": "3769:35:26"
                                },
                                "nativeSrc": "3766:125:26",
                                "nodeType": "YulIf",
                                "src": "3766:125:26"
                              },
                              {
                                "nativeSrc": "3904:35:26",
                                "nodeType": "YulVariableDeclaration",
                                "src": "3904:35:26",
                                "value": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "allocate_memory_1948",
                                    "nativeSrc": "3917:20:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "3917:20:26"
                                  },
                                  "nativeSrc": "3917:22:26",
                                  "nodeType": "YulFunctionCall",
                                  "src": "3917:22:26"
                                },
                                "variables": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "3908:5:26",
                                    "nodeType": "YulTypedName",
                                    "src": "3908:5:26",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value",
                                      "nativeSrc": "3959:5:26",
                                      "nodeType": "YulIdentifier",
                                      "src": "3959:5:26"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "_6",
                                              "nativeSrc": "3989:2:26",
                                              "nodeType": "YulIdentifier",
                                              "src": "3989:2:26"
                                            },
                                            {
                                              "name": "_2",
                                              "nativeSrc": "3993:2:26",
                                              "nodeType": "YulIdentifier",
                                              "src": "3993:2:26"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nativeSrc": "3985:3:26",
                                            "nodeType": "YulIdentifier",
                                            "src": "3985:3:26"
                                          },
                                          "nativeSrc": "3985:11:26",
                                          "nodeType": "YulFunctionCall",
                                          "src": "3985:11:26"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "abi_decode_address",
                                        "nativeSrc": "3966:18:26",
                                        "nodeType": "YulIdentifier",
                                        "src": "3966:18:26"
                                      },
                                      "nativeSrc": "3966:31:26",
                                      "nodeType": "YulFunctionCall",
                                      "src": "3966:31:26"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nativeSrc": "3952:6:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "3952:6:26"
                                  },
                                  "nativeSrc": "3952:46:26",
                                  "nodeType": "YulFunctionCall",
                                  "src": "3952:46:26"
                                },
                                "nativeSrc": "3952:46:26",
                                "nodeType": "YulExpressionStatement",
                                "src": "3952:46:26"
                              },
                              {
                                "nativeSrc": "4011:41:26",
                                "nodeType": "YulVariableDeclaration",
                                "src": "4011:41:26",
                                "value": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "_6",
                                          "nativeSrc": "4044:2:26",
                                          "nodeType": "YulIdentifier",
                                          "src": "4044:2:26"
                                        },
                                        {
                                          "name": "_7",
                                          "nativeSrc": "4048:2:26",
                                          "nodeType": "YulIdentifier",
                                          "src": "4048:2:26"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nativeSrc": "4040:3:26",
                                        "nodeType": "YulIdentifier",
                                        "src": "4040:3:26"
                                      },
                                      "nativeSrc": "4040:11:26",
                                      "nodeType": "YulFunctionCall",
                                      "src": "4040:11:26"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "calldataload",
                                    "nativeSrc": "4027:12:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "4027:12:26"
                                  },
                                  "nativeSrc": "4027:25:26",
                                  "nodeType": "YulFunctionCall",
                                  "src": "4027:25:26"
                                },
                                "variables": [
                                  {
                                    "name": "offset_1",
                                    "nativeSrc": "4015:8:26",
                                    "nodeType": "YulTypedName",
                                    "src": "4015:8:26",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "body": {
                                  "nativeSrc": "4097:74:26",
                                  "nodeType": "YulBlock",
                                  "src": "4097:74:26",
                                  "statements": [
                                    {
                                      "nativeSrc": "4115:11:26",
                                      "nodeType": "YulVariableDeclaration",
                                      "src": "4115:11:26",
                                      "value": {
                                        "kind": "number",
                                        "nativeSrc": "4125:1:26",
                                        "nodeType": "YulLiteral",
                                        "src": "4125:1:26",
                                        "type": "",
                                        "value": "0"
                                      },
                                      "variables": [
                                        {
                                          "name": "_9",
                                          "nativeSrc": "4119:2:26",
                                          "nodeType": "YulTypedName",
                                          "src": "4119:2:26",
                                          "type": ""
                                        }
                                      ]
                                    },
                                    {
                                      "expression": {
                                        "arguments": [
                                          {
                                            "name": "_9",
                                            "nativeSrc": "4150:2:26",
                                            "nodeType": "YulIdentifier",
                                            "src": "4150:2:26"
                                          },
                                          {
                                            "name": "_9",
                                            "nativeSrc": "4154:2:26",
                                            "nodeType": "YulIdentifier",
                                            "src": "4154:2:26"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "revert",
                                          "nativeSrc": "4143:6:26",
                                          "nodeType": "YulIdentifier",
                                          "src": "4143:6:26"
                                        },
                                        "nativeSrc": "4143:14:26",
                                        "nodeType": "YulFunctionCall",
                                        "src": "4143:14:26"
                                      },
                                      "nativeSrc": "4143:14:26",
                                      "nodeType": "YulExpressionStatement",
                                      "src": "4143:14:26"
                                    }
                                  ]
                                },
                                "condition": {
                                  "arguments": [
                                    {
                                      "name": "offset_1",
                                      "nativeSrc": "4071:8:26",
                                      "nodeType": "YulIdentifier",
                                      "src": "4071:8:26"
                                    },
                                    {
                                      "name": "_3",
                                      "nativeSrc": "4081:2:26",
                                      "nodeType": "YulIdentifier",
                                      "src": "4081:2:26"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "gt",
                                    "nativeSrc": "4068:2:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "4068:2:26"
                                  },
                                  "nativeSrc": "4068:16:26",
                                  "nodeType": "YulFunctionCall",
                                  "src": "4068:16:26"
                                },
                                "nativeSrc": "4065:106:26",
                                "nodeType": "YulIf",
                                "src": "4065:106:26"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "value",
                                          "nativeSrc": "4195:5:26",
                                          "nodeType": "YulIdentifier",
                                          "src": "4195:5:26"
                                        },
                                        {
                                          "name": "_2",
                                          "nativeSrc": "4202:2:26",
                                          "nodeType": "YulIdentifier",
                                          "src": "4202:2:26"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nativeSrc": "4191:3:26",
                                        "nodeType": "YulIdentifier",
                                        "src": "4191:3:26"
                                      },
                                      "nativeSrc": "4191:14:26",
                                      "nodeType": "YulFunctionCall",
                                      "src": "4191:14:26"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "name": "_6",
                                                  "nativeSrc": "4233:2:26",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "4233:2:26"
                                                },
                                                {
                                                  "name": "offset_1",
                                                  "nativeSrc": "4237:8:26",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "4237:8:26"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "add",
                                                "nativeSrc": "4229:3:26",
                                                "nodeType": "YulIdentifier",
                                                "src": "4229:3:26"
                                              },
                                              "nativeSrc": "4229:17:26",
                                              "nodeType": "YulFunctionCall",
                                              "src": "4229:17:26"
                                            },
                                            {
                                              "name": "_2",
                                              "nativeSrc": "4248:2:26",
                                              "nodeType": "YulIdentifier",
                                              "src": "4248:2:26"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nativeSrc": "4225:3:26",
                                            "nodeType": "YulIdentifier",
                                            "src": "4225:3:26"
                                          },
                                          "nativeSrc": "4225:26:26",
                                          "nodeType": "YulFunctionCall",
                                          "src": "4225:26:26"
                                        },
                                        {
                                          "name": "end",
                                          "nativeSrc": "4253:3:26",
                                          "nodeType": "YulIdentifier",
                                          "src": "4253:3:26"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "abi_decode_string",
                                        "nativeSrc": "4207:17:26",
                                        "nodeType": "YulIdentifier",
                                        "src": "4207:17:26"
                                      },
                                      "nativeSrc": "4207:50:26",
                                      "nodeType": "YulFunctionCall",
                                      "src": "4207:50:26"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nativeSrc": "4184:6:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "4184:6:26"
                                  },
                                  "nativeSrc": "4184:74:26",
                                  "nodeType": "YulFunctionCall",
                                  "src": "4184:74:26"
                                },
                                "nativeSrc": "4184:74:26",
                                "nodeType": "YulExpressionStatement",
                                "src": "4184:74:26"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nativeSrc": "4278:3:26",
                                      "nodeType": "YulIdentifier",
                                      "src": "4278:3:26"
                                    },
                                    {
                                      "name": "value",
                                      "nativeSrc": "4283:5:26",
                                      "nodeType": "YulIdentifier",
                                      "src": "4283:5:26"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nativeSrc": "4271:6:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "4271:6:26"
                                  },
                                  "nativeSrc": "4271:18:26",
                                  "nodeType": "YulFunctionCall",
                                  "src": "4271:18:26"
                                },
                                "nativeSrc": "4271:18:26",
                                "nodeType": "YulExpressionStatement",
                                "src": "4271:18:26"
                              },
                              {
                                "nativeSrc": "4302:19:26",
                                "nodeType": "YulAssignment",
                                "src": "4302:19:26",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nativeSrc": "4313:3:26",
                                      "nodeType": "YulIdentifier",
                                      "src": "4313:3:26"
                                    },
                                    {
                                      "name": "_2",
                                      "nativeSrc": "4318:2:26",
                                      "nodeType": "YulIdentifier",
                                      "src": "4318:2:26"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "4309:3:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "4309:3:26"
                                  },
                                  "nativeSrc": "4309:12:26",
                                  "nodeType": "YulFunctionCall",
                                  "src": "4309:12:26"
                                },
                                "variableNames": [
                                  {
                                    "name": "dst",
                                    "nativeSrc": "4302:3:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "4302:3:26"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "src",
                                "nativeSrc": "3462:3:26",
                                "nodeType": "YulIdentifier",
                                "src": "3462:3:26"
                              },
                              {
                                "name": "srcEnd",
                                "nativeSrc": "3467:6:26",
                                "nodeType": "YulIdentifier",
                                "src": "3467:6:26"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nativeSrc": "3459:2:26",
                              "nodeType": "YulIdentifier",
                              "src": "3459:2:26"
                            },
                            "nativeSrc": "3459:15:26",
                            "nodeType": "YulFunctionCall",
                            "src": "3459:15:26"
                          },
                          "nativeSrc": "3451:880:26",
                          "nodeType": "YulForLoop",
                          "post": {
                            "nativeSrc": "3475:23:26",
                            "nodeType": "YulBlock",
                            "src": "3475:23:26",
                            "statements": [
                              {
                                "nativeSrc": "3477:19:26",
                                "nodeType": "YulAssignment",
                                "src": "3477:19:26",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "src",
                                      "nativeSrc": "3488:3:26",
                                      "nodeType": "YulIdentifier",
                                      "src": "3488:3:26"
                                    },
                                    {
                                      "name": "_2",
                                      "nativeSrc": "3493:2:26",
                                      "nodeType": "YulIdentifier",
                                      "src": "3493:2:26"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "3484:3:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "3484:3:26"
                                  },
                                  "nativeSrc": "3484:12:26",
                                  "nodeType": "YulFunctionCall",
                                  "src": "3484:12:26"
                                },
                                "variableNames": [
                                  {
                                    "name": "src",
                                    "nativeSrc": "3477:3:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "3477:3:26"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nativeSrc": "3455:3:26",
                            "nodeType": "YulBlock",
                            "src": "3455:3:26",
                            "statements": []
                          },
                          "src": "3451:880:26"
                        },
                        {
                          "nativeSrc": "4340:14:26",
                          "nodeType": "YulAssignment",
                          "src": "4340:14:26",
                          "value": {
                            "name": "dst_1",
                            "nativeSrc": "4349:5:26",
                            "nodeType": "YulIdentifier",
                            "src": "4349:5:26"
                          },
                          "variableNames": [
                            {
                              "name": "array",
                              "nativeSrc": "4340:5:26",
                              "nodeType": "YulIdentifier",
                              "src": "4340:5:26"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_array_struct_FilePermissions_dyn",
                    "nativeSrc": "2872:1488:26",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nativeSrc": "2927:6:26",
                        "nodeType": "YulTypedName",
                        "src": "2927:6:26",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nativeSrc": "2935:3:26",
                        "nodeType": "YulTypedName",
                        "src": "2935:3:26",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "array",
                        "nativeSrc": "2943:5:26",
                        "nodeType": "YulTypedName",
                        "src": "2943:5:26",
                        "type": ""
                      }
                    ],
                    "src": "2872:1488:26"
                  },
                  {
                    "body": {
                      "nativeSrc": "4522:464:26",
                      "nodeType": "YulBlock",
                      "src": "4522:464:26",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "4568:16:26",
                            "nodeType": "YulBlock",
                            "src": "4568:16:26",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "4577:1:26",
                                      "nodeType": "YulLiteral",
                                      "src": "4577:1:26",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "4580:1:26",
                                      "nodeType": "YulLiteral",
                                      "src": "4580:1:26",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "4570:6:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "4570:6:26"
                                  },
                                  "nativeSrc": "4570:12:26",
                                  "nodeType": "YulFunctionCall",
                                  "src": "4570:12:26"
                                },
                                "nativeSrc": "4570:12:26",
                                "nodeType": "YulExpressionStatement",
                                "src": "4570:12:26"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "4543:7:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "4543:7:26"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "4552:9:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "4552:9:26"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "4539:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "4539:3:26"
                                },
                                "nativeSrc": "4539:23:26",
                                "nodeType": "YulFunctionCall",
                                "src": "4539:23:26"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "4564:2:26",
                                "nodeType": "YulLiteral",
                                "src": "4564:2:26",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nativeSrc": "4535:3:26",
                              "nodeType": "YulIdentifier",
                              "src": "4535:3:26"
                            },
                            "nativeSrc": "4535:32:26",
                            "nodeType": "YulFunctionCall",
                            "src": "4535:32:26"
                          },
                          "nativeSrc": "4532:52:26",
                          "nodeType": "YulIf",
                          "src": "4532:52:26"
                        },
                        {
                          "nativeSrc": "4593:37:26",
                          "nodeType": "YulVariableDeclaration",
                          "src": "4593:37:26",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "4620:9:26",
                                "nodeType": "YulIdentifier",
                                "src": "4620:9:26"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nativeSrc": "4607:12:26",
                              "nodeType": "YulIdentifier",
                              "src": "4607:12:26"
                            },
                            "nativeSrc": "4607:23:26",
                            "nodeType": "YulFunctionCall",
                            "src": "4607:23:26"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nativeSrc": "4597:6:26",
                              "nodeType": "YulTypedName",
                              "src": "4597:6:26",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nativeSrc": "4639:28:26",
                          "nodeType": "YulVariableDeclaration",
                          "src": "4639:28:26",
                          "value": {
                            "kind": "number",
                            "nativeSrc": "4649:18:26",
                            "nodeType": "YulLiteral",
                            "src": "4649:18:26",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nativeSrc": "4643:2:26",
                              "nodeType": "YulTypedName",
                              "src": "4643:2:26",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "4694:16:26",
                            "nodeType": "YulBlock",
                            "src": "4694:16:26",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "4703:1:26",
                                      "nodeType": "YulLiteral",
                                      "src": "4703:1:26",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "4706:1:26",
                                      "nodeType": "YulLiteral",
                                      "src": "4706:1:26",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "4696:6:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "4696:6:26"
                                  },
                                  "nativeSrc": "4696:12:26",
                                  "nodeType": "YulFunctionCall",
                                  "src": "4696:12:26"
                                },
                                "nativeSrc": "4696:12:26",
                                "nodeType": "YulExpressionStatement",
                                "src": "4696:12:26"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nativeSrc": "4682:6:26",
                                "nodeType": "YulIdentifier",
                                "src": "4682:6:26"
                              },
                              {
                                "name": "_1",
                                "nativeSrc": "4690:2:26",
                                "nodeType": "YulIdentifier",
                                "src": "4690:2:26"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nativeSrc": "4679:2:26",
                              "nodeType": "YulIdentifier",
                              "src": "4679:2:26"
                            },
                            "nativeSrc": "4679:14:26",
                            "nodeType": "YulFunctionCall",
                            "src": "4679:14:26"
                          },
                          "nativeSrc": "4676:34:26",
                          "nodeType": "YulIf",
                          "src": "4676:34:26"
                        },
                        {
                          "nativeSrc": "4719:60:26",
                          "nodeType": "YulAssignment",
                          "src": "4719:60:26",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "4751:9:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "4751:9:26"
                                  },
                                  {
                                    "name": "offset",
                                    "nativeSrc": "4762:6:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "4762:6:26"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "4747:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "4747:3:26"
                                },
                                "nativeSrc": "4747:22:26",
                                "nodeType": "YulFunctionCall",
                                "src": "4747:22:26"
                              },
                              {
                                "name": "dataEnd",
                                "nativeSrc": "4771:7:26",
                                "nodeType": "YulIdentifier",
                                "src": "4771:7:26"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_string",
                              "nativeSrc": "4729:17:26",
                              "nodeType": "YulIdentifier",
                              "src": "4729:17:26"
                            },
                            "nativeSrc": "4729:50:26",
                            "nodeType": "YulFunctionCall",
                            "src": "4729:50:26"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nativeSrc": "4719:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "4719:6:26"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "4788:48:26",
                          "nodeType": "YulVariableDeclaration",
                          "src": "4788:48:26",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "4821:9:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "4821:9:26"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "4832:2:26",
                                    "nodeType": "YulLiteral",
                                    "src": "4832:2:26",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "4817:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "4817:3:26"
                                },
                                "nativeSrc": "4817:18:26",
                                "nodeType": "YulFunctionCall",
                                "src": "4817:18:26"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nativeSrc": "4804:12:26",
                              "nodeType": "YulIdentifier",
                              "src": "4804:12:26"
                            },
                            "nativeSrc": "4804:32:26",
                            "nodeType": "YulFunctionCall",
                            "src": "4804:32:26"
                          },
                          "variables": [
                            {
                              "name": "offset_1",
                              "nativeSrc": "4792:8:26",
                              "nodeType": "YulTypedName",
                              "src": "4792:8:26",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "4865:16:26",
                            "nodeType": "YulBlock",
                            "src": "4865:16:26",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "4874:1:26",
                                      "nodeType": "YulLiteral",
                                      "src": "4874:1:26",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "4877:1:26",
                                      "nodeType": "YulLiteral",
                                      "src": "4877:1:26",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "4867:6:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "4867:6:26"
                                  },
                                  "nativeSrc": "4867:12:26",
                                  "nodeType": "YulFunctionCall",
                                  "src": "4867:12:26"
                                },
                                "nativeSrc": "4867:12:26",
                                "nodeType": "YulExpressionStatement",
                                "src": "4867:12:26"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_1",
                                "nativeSrc": "4851:8:26",
                                "nodeType": "YulIdentifier",
                                "src": "4851:8:26"
                              },
                              {
                                "name": "_1",
                                "nativeSrc": "4861:2:26",
                                "nodeType": "YulIdentifier",
                                "src": "4861:2:26"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nativeSrc": "4848:2:26",
                              "nodeType": "YulIdentifier",
                              "src": "4848:2:26"
                            },
                            "nativeSrc": "4848:16:26",
                            "nodeType": "YulFunctionCall",
                            "src": "4848:16:26"
                          },
                          "nativeSrc": "4845:36:26",
                          "nodeType": "YulIf",
                          "src": "4845:36:26"
                        },
                        {
                          "nativeSrc": "4890:90:26",
                          "nodeType": "YulAssignment",
                          "src": "4890:90:26",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "4950:9:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "4950:9:26"
                                  },
                                  {
                                    "name": "offset_1",
                                    "nativeSrc": "4961:8:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "4961:8:26"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "4946:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "4946:3:26"
                                },
                                "nativeSrc": "4946:24:26",
                                "nodeType": "YulFunctionCall",
                                "src": "4946:24:26"
                              },
                              {
                                "name": "dataEnd",
                                "nativeSrc": "4972:7:26",
                                "nodeType": "YulIdentifier",
                                "src": "4972:7:26"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_array_struct_FilePermissions_dyn",
                              "nativeSrc": "4900:45:26",
                              "nodeType": "YulIdentifier",
                              "src": "4900:45:26"
                            },
                            "nativeSrc": "4900:80:26",
                            "nodeType": "YulFunctionCall",
                            "src": "4900:80:26"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nativeSrc": "4890:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "4890:6:26"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_string_memory_ptrt_array$_t_struct$_FilePermissions_$3515_memory_ptr_$dyn_memory_ptr",
                    "nativeSrc": "4365:621:26",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "4480:9:26",
                        "nodeType": "YulTypedName",
                        "src": "4480:9:26",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nativeSrc": "4491:7:26",
                        "nodeType": "YulTypedName",
                        "src": "4491:7:26",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nativeSrc": "4503:6:26",
                        "nodeType": "YulTypedName",
                        "src": "4503:6:26",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nativeSrc": "4511:6:26",
                        "nodeType": "YulTypedName",
                        "src": "4511:6:26",
                        "type": ""
                      }
                    ],
                    "src": "4365:621:26"
                  },
                  {
                    "body": {
                      "nativeSrc": "5092:76:26",
                      "nodeType": "YulBlock",
                      "src": "5092:76:26",
                      "statements": [
                        {
                          "nativeSrc": "5102:26:26",
                          "nodeType": "YulAssignment",
                          "src": "5102:26:26",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "5114:9:26",
                                "nodeType": "YulIdentifier",
                                "src": "5114:9:26"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "5125:2:26",
                                "nodeType": "YulLiteral",
                                "src": "5125:2:26",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "5110:3:26",
                              "nodeType": "YulIdentifier",
                              "src": "5110:3:26"
                            },
                            "nativeSrc": "5110:18:26",
                            "nodeType": "YulFunctionCall",
                            "src": "5110:18:26"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "5102:4:26",
                              "nodeType": "YulIdentifier",
                              "src": "5102:4:26"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "5144:9:26",
                                "nodeType": "YulIdentifier",
                                "src": "5144:9:26"
                              },
                              {
                                "name": "value0",
                                "nativeSrc": "5155:6:26",
                                "nodeType": "YulIdentifier",
                                "src": "5155:6:26"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "5137:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "5137:6:26"
                            },
                            "nativeSrc": "5137:25:26",
                            "nodeType": "YulFunctionCall",
                            "src": "5137:25:26"
                          },
                          "nativeSrc": "5137:25:26",
                          "nodeType": "YulExpressionStatement",
                          "src": "5137:25:26"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                    "nativeSrc": "4991:177:26",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "5061:9:26",
                        "nodeType": "YulTypedName",
                        "src": "5061:9:26",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "5072:6:26",
                        "nodeType": "YulTypedName",
                        "src": "5072:6:26",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "5083:4:26",
                        "nodeType": "YulTypedName",
                        "src": "5083:4:26",
                        "type": ""
                      }
                    ],
                    "src": "4991:177:26"
                  },
                  {
                    "body": {
                      "nativeSrc": "5243:110:26",
                      "nodeType": "YulBlock",
                      "src": "5243:110:26",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "5289:16:26",
                            "nodeType": "YulBlock",
                            "src": "5289:16:26",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "5298:1:26",
                                      "nodeType": "YulLiteral",
                                      "src": "5298:1:26",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "5301:1:26",
                                      "nodeType": "YulLiteral",
                                      "src": "5301:1:26",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "5291:6:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "5291:6:26"
                                  },
                                  "nativeSrc": "5291:12:26",
                                  "nodeType": "YulFunctionCall",
                                  "src": "5291:12:26"
                                },
                                "nativeSrc": "5291:12:26",
                                "nodeType": "YulExpressionStatement",
                                "src": "5291:12:26"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "5264:7:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "5264:7:26"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "5273:9:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "5273:9:26"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "5260:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "5260:3:26"
                                },
                                "nativeSrc": "5260:23:26",
                                "nodeType": "YulFunctionCall",
                                "src": "5260:23:26"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "5285:2:26",
                                "nodeType": "YulLiteral",
                                "src": "5285:2:26",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nativeSrc": "5256:3:26",
                              "nodeType": "YulIdentifier",
                              "src": "5256:3:26"
                            },
                            "nativeSrc": "5256:32:26",
                            "nodeType": "YulFunctionCall",
                            "src": "5256:32:26"
                          },
                          "nativeSrc": "5253:52:26",
                          "nodeType": "YulIf",
                          "src": "5253:52:26"
                        },
                        {
                          "nativeSrc": "5314:33:26",
                          "nodeType": "YulAssignment",
                          "src": "5314:33:26",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "5337:9:26",
                                "nodeType": "YulIdentifier",
                                "src": "5337:9:26"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nativeSrc": "5324:12:26",
                              "nodeType": "YulIdentifier",
                              "src": "5324:12:26"
                            },
                            "nativeSrc": "5324:23:26",
                            "nodeType": "YulFunctionCall",
                            "src": "5324:23:26"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nativeSrc": "5314:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "5314:6:26"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256",
                    "nativeSrc": "5173:180:26",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "5209:9:26",
                        "nodeType": "YulTypedName",
                        "src": "5209:9:26",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nativeSrc": "5220:7:26",
                        "nodeType": "YulTypedName",
                        "src": "5220:7:26",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nativeSrc": "5232:6:26",
                        "nodeType": "YulTypedName",
                        "src": "5232:6:26",
                        "type": ""
                      }
                    ],
                    "src": "5173:180:26"
                  },
                  {
                    "body": {
                      "nativeSrc": "5454:428:26",
                      "nodeType": "YulBlock",
                      "src": "5454:428:26",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "5500:16:26",
                            "nodeType": "YulBlock",
                            "src": "5500:16:26",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "5509:1:26",
                                      "nodeType": "YulLiteral",
                                      "src": "5509:1:26",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "5512:1:26",
                                      "nodeType": "YulLiteral",
                                      "src": "5512:1:26",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "5502:6:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "5502:6:26"
                                  },
                                  "nativeSrc": "5502:12:26",
                                  "nodeType": "YulFunctionCall",
                                  "src": "5502:12:26"
                                },
                                "nativeSrc": "5502:12:26",
                                "nodeType": "YulExpressionStatement",
                                "src": "5502:12:26"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "5475:7:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "5475:7:26"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "5484:9:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "5484:9:26"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "5471:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "5471:3:26"
                                },
                                "nativeSrc": "5471:23:26",
                                "nodeType": "YulFunctionCall",
                                "src": "5471:23:26"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "5496:2:26",
                                "nodeType": "YulLiteral",
                                "src": "5496:2:26",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nativeSrc": "5467:3:26",
                              "nodeType": "YulIdentifier",
                              "src": "5467:3:26"
                            },
                            "nativeSrc": "5467:32:26",
                            "nodeType": "YulFunctionCall",
                            "src": "5467:32:26"
                          },
                          "nativeSrc": "5464:52:26",
                          "nodeType": "YulIf",
                          "src": "5464:52:26"
                        },
                        {
                          "nativeSrc": "5525:39:26",
                          "nodeType": "YulAssignment",
                          "src": "5525:39:26",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "5554:9:26",
                                "nodeType": "YulIdentifier",
                                "src": "5554:9:26"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nativeSrc": "5535:18:26",
                              "nodeType": "YulIdentifier",
                              "src": "5535:18:26"
                            },
                            "nativeSrc": "5535:29:26",
                            "nodeType": "YulFunctionCall",
                            "src": "5535:29:26"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nativeSrc": "5525:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "5525:6:26"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "5573:46:26",
                          "nodeType": "YulVariableDeclaration",
                          "src": "5573:46:26",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "5604:9:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "5604:9:26"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "5615:2:26",
                                    "nodeType": "YulLiteral",
                                    "src": "5615:2:26",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "5600:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "5600:3:26"
                                },
                                "nativeSrc": "5600:18:26",
                                "nodeType": "YulFunctionCall",
                                "src": "5600:18:26"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nativeSrc": "5587:12:26",
                              "nodeType": "YulIdentifier",
                              "src": "5587:12:26"
                            },
                            "nativeSrc": "5587:32:26",
                            "nodeType": "YulFunctionCall",
                            "src": "5587:32:26"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nativeSrc": "5577:6:26",
                              "nodeType": "YulTypedName",
                              "src": "5577:6:26",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "5662:16:26",
                            "nodeType": "YulBlock",
                            "src": "5662:16:26",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "5671:1:26",
                                      "nodeType": "YulLiteral",
                                      "src": "5671:1:26",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "5674:1:26",
                                      "nodeType": "YulLiteral",
                                      "src": "5674:1:26",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "5664:6:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "5664:6:26"
                                  },
                                  "nativeSrc": "5664:12:26",
                                  "nodeType": "YulFunctionCall",
                                  "src": "5664:12:26"
                                },
                                "nativeSrc": "5664:12:26",
                                "nodeType": "YulExpressionStatement",
                                "src": "5664:12:26"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nativeSrc": "5634:6:26",
                                "nodeType": "YulIdentifier",
                                "src": "5634:6:26"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "5642:18:26",
                                "nodeType": "YulLiteral",
                                "src": "5642:18:26",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nativeSrc": "5631:2:26",
                              "nodeType": "YulIdentifier",
                              "src": "5631:2:26"
                            },
                            "nativeSrc": "5631:30:26",
                            "nodeType": "YulFunctionCall",
                            "src": "5631:30:26"
                          },
                          "nativeSrc": "5628:50:26",
                          "nodeType": "YulIf",
                          "src": "5628:50:26"
                        },
                        {
                          "nativeSrc": "5687:32:26",
                          "nodeType": "YulVariableDeclaration",
                          "src": "5687:32:26",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "5701:9:26",
                                "nodeType": "YulIdentifier",
                                "src": "5701:9:26"
                              },
                              {
                                "name": "offset",
                                "nativeSrc": "5712:6:26",
                                "nodeType": "YulIdentifier",
                                "src": "5712:6:26"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "5697:3:26",
                              "nodeType": "YulIdentifier",
                              "src": "5697:3:26"
                            },
                            "nativeSrc": "5697:22:26",
                            "nodeType": "YulFunctionCall",
                            "src": "5697:22:26"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nativeSrc": "5691:2:26",
                              "nodeType": "YulTypedName",
                              "src": "5691:2:26",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "5767:16:26",
                            "nodeType": "YulBlock",
                            "src": "5767:16:26",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "5776:1:26",
                                      "nodeType": "YulLiteral",
                                      "src": "5776:1:26",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "5779:1:26",
                                      "nodeType": "YulLiteral",
                                      "src": "5779:1:26",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "5769:6:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "5769:6:26"
                                  },
                                  "nativeSrc": "5769:12:26",
                                  "nodeType": "YulFunctionCall",
                                  "src": "5769:12:26"
                                },
                                "nativeSrc": "5769:12:26",
                                "nodeType": "YulExpressionStatement",
                                "src": "5769:12:26"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_1",
                                        "nativeSrc": "5746:2:26",
                                        "nodeType": "YulIdentifier",
                                        "src": "5746:2:26"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "5750:4:26",
                                        "nodeType": "YulLiteral",
                                        "src": "5750:4:26",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "5742:3:26",
                                      "nodeType": "YulIdentifier",
                                      "src": "5742:3:26"
                                    },
                                    "nativeSrc": "5742:13:26",
                                    "nodeType": "YulFunctionCall",
                                    "src": "5742:13:26"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "5757:7:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "5757:7:26"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nativeSrc": "5738:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "5738:3:26"
                                },
                                "nativeSrc": "5738:27:26",
                                "nodeType": "YulFunctionCall",
                                "src": "5738:27:26"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nativeSrc": "5731:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "5731:6:26"
                            },
                            "nativeSrc": "5731:35:26",
                            "nodeType": "YulFunctionCall",
                            "src": "5731:35:26"
                          },
                          "nativeSrc": "5728:55:26",
                          "nodeType": "YulIf",
                          "src": "5728:55:26"
                        },
                        {
                          "nativeSrc": "5792:84:26",
                          "nodeType": "YulAssignment",
                          "src": "5792:84:26",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nativeSrc": "5841:2:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "5841:2:26"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "5845:2:26",
                                    "nodeType": "YulLiteral",
                                    "src": "5845:2:26",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "5837:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "5837:3:26"
                                },
                                "nativeSrc": "5837:11:26",
                                "nodeType": "YulFunctionCall",
                                "src": "5837:11:26"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nativeSrc": "5863:2:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "5863:2:26"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nativeSrc": "5850:12:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "5850:12:26"
                                },
                                "nativeSrc": "5850:16:26",
                                "nodeType": "YulFunctionCall",
                                "src": "5850:16:26"
                              },
                              {
                                "name": "dataEnd",
                                "nativeSrc": "5868:7:26",
                                "nodeType": "YulIdentifier",
                                "src": "5868:7:26"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_available_length_string",
                              "nativeSrc": "5802:34:26",
                              "nodeType": "YulIdentifier",
                              "src": "5802:34:26"
                            },
                            "nativeSrc": "5802:74:26",
                            "nodeType": "YulFunctionCall",
                            "src": "5802:74:26"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nativeSrc": "5792:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "5792:6:26"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_bytes_memory_ptr",
                    "nativeSrc": "5358:524:26",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "5412:9:26",
                        "nodeType": "YulTypedName",
                        "src": "5412:9:26",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nativeSrc": "5423:7:26",
                        "nodeType": "YulTypedName",
                        "src": "5423:7:26",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nativeSrc": "5435:6:26",
                        "nodeType": "YulTypedName",
                        "src": "5435:6:26",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nativeSrc": "5443:6:26",
                        "nodeType": "YulTypedName",
                        "src": "5443:6:26",
                        "type": ""
                      }
                    ],
                    "src": "5358:524:26"
                  },
                  {
                    "body": {
                      "nativeSrc": "5974:167:26",
                      "nodeType": "YulBlock",
                      "src": "5974:167:26",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "6020:16:26",
                            "nodeType": "YulBlock",
                            "src": "6020:16:26",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "6029:1:26",
                                      "nodeType": "YulLiteral",
                                      "src": "6029:1:26",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "6032:1:26",
                                      "nodeType": "YulLiteral",
                                      "src": "6032:1:26",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "6022:6:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "6022:6:26"
                                  },
                                  "nativeSrc": "6022:12:26",
                                  "nodeType": "YulFunctionCall",
                                  "src": "6022:12:26"
                                },
                                "nativeSrc": "6022:12:26",
                                "nodeType": "YulExpressionStatement",
                                "src": "6022:12:26"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "5995:7:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "5995:7:26"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "6004:9:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "6004:9:26"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "5991:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "5991:3:26"
                                },
                                "nativeSrc": "5991:23:26",
                                "nodeType": "YulFunctionCall",
                                "src": "5991:23:26"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "6016:2:26",
                                "nodeType": "YulLiteral",
                                "src": "6016:2:26",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nativeSrc": "5987:3:26",
                              "nodeType": "YulIdentifier",
                              "src": "5987:3:26"
                            },
                            "nativeSrc": "5987:32:26",
                            "nodeType": "YulFunctionCall",
                            "src": "5987:32:26"
                          },
                          "nativeSrc": "5984:52:26",
                          "nodeType": "YulIf",
                          "src": "5984:52:26"
                        },
                        {
                          "nativeSrc": "6045:33:26",
                          "nodeType": "YulAssignment",
                          "src": "6045:33:26",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "6068:9:26",
                                "nodeType": "YulIdentifier",
                                "src": "6068:9:26"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nativeSrc": "6055:12:26",
                              "nodeType": "YulIdentifier",
                              "src": "6055:12:26"
                            },
                            "nativeSrc": "6055:23:26",
                            "nodeType": "YulFunctionCall",
                            "src": "6055:23:26"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nativeSrc": "6045:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "6045:6:26"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "6087:48:26",
                          "nodeType": "YulAssignment",
                          "src": "6087:48:26",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "6120:9:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "6120:9:26"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "6131:2:26",
                                    "nodeType": "YulLiteral",
                                    "src": "6131:2:26",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "6116:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "6116:3:26"
                                },
                                "nativeSrc": "6116:18:26",
                                "nodeType": "YulFunctionCall",
                                "src": "6116:18:26"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nativeSrc": "6097:18:26",
                              "nodeType": "YulIdentifier",
                              "src": "6097:18:26"
                            },
                            "nativeSrc": "6097:38:26",
                            "nodeType": "YulFunctionCall",
                            "src": "6097:38:26"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nativeSrc": "6087:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "6087:6:26"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256t_address",
                    "nativeSrc": "5887:254:26",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "5932:9:26",
                        "nodeType": "YulTypedName",
                        "src": "5932:9:26",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nativeSrc": "5943:7:26",
                        "nodeType": "YulTypedName",
                        "src": "5943:7:26",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nativeSrc": "5955:6:26",
                        "nodeType": "YulTypedName",
                        "src": "5955:6:26",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nativeSrc": "5963:6:26",
                        "nodeType": "YulTypedName",
                        "src": "5963:6:26",
                        "type": ""
                      }
                    ],
                    "src": "5887:254:26"
                  },
                  {
                    "body": {
                      "nativeSrc": "6212:184:26",
                      "nodeType": "YulBlock",
                      "src": "6212:184:26",
                      "statements": [
                        {
                          "nativeSrc": "6222:10:26",
                          "nodeType": "YulVariableDeclaration",
                          "src": "6222:10:26",
                          "value": {
                            "kind": "number",
                            "nativeSrc": "6231:1:26",
                            "nodeType": "YulLiteral",
                            "src": "6231:1:26",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nativeSrc": "6226:1:26",
                              "nodeType": "YulTypedName",
                              "src": "6226:1:26",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "6291:63:26",
                            "nodeType": "YulBlock",
                            "src": "6291:63:26",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nativeSrc": "6316:3:26",
                                          "nodeType": "YulIdentifier",
                                          "src": "6316:3:26"
                                        },
                                        {
                                          "name": "i",
                                          "nativeSrc": "6321:1:26",
                                          "nodeType": "YulIdentifier",
                                          "src": "6321:1:26"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nativeSrc": "6312:3:26",
                                        "nodeType": "YulIdentifier",
                                        "src": "6312:3:26"
                                      },
                                      "nativeSrc": "6312:11:26",
                                      "nodeType": "YulFunctionCall",
                                      "src": "6312:11:26"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "src",
                                              "nativeSrc": "6335:3:26",
                                              "nodeType": "YulIdentifier",
                                              "src": "6335:3:26"
                                            },
                                            {
                                              "name": "i",
                                              "nativeSrc": "6340:1:26",
                                              "nodeType": "YulIdentifier",
                                              "src": "6340:1:26"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nativeSrc": "6331:3:26",
                                            "nodeType": "YulIdentifier",
                                            "src": "6331:3:26"
                                          },
                                          "nativeSrc": "6331:11:26",
                                          "nodeType": "YulFunctionCall",
                                          "src": "6331:11:26"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nativeSrc": "6325:5:26",
                                        "nodeType": "YulIdentifier",
                                        "src": "6325:5:26"
                                      },
                                      "nativeSrc": "6325:18:26",
                                      "nodeType": "YulFunctionCall",
                                      "src": "6325:18:26"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nativeSrc": "6305:6:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "6305:6:26"
                                  },
                                  "nativeSrc": "6305:39:26",
                                  "nodeType": "YulFunctionCall",
                                  "src": "6305:39:26"
                                },
                                "nativeSrc": "6305:39:26",
                                "nodeType": "YulExpressionStatement",
                                "src": "6305:39:26"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nativeSrc": "6252:1:26",
                                "nodeType": "YulIdentifier",
                                "src": "6252:1:26"
                              },
                              {
                                "name": "length",
                                "nativeSrc": "6255:6:26",
                                "nodeType": "YulIdentifier",
                                "src": "6255:6:26"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nativeSrc": "6249:2:26",
                              "nodeType": "YulIdentifier",
                              "src": "6249:2:26"
                            },
                            "nativeSrc": "6249:13:26",
                            "nodeType": "YulFunctionCall",
                            "src": "6249:13:26"
                          },
                          "nativeSrc": "6241:113:26",
                          "nodeType": "YulForLoop",
                          "post": {
                            "nativeSrc": "6263:19:26",
                            "nodeType": "YulBlock",
                            "src": "6263:19:26",
                            "statements": [
                              {
                                "nativeSrc": "6265:15:26",
                                "nodeType": "YulAssignment",
                                "src": "6265:15:26",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nativeSrc": "6274:1:26",
                                      "nodeType": "YulIdentifier",
                                      "src": "6274:1:26"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "6277:2:26",
                                      "nodeType": "YulLiteral",
                                      "src": "6277:2:26",
                                      "type": "",
                                      "value": "32"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "6270:3:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "6270:3:26"
                                  },
                                  "nativeSrc": "6270:10:26",
                                  "nodeType": "YulFunctionCall",
                                  "src": "6270:10:26"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nativeSrc": "6265:1:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "6265:1:26"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nativeSrc": "6245:3:26",
                            "nodeType": "YulBlock",
                            "src": "6245:3:26",
                            "statements": []
                          },
                          "src": "6241:113:26"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dst",
                                    "nativeSrc": "6374:3:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "6374:3:26"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "6379:6:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "6379:6:26"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "6370:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "6370:3:26"
                                },
                                "nativeSrc": "6370:16:26",
                                "nodeType": "YulFunctionCall",
                                "src": "6370:16:26"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "6388:1:26",
                                "nodeType": "YulLiteral",
                                "src": "6388:1:26",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "6363:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "6363:6:26"
                            },
                            "nativeSrc": "6363:27:26",
                            "nodeType": "YulFunctionCall",
                            "src": "6363:27:26"
                          },
                          "nativeSrc": "6363:27:26",
                          "nodeType": "YulExpressionStatement",
                          "src": "6363:27:26"
                        }
                      ]
                    },
                    "name": "copy_memory_to_memory_with_cleanup",
                    "nativeSrc": "6146:250:26",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "src",
                        "nativeSrc": "6190:3:26",
                        "nodeType": "YulTypedName",
                        "src": "6190:3:26",
                        "type": ""
                      },
                      {
                        "name": "dst",
                        "nativeSrc": "6195:3:26",
                        "nodeType": "YulTypedName",
                        "src": "6195:3:26",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nativeSrc": "6200:6:26",
                        "nodeType": "YulTypedName",
                        "src": "6200:6:26",
                        "type": ""
                      }
                    ],
                    "src": "6146:250:26"
                  },
                  {
                    "body": {
                      "nativeSrc": "6451:221:26",
                      "nodeType": "YulBlock",
                      "src": "6451:221:26",
                      "statements": [
                        {
                          "nativeSrc": "6461:26:26",
                          "nodeType": "YulVariableDeclaration",
                          "src": "6461:26:26",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "6481:5:26",
                                "nodeType": "YulIdentifier",
                                "src": "6481:5:26"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nativeSrc": "6475:5:26",
                              "nodeType": "YulIdentifier",
                              "src": "6475:5:26"
                            },
                            "nativeSrc": "6475:12:26",
                            "nodeType": "YulFunctionCall",
                            "src": "6475:12:26"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nativeSrc": "6465:6:26",
                              "nodeType": "YulTypedName",
                              "src": "6465:6:26",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "6503:3:26",
                                "nodeType": "YulIdentifier",
                                "src": "6503:3:26"
                              },
                              {
                                "name": "length",
                                "nativeSrc": "6508:6:26",
                                "nodeType": "YulIdentifier",
                                "src": "6508:6:26"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "6496:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "6496:6:26"
                            },
                            "nativeSrc": "6496:19:26",
                            "nodeType": "YulFunctionCall",
                            "src": "6496:19:26"
                          },
                          "nativeSrc": "6496:19:26",
                          "nodeType": "YulExpressionStatement",
                          "src": "6496:19:26"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "6563:5:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "6563:5:26"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "6570:4:26",
                                    "nodeType": "YulLiteral",
                                    "src": "6570:4:26",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "6559:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "6559:3:26"
                                },
                                "nativeSrc": "6559:16:26",
                                "nodeType": "YulFunctionCall",
                                "src": "6559:16:26"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nativeSrc": "6581:3:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "6581:3:26"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "6586:4:26",
                                    "nodeType": "YulLiteral",
                                    "src": "6586:4:26",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "6577:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "6577:3:26"
                                },
                                "nativeSrc": "6577:14:26",
                                "nodeType": "YulFunctionCall",
                                "src": "6577:14:26"
                              },
                              {
                                "name": "length",
                                "nativeSrc": "6593:6:26",
                                "nodeType": "YulIdentifier",
                                "src": "6593:6:26"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory_with_cleanup",
                              "nativeSrc": "6524:34:26",
                              "nodeType": "YulIdentifier",
                              "src": "6524:34:26"
                            },
                            "nativeSrc": "6524:76:26",
                            "nodeType": "YulFunctionCall",
                            "src": "6524:76:26"
                          },
                          "nativeSrc": "6524:76:26",
                          "nodeType": "YulExpressionStatement",
                          "src": "6524:76:26"
                        },
                        {
                          "nativeSrc": "6609:57:26",
                          "nodeType": "YulAssignment",
                          "src": "6609:57:26",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nativeSrc": "6624:3:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "6624:3:26"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "length",
                                            "nativeSrc": "6637:6:26",
                                            "nodeType": "YulIdentifier",
                                            "src": "6637:6:26"
                                          },
                                          {
                                            "kind": "number",
                                            "nativeSrc": "6645:2:26",
                                            "nodeType": "YulLiteral",
                                            "src": "6645:2:26",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nativeSrc": "6633:3:26",
                                          "nodeType": "YulIdentifier",
                                          "src": "6633:3:26"
                                        },
                                        "nativeSrc": "6633:15:26",
                                        "nodeType": "YulFunctionCall",
                                        "src": "6633:15:26"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nativeSrc": "6654:2:26",
                                            "nodeType": "YulLiteral",
                                            "src": "6654:2:26",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nativeSrc": "6650:3:26",
                                          "nodeType": "YulIdentifier",
                                          "src": "6650:3:26"
                                        },
                                        "nativeSrc": "6650:7:26",
                                        "nodeType": "YulFunctionCall",
                                        "src": "6650:7:26"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nativeSrc": "6629:3:26",
                                      "nodeType": "YulIdentifier",
                                      "src": "6629:3:26"
                                    },
                                    "nativeSrc": "6629:29:26",
                                    "nodeType": "YulFunctionCall",
                                    "src": "6629:29:26"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "6620:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "6620:3:26"
                                },
                                "nativeSrc": "6620:39:26",
                                "nodeType": "YulFunctionCall",
                                "src": "6620:39:26"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "6661:4:26",
                                "nodeType": "YulLiteral",
                                "src": "6661:4:26",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "6616:3:26",
                              "nodeType": "YulIdentifier",
                              "src": "6616:3:26"
                            },
                            "nativeSrc": "6616:50:26",
                            "nodeType": "YulFunctionCall",
                            "src": "6616:50:26"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nativeSrc": "6609:3:26",
                              "nodeType": "YulIdentifier",
                              "src": "6609:3:26"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_string",
                    "nativeSrc": "6401:271:26",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "6428:5:26",
                        "nodeType": "YulTypedName",
                        "src": "6428:5:26",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nativeSrc": "6435:3:26",
                        "nodeType": "YulTypedName",
                        "src": "6435:3:26",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nativeSrc": "6443:3:26",
                        "nodeType": "YulTypedName",
                        "src": "6443:3:26",
                        "type": ""
                      }
                    ],
                    "src": "6401:271:26"
                  },
                  {
                    "body": {
                      "nativeSrc": "6798:99:26",
                      "nodeType": "YulBlock",
                      "src": "6798:99:26",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "6815:9:26",
                                "nodeType": "YulIdentifier",
                                "src": "6815:9:26"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "6826:2:26",
                                "nodeType": "YulLiteral",
                                "src": "6826:2:26",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "6808:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "6808:6:26"
                            },
                            "nativeSrc": "6808:21:26",
                            "nodeType": "YulFunctionCall",
                            "src": "6808:21:26"
                          },
                          "nativeSrc": "6808:21:26",
                          "nodeType": "YulExpressionStatement",
                          "src": "6808:21:26"
                        },
                        {
                          "nativeSrc": "6838:53:26",
                          "nodeType": "YulAssignment",
                          "src": "6838:53:26",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nativeSrc": "6864:6:26",
                                "nodeType": "YulIdentifier",
                                "src": "6864:6:26"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "6876:9:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "6876:9:26"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "6887:2:26",
                                    "nodeType": "YulLiteral",
                                    "src": "6887:2:26",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "6872:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "6872:3:26"
                                },
                                "nativeSrc": "6872:18:26",
                                "nodeType": "YulFunctionCall",
                                "src": "6872:18:26"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_string",
                              "nativeSrc": "6846:17:26",
                              "nodeType": "YulIdentifier",
                              "src": "6846:17:26"
                            },
                            "nativeSrc": "6846:45:26",
                            "nodeType": "YulFunctionCall",
                            "src": "6846:45:26"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "6838:4:26",
                              "nodeType": "YulIdentifier",
                              "src": "6838:4:26"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
                    "nativeSrc": "6677:220:26",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "6767:9:26",
                        "nodeType": "YulTypedName",
                        "src": "6767:9:26",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "6778:6:26",
                        "nodeType": "YulTypedName",
                        "src": "6778:6:26",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "6789:4:26",
                        "nodeType": "YulTypedName",
                        "src": "6789:4:26",
                        "type": ""
                      }
                    ],
                    "src": "6677:220:26"
                  },
                  {
                    "body": {
                      "nativeSrc": "6989:161:26",
                      "nodeType": "YulBlock",
                      "src": "6989:161:26",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "7035:16:26",
                            "nodeType": "YulBlock",
                            "src": "7035:16:26",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "7044:1:26",
                                      "nodeType": "YulLiteral",
                                      "src": "7044:1:26",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "7047:1:26",
                                      "nodeType": "YulLiteral",
                                      "src": "7047:1:26",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "7037:6:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "7037:6:26"
                                  },
                                  "nativeSrc": "7037:12:26",
                                  "nodeType": "YulFunctionCall",
                                  "src": "7037:12:26"
                                },
                                "nativeSrc": "7037:12:26",
                                "nodeType": "YulExpressionStatement",
                                "src": "7037:12:26"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "7010:7:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "7010:7:26"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "7019:9:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "7019:9:26"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "7006:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "7006:3:26"
                                },
                                "nativeSrc": "7006:23:26",
                                "nodeType": "YulFunctionCall",
                                "src": "7006:23:26"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "7031:2:26",
                                "nodeType": "YulLiteral",
                                "src": "7031:2:26",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nativeSrc": "7002:3:26",
                              "nodeType": "YulIdentifier",
                              "src": "7002:3:26"
                            },
                            "nativeSrc": "7002:32:26",
                            "nodeType": "YulFunctionCall",
                            "src": "7002:32:26"
                          },
                          "nativeSrc": "6999:52:26",
                          "nodeType": "YulIf",
                          "src": "6999:52:26"
                        },
                        {
                          "nativeSrc": "7060:33:26",
                          "nodeType": "YulAssignment",
                          "src": "7060:33:26",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "7083:9:26",
                                "nodeType": "YulIdentifier",
                                "src": "7083:9:26"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nativeSrc": "7070:12:26",
                              "nodeType": "YulIdentifier",
                              "src": "7070:12:26"
                            },
                            "nativeSrc": "7070:23:26",
                            "nodeType": "YulFunctionCall",
                            "src": "7070:23:26"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nativeSrc": "7060:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "7060:6:26"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "7102:42:26",
                          "nodeType": "YulAssignment",
                          "src": "7102:42:26",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "7129:9:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "7129:9:26"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "7140:2:26",
                                    "nodeType": "YulLiteral",
                                    "src": "7140:2:26",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "7125:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "7125:3:26"
                                },
                                "nativeSrc": "7125:18:26",
                                "nodeType": "YulFunctionCall",
                                "src": "7125:18:26"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nativeSrc": "7112:12:26",
                              "nodeType": "YulIdentifier",
                              "src": "7112:12:26"
                            },
                            "nativeSrc": "7112:32:26",
                            "nodeType": "YulFunctionCall",
                            "src": "7112:32:26"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nativeSrc": "7102:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "7102:6:26"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256t_uint256",
                    "nativeSrc": "6902:248:26",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "6947:9:26",
                        "nodeType": "YulTypedName",
                        "src": "6947:9:26",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nativeSrc": "6958:7:26",
                        "nodeType": "YulTypedName",
                        "src": "6958:7:26",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nativeSrc": "6970:6:26",
                        "nodeType": "YulTypedName",
                        "src": "6970:6:26",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nativeSrc": "6978:6:26",
                        "nodeType": "YulTypedName",
                        "src": "6978:6:26",
                        "type": ""
                      }
                    ],
                    "src": "6902:248:26"
                  },
                  {
                    "body": {
                      "nativeSrc": "7256:102:26",
                      "nodeType": "YulBlock",
                      "src": "7256:102:26",
                      "statements": [
                        {
                          "nativeSrc": "7266:26:26",
                          "nodeType": "YulAssignment",
                          "src": "7266:26:26",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "7278:9:26",
                                "nodeType": "YulIdentifier",
                                "src": "7278:9:26"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "7289:2:26",
                                "nodeType": "YulLiteral",
                                "src": "7289:2:26",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "7274:3:26",
                              "nodeType": "YulIdentifier",
                              "src": "7274:3:26"
                            },
                            "nativeSrc": "7274:18:26",
                            "nodeType": "YulFunctionCall",
                            "src": "7274:18:26"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "7266:4:26",
                              "nodeType": "YulIdentifier",
                              "src": "7266:4:26"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "7308:9:26",
                                "nodeType": "YulIdentifier",
                                "src": "7308:9:26"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nativeSrc": "7323:6:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "7323:6:26"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nativeSrc": "7339:3:26",
                                            "nodeType": "YulLiteral",
                                            "src": "7339:3:26",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nativeSrc": "7344:1:26",
                                            "nodeType": "YulLiteral",
                                            "src": "7344:1:26",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nativeSrc": "7335:3:26",
                                          "nodeType": "YulIdentifier",
                                          "src": "7335:3:26"
                                        },
                                        "nativeSrc": "7335:11:26",
                                        "nodeType": "YulFunctionCall",
                                        "src": "7335:11:26"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "7348:1:26",
                                        "nodeType": "YulLiteral",
                                        "src": "7348:1:26",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nativeSrc": "7331:3:26",
                                      "nodeType": "YulIdentifier",
                                      "src": "7331:3:26"
                                    },
                                    "nativeSrc": "7331:19:26",
                                    "nodeType": "YulFunctionCall",
                                    "src": "7331:19:26"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nativeSrc": "7319:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "7319:3:26"
                                },
                                "nativeSrc": "7319:32:26",
                                "nodeType": "YulFunctionCall",
                                "src": "7319:32:26"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "7301:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "7301:6:26"
                            },
                            "nativeSrc": "7301:51:26",
                            "nodeType": "YulFunctionCall",
                            "src": "7301:51:26"
                          },
                          "nativeSrc": "7301:51:26",
                          "nodeType": "YulExpressionStatement",
                          "src": "7301:51:26"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                    "nativeSrc": "7155:203:26",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "7225:9:26",
                        "nodeType": "YulTypedName",
                        "src": "7225:9:26",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "7236:6:26",
                        "nodeType": "YulTypedName",
                        "src": "7236:6:26",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "7247:4:26",
                        "nodeType": "YulTypedName",
                        "src": "7247:4:26",
                        "type": ""
                      }
                    ],
                    "src": "7155:203:26"
                  },
                  {
                    "body": {
                      "nativeSrc": "7510:321:26",
                      "nodeType": "YulBlock",
                      "src": "7510:321:26",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "7556:16:26",
                            "nodeType": "YulBlock",
                            "src": "7556:16:26",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "7565:1:26",
                                      "nodeType": "YulLiteral",
                                      "src": "7565:1:26",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "7568:1:26",
                                      "nodeType": "YulLiteral",
                                      "src": "7568:1:26",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "7558:6:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "7558:6:26"
                                  },
                                  "nativeSrc": "7558:12:26",
                                  "nodeType": "YulFunctionCall",
                                  "src": "7558:12:26"
                                },
                                "nativeSrc": "7558:12:26",
                                "nodeType": "YulExpressionStatement",
                                "src": "7558:12:26"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "7531:7:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "7531:7:26"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "7540:9:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "7540:9:26"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "7527:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "7527:3:26"
                                },
                                "nativeSrc": "7527:23:26",
                                "nodeType": "YulFunctionCall",
                                "src": "7527:23:26"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "7552:2:26",
                                "nodeType": "YulLiteral",
                                "src": "7552:2:26",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nativeSrc": "7523:3:26",
                              "nodeType": "YulIdentifier",
                              "src": "7523:3:26"
                            },
                            "nativeSrc": "7523:32:26",
                            "nodeType": "YulFunctionCall",
                            "src": "7523:32:26"
                          },
                          "nativeSrc": "7520:52:26",
                          "nodeType": "YulIf",
                          "src": "7520:52:26"
                        },
                        {
                          "nativeSrc": "7581:33:26",
                          "nodeType": "YulAssignment",
                          "src": "7581:33:26",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "7604:9:26",
                                "nodeType": "YulIdentifier",
                                "src": "7604:9:26"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nativeSrc": "7591:12:26",
                              "nodeType": "YulIdentifier",
                              "src": "7591:12:26"
                            },
                            "nativeSrc": "7591:23:26",
                            "nodeType": "YulFunctionCall",
                            "src": "7591:23:26"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nativeSrc": "7581:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "7581:6:26"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "7623:46:26",
                          "nodeType": "YulVariableDeclaration",
                          "src": "7623:46:26",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "7654:9:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "7654:9:26"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "7665:2:26",
                                    "nodeType": "YulLiteral",
                                    "src": "7665:2:26",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "7650:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "7650:3:26"
                                },
                                "nativeSrc": "7650:18:26",
                                "nodeType": "YulFunctionCall",
                                "src": "7650:18:26"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nativeSrc": "7637:12:26",
                              "nodeType": "YulIdentifier",
                              "src": "7637:12:26"
                            },
                            "nativeSrc": "7637:32:26",
                            "nodeType": "YulFunctionCall",
                            "src": "7637:32:26"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nativeSrc": "7627:6:26",
                              "nodeType": "YulTypedName",
                              "src": "7627:6:26",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "7712:16:26",
                            "nodeType": "YulBlock",
                            "src": "7712:16:26",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "7721:1:26",
                                      "nodeType": "YulLiteral",
                                      "src": "7721:1:26",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "7724:1:26",
                                      "nodeType": "YulLiteral",
                                      "src": "7724:1:26",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "7714:6:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "7714:6:26"
                                  },
                                  "nativeSrc": "7714:12:26",
                                  "nodeType": "YulFunctionCall",
                                  "src": "7714:12:26"
                                },
                                "nativeSrc": "7714:12:26",
                                "nodeType": "YulExpressionStatement",
                                "src": "7714:12:26"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nativeSrc": "7684:6:26",
                                "nodeType": "YulIdentifier",
                                "src": "7684:6:26"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "7692:18:26",
                                "nodeType": "YulLiteral",
                                "src": "7692:18:26",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nativeSrc": "7681:2:26",
                              "nodeType": "YulIdentifier",
                              "src": "7681:2:26"
                            },
                            "nativeSrc": "7681:30:26",
                            "nodeType": "YulFunctionCall",
                            "src": "7681:30:26"
                          },
                          "nativeSrc": "7678:50:26",
                          "nodeType": "YulIf",
                          "src": "7678:50:26"
                        },
                        {
                          "nativeSrc": "7737:88:26",
                          "nodeType": "YulAssignment",
                          "src": "7737:88:26",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "7797:9:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "7797:9:26"
                                  },
                                  {
                                    "name": "offset",
                                    "nativeSrc": "7808:6:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "7808:6:26"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "7793:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "7793:3:26"
                                },
                                "nativeSrc": "7793:22:26",
                                "nodeType": "YulFunctionCall",
                                "src": "7793:22:26"
                              },
                              {
                                "name": "dataEnd",
                                "nativeSrc": "7817:7:26",
                                "nodeType": "YulIdentifier",
                                "src": "7817:7:26"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_array_struct_FilePermissions_dyn",
                              "nativeSrc": "7747:45:26",
                              "nodeType": "YulIdentifier",
                              "src": "7747:45:26"
                            },
                            "nativeSrc": "7747:78:26",
                            "nodeType": "YulFunctionCall",
                            "src": "7747:78:26"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nativeSrc": "7737:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "7737:6:26"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256t_array$_t_struct$_FilePermissions_$3515_memory_ptr_$dyn_memory_ptr",
                    "nativeSrc": "7363:468:26",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "7468:9:26",
                        "nodeType": "YulTypedName",
                        "src": "7468:9:26",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nativeSrc": "7479:7:26",
                        "nodeType": "YulTypedName",
                        "src": "7479:7:26",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nativeSrc": "7491:6:26",
                        "nodeType": "YulTypedName",
                        "src": "7491:6:26",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nativeSrc": "7499:6:26",
                        "nodeType": "YulTypedName",
                        "src": "7499:6:26",
                        "type": ""
                      }
                    ],
                    "src": "7363:468:26"
                  },
                  {
                    "body": {
                      "nativeSrc": "7946:747:26",
                      "nodeType": "YulBlock",
                      "src": "7946:747:26",
                      "statements": [
                        {
                          "nativeSrc": "7956:33:26",
                          "nodeType": "YulVariableDeclaration",
                          "src": "7956:33:26",
                          "value": {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nativeSrc": "7970:7:26",
                                "nodeType": "YulIdentifier",
                                "src": "7970:7:26"
                              },
                              {
                                "name": "headStart",
                                "nativeSrc": "7979:9:26",
                                "nodeType": "YulIdentifier",
                                "src": "7979:9:26"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nativeSrc": "7966:3:26",
                              "nodeType": "YulIdentifier",
                              "src": "7966:3:26"
                            },
                            "nativeSrc": "7966:23:26",
                            "nodeType": "YulFunctionCall",
                            "src": "7966:23:26"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nativeSrc": "7960:2:26",
                              "nodeType": "YulTypedName",
                              "src": "7960:2:26",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "8014:16:26",
                            "nodeType": "YulBlock",
                            "src": "8014:16:26",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "8023:1:26",
                                      "nodeType": "YulLiteral",
                                      "src": "8023:1:26",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "8026:1:26",
                                      "nodeType": "YulLiteral",
                                      "src": "8026:1:26",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "8016:6:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "8016:6:26"
                                  },
                                  "nativeSrc": "8016:12:26",
                                  "nodeType": "YulFunctionCall",
                                  "src": "8016:12:26"
                                },
                                "nativeSrc": "8016:12:26",
                                "nodeType": "YulExpressionStatement",
                                "src": "8016:12:26"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "_1",
                                "nativeSrc": "8005:2:26",
                                "nodeType": "YulIdentifier",
                                "src": "8005:2:26"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "8009:3:26",
                                "nodeType": "YulLiteral",
                                "src": "8009:3:26",
                                "type": "",
                                "value": "224"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nativeSrc": "8001:3:26",
                              "nodeType": "YulIdentifier",
                              "src": "8001:3:26"
                            },
                            "nativeSrc": "8001:12:26",
                            "nodeType": "YulFunctionCall",
                            "src": "8001:12:26"
                          },
                          "nativeSrc": "7998:32:26",
                          "nodeType": "YulIf",
                          "src": "7998:32:26"
                        },
                        {
                          "nativeSrc": "8039:33:26",
                          "nodeType": "YulAssignment",
                          "src": "8039:33:26",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "8062:9:26",
                                "nodeType": "YulIdentifier",
                                "src": "8062:9:26"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nativeSrc": "8049:12:26",
                              "nodeType": "YulIdentifier",
                              "src": "8049:12:26"
                            },
                            "nativeSrc": "8049:23:26",
                            "nodeType": "YulFunctionCall",
                            "src": "8049:23:26"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nativeSrc": "8039:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "8039:6:26"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "8112:16:26",
                            "nodeType": "YulBlock",
                            "src": "8112:16:26",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "8121:1:26",
                                      "nodeType": "YulLiteral",
                                      "src": "8121:1:26",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "8124:1:26",
                                      "nodeType": "YulLiteral",
                                      "src": "8124:1:26",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "8114:6:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "8114:6:26"
                                  },
                                  "nativeSrc": "8114:12:26",
                                  "nodeType": "YulFunctionCall",
                                  "src": "8114:12:26"
                                },
                                "nativeSrc": "8114:12:26",
                                "nodeType": "YulExpressionStatement",
                                "src": "8114:12:26"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nativeSrc": "8092:2:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "8092:2:26"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nativeSrc": "8100:2:26",
                                        "nodeType": "YulLiteral",
                                        "src": "8100:2:26",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nativeSrc": "8096:3:26",
                                      "nodeType": "YulIdentifier",
                                      "src": "8096:3:26"
                                    },
                                    "nativeSrc": "8096:7:26",
                                    "nodeType": "YulFunctionCall",
                                    "src": "8096:7:26"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "8088:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "8088:3:26"
                                },
                                "nativeSrc": "8088:16:26",
                                "nodeType": "YulFunctionCall",
                                "src": "8088:16:26"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "8106:4:26",
                                "nodeType": "YulLiteral",
                                "src": "8106:4:26",
                                "type": "",
                                "value": "0xc0"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nativeSrc": "8084:3:26",
                              "nodeType": "YulIdentifier",
                              "src": "8084:3:26"
                            },
                            "nativeSrc": "8084:27:26",
                            "nodeType": "YulFunctionCall",
                            "src": "8084:27:26"
                          },
                          "nativeSrc": "8081:47:26",
                          "nodeType": "YulIf",
                          "src": "8081:47:26"
                        },
                        {
                          "nativeSrc": "8137:35:26",
                          "nodeType": "YulVariableDeclaration",
                          "src": "8137:35:26",
                          "value": {
                            "arguments": [],
                            "functionName": {
                              "name": "allocate_memory_1950",
                              "nativeSrc": "8150:20:26",
                              "nodeType": "YulIdentifier",
                              "src": "8150:20:26"
                            },
                            "nativeSrc": "8150:22:26",
                            "nodeType": "YulFunctionCall",
                            "src": "8150:22:26"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nativeSrc": "8141:5:26",
                              "nodeType": "YulTypedName",
                              "src": "8141:5:26",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nativeSrc": "8181:47:26",
                          "nodeType": "YulVariableDeclaration",
                          "src": "8181:47:26",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "8213:9:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "8213:9:26"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "8224:2:26",
                                    "nodeType": "YulLiteral",
                                    "src": "8224:2:26",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "8209:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "8209:3:26"
                                },
                                "nativeSrc": "8209:18:26",
                                "nodeType": "YulFunctionCall",
                                "src": "8209:18:26"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nativeSrc": "8196:12:26",
                              "nodeType": "YulIdentifier",
                              "src": "8196:12:26"
                            },
                            "nativeSrc": "8196:32:26",
                            "nodeType": "YulFunctionCall",
                            "src": "8196:32:26"
                          },
                          "variables": [
                            {
                              "name": "value_1",
                              "nativeSrc": "8185:7:26",
                              "nodeType": "YulTypedName",
                              "src": "8185:7:26",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "8285:16:26",
                            "nodeType": "YulBlock",
                            "src": "8285:16:26",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "8294:1:26",
                                      "nodeType": "YulLiteral",
                                      "src": "8294:1:26",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "8297:1:26",
                                      "nodeType": "YulLiteral",
                                      "src": "8297:1:26",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "8287:6:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "8287:6:26"
                                  },
                                  "nativeSrc": "8287:12:26",
                                  "nodeType": "YulFunctionCall",
                                  "src": "8287:12:26"
                                },
                                "nativeSrc": "8287:12:26",
                                "nodeType": "YulExpressionStatement",
                                "src": "8287:12:26"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value_1",
                                    "nativeSrc": "8250:7:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "8250:7:26"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value_1",
                                            "nativeSrc": "8273:7:26",
                                            "nodeType": "YulIdentifier",
                                            "src": "8273:7:26"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "iszero",
                                          "nativeSrc": "8266:6:26",
                                          "nodeType": "YulIdentifier",
                                          "src": "8266:6:26"
                                        },
                                        "nativeSrc": "8266:15:26",
                                        "nodeType": "YulFunctionCall",
                                        "src": "8266:15:26"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nativeSrc": "8259:6:26",
                                      "nodeType": "YulIdentifier",
                                      "src": "8259:6:26"
                                    },
                                    "nativeSrc": "8259:23:26",
                                    "nodeType": "YulFunctionCall",
                                    "src": "8259:23:26"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nativeSrc": "8247:2:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "8247:2:26"
                                },
                                "nativeSrc": "8247:36:26",
                                "nodeType": "YulFunctionCall",
                                "src": "8247:36:26"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nativeSrc": "8240:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "8240:6:26"
                            },
                            "nativeSrc": "8240:44:26",
                            "nodeType": "YulFunctionCall",
                            "src": "8240:44:26"
                          },
                          "nativeSrc": "8237:64:26",
                          "nodeType": "YulIf",
                          "src": "8237:64:26"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "8317:5:26",
                                "nodeType": "YulIdentifier",
                                "src": "8317:5:26"
                              },
                              {
                                "name": "value_1",
                                "nativeSrc": "8324:7:26",
                                "nodeType": "YulIdentifier",
                                "src": "8324:7:26"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "8310:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "8310:6:26"
                            },
                            "nativeSrc": "8310:22:26",
                            "nodeType": "YulFunctionCall",
                            "src": "8310:22:26"
                          },
                          "nativeSrc": "8310:22:26",
                          "nodeType": "YulExpressionStatement",
                          "src": "8310:22:26"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "8352:5:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "8352:5:26"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "8359:2:26",
                                    "nodeType": "YulLiteral",
                                    "src": "8359:2:26",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "8348:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "8348:3:26"
                                },
                                "nativeSrc": "8348:14:26",
                                "nodeType": "YulFunctionCall",
                                "src": "8348:14:26"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "8381:9:26",
                                        "nodeType": "YulIdentifier",
                                        "src": "8381:9:26"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "8392:2:26",
                                        "nodeType": "YulLiteral",
                                        "src": "8392:2:26",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "8377:3:26",
                                      "nodeType": "YulIdentifier",
                                      "src": "8377:3:26"
                                    },
                                    "nativeSrc": "8377:18:26",
                                    "nodeType": "YulFunctionCall",
                                    "src": "8377:18:26"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nativeSrc": "8364:12:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "8364:12:26"
                                },
                                "nativeSrc": "8364:32:26",
                                "nodeType": "YulFunctionCall",
                                "src": "8364:32:26"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "8341:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "8341:6:26"
                            },
                            "nativeSrc": "8341:56:26",
                            "nodeType": "YulFunctionCall",
                            "src": "8341:56:26"
                          },
                          "nativeSrc": "8341:56:26",
                          "nodeType": "YulExpressionStatement",
                          "src": "8341:56:26"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "8417:5:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "8417:5:26"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "8424:2:26",
                                    "nodeType": "YulLiteral",
                                    "src": "8424:2:26",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "8413:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "8413:3:26"
                                },
                                "nativeSrc": "8413:14:26",
                                "nodeType": "YulFunctionCall",
                                "src": "8413:14:26"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "8446:9:26",
                                        "nodeType": "YulIdentifier",
                                        "src": "8446:9:26"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "8457:2:26",
                                        "nodeType": "YulLiteral",
                                        "src": "8457:2:26",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "8442:3:26",
                                      "nodeType": "YulIdentifier",
                                      "src": "8442:3:26"
                                    },
                                    "nativeSrc": "8442:18:26",
                                    "nodeType": "YulFunctionCall",
                                    "src": "8442:18:26"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nativeSrc": "8429:12:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "8429:12:26"
                                },
                                "nativeSrc": "8429:32:26",
                                "nodeType": "YulFunctionCall",
                                "src": "8429:32:26"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "8406:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "8406:6:26"
                            },
                            "nativeSrc": "8406:56:26",
                            "nodeType": "YulFunctionCall",
                            "src": "8406:56:26"
                          },
                          "nativeSrc": "8406:56:26",
                          "nodeType": "YulExpressionStatement",
                          "src": "8406:56:26"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "8482:5:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "8482:5:26"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "8489:2:26",
                                    "nodeType": "YulLiteral",
                                    "src": "8489:2:26",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "8478:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "8478:3:26"
                                },
                                "nativeSrc": "8478:14:26",
                                "nodeType": "YulFunctionCall",
                                "src": "8478:14:26"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "8511:9:26",
                                        "nodeType": "YulIdentifier",
                                        "src": "8511:9:26"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "8522:3:26",
                                        "nodeType": "YulLiteral",
                                        "src": "8522:3:26",
                                        "type": "",
                                        "value": "128"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "8507:3:26",
                                      "nodeType": "YulIdentifier",
                                      "src": "8507:3:26"
                                    },
                                    "nativeSrc": "8507:19:26",
                                    "nodeType": "YulFunctionCall",
                                    "src": "8507:19:26"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nativeSrc": "8494:12:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "8494:12:26"
                                },
                                "nativeSrc": "8494:33:26",
                                "nodeType": "YulFunctionCall",
                                "src": "8494:33:26"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "8471:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "8471:6:26"
                            },
                            "nativeSrc": "8471:57:26",
                            "nodeType": "YulFunctionCall",
                            "src": "8471:57:26"
                          },
                          "nativeSrc": "8471:57:26",
                          "nodeType": "YulExpressionStatement",
                          "src": "8471:57:26"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "8548:5:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "8548:5:26"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "8555:3:26",
                                    "nodeType": "YulLiteral",
                                    "src": "8555:3:26",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "8544:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "8544:3:26"
                                },
                                "nativeSrc": "8544:15:26",
                                "nodeType": "YulFunctionCall",
                                "src": "8544:15:26"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "8578:9:26",
                                        "nodeType": "YulIdentifier",
                                        "src": "8578:9:26"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "8589:3:26",
                                        "nodeType": "YulLiteral",
                                        "src": "8589:3:26",
                                        "type": "",
                                        "value": "160"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "8574:3:26",
                                      "nodeType": "YulIdentifier",
                                      "src": "8574:3:26"
                                    },
                                    "nativeSrc": "8574:19:26",
                                    "nodeType": "YulFunctionCall",
                                    "src": "8574:19:26"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nativeSrc": "8561:12:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "8561:12:26"
                                },
                                "nativeSrc": "8561:33:26",
                                "nodeType": "YulFunctionCall",
                                "src": "8561:33:26"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "8537:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "8537:6:26"
                            },
                            "nativeSrc": "8537:58:26",
                            "nodeType": "YulFunctionCall",
                            "src": "8537:58:26"
                          },
                          "nativeSrc": "8537:58:26",
                          "nodeType": "YulExpressionStatement",
                          "src": "8537:58:26"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "8615:5:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "8615:5:26"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "8622:3:26",
                                    "nodeType": "YulLiteral",
                                    "src": "8622:3:26",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "8611:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "8611:3:26"
                                },
                                "nativeSrc": "8611:15:26",
                                "nodeType": "YulFunctionCall",
                                "src": "8611:15:26"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "8645:9:26",
                                        "nodeType": "YulIdentifier",
                                        "src": "8645:9:26"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "8656:4:26",
                                        "nodeType": "YulLiteral",
                                        "src": "8656:4:26",
                                        "type": "",
                                        "value": "0xc0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "8641:3:26",
                                      "nodeType": "YulIdentifier",
                                      "src": "8641:3:26"
                                    },
                                    "nativeSrc": "8641:20:26",
                                    "nodeType": "YulFunctionCall",
                                    "src": "8641:20:26"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nativeSrc": "8628:12:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "8628:12:26"
                                },
                                "nativeSrc": "8628:34:26",
                                "nodeType": "YulFunctionCall",
                                "src": "8628:34:26"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "8604:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "8604:6:26"
                            },
                            "nativeSrc": "8604:59:26",
                            "nodeType": "YulFunctionCall",
                            "src": "8604:59:26"
                          },
                          "nativeSrc": "8604:59:26",
                          "nodeType": "YulExpressionStatement",
                          "src": "8604:59:26"
                        },
                        {
                          "nativeSrc": "8672:15:26",
                          "nodeType": "YulAssignment",
                          "src": "8672:15:26",
                          "value": {
                            "name": "value",
                            "nativeSrc": "8682:5:26",
                            "nodeType": "YulIdentifier",
                            "src": "8682:5:26"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nativeSrc": "8672:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "8672:6:26"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256t_struct$_Proof_$3477_memory_ptr",
                    "nativeSrc": "7836:857:26",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "7904:9:26",
                        "nodeType": "YulTypedName",
                        "src": "7904:9:26",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nativeSrc": "7915:7:26",
                        "nodeType": "YulTypedName",
                        "src": "7915:7:26",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nativeSrc": "7927:6:26",
                        "nodeType": "YulTypedName",
                        "src": "7927:6:26",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nativeSrc": "7935:6:26",
                        "nodeType": "YulTypedName",
                        "src": "7935:6:26",
                        "type": ""
                      }
                    ],
                    "src": "7836:857:26"
                  },
                  {
                    "body": {
                      "nativeSrc": "8903:256:26",
                      "nodeType": "YulBlock",
                      "src": "8903:256:26",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "8920:9:26",
                                "nodeType": "YulIdentifier",
                                "src": "8920:9:26"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nativeSrc": "8935:6:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "8935:6:26"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nativeSrc": "8951:3:26",
                                            "nodeType": "YulLiteral",
                                            "src": "8951:3:26",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nativeSrc": "8956:1:26",
                                            "nodeType": "YulLiteral",
                                            "src": "8956:1:26",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nativeSrc": "8947:3:26",
                                          "nodeType": "YulIdentifier",
                                          "src": "8947:3:26"
                                        },
                                        "nativeSrc": "8947:11:26",
                                        "nodeType": "YulFunctionCall",
                                        "src": "8947:11:26"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "8960:1:26",
                                        "nodeType": "YulLiteral",
                                        "src": "8960:1:26",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nativeSrc": "8943:3:26",
                                      "nodeType": "YulIdentifier",
                                      "src": "8943:3:26"
                                    },
                                    "nativeSrc": "8943:19:26",
                                    "nodeType": "YulFunctionCall",
                                    "src": "8943:19:26"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nativeSrc": "8931:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "8931:3:26"
                                },
                                "nativeSrc": "8931:32:26",
                                "nodeType": "YulFunctionCall",
                                "src": "8931:32:26"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "8913:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "8913:6:26"
                            },
                            "nativeSrc": "8913:51:26",
                            "nodeType": "YulFunctionCall",
                            "src": "8913:51:26"
                          },
                          "nativeSrc": "8913:51:26",
                          "nodeType": "YulExpressionStatement",
                          "src": "8913:51:26"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "8984:9:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "8984:9:26"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "8995:2:26",
                                    "nodeType": "YulLiteral",
                                    "src": "8995:2:26",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "8980:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "8980:3:26"
                                },
                                "nativeSrc": "8980:18:26",
                                "nodeType": "YulFunctionCall",
                                "src": "8980:18:26"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "9000:3:26",
                                "nodeType": "YulLiteral",
                                "src": "9000:3:26",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "8973:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "8973:6:26"
                            },
                            "nativeSrc": "8973:31:26",
                            "nodeType": "YulFunctionCall",
                            "src": "8973:31:26"
                          },
                          "nativeSrc": "8973:31:26",
                          "nodeType": "YulExpressionStatement",
                          "src": "8973:31:26"
                        },
                        {
                          "nativeSrc": "9013:54:26",
                          "nodeType": "YulAssignment",
                          "src": "9013:54:26",
                          "value": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nativeSrc": "9039:6:26",
                                "nodeType": "YulIdentifier",
                                "src": "9039:6:26"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "9051:9:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "9051:9:26"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "9062:3:26",
                                    "nodeType": "YulLiteral",
                                    "src": "9062:3:26",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "9047:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "9047:3:26"
                                },
                                "nativeSrc": "9047:19:26",
                                "nodeType": "YulFunctionCall",
                                "src": "9047:19:26"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_string",
                              "nativeSrc": "9021:17:26",
                              "nodeType": "YulIdentifier",
                              "src": "9021:17:26"
                            },
                            "nativeSrc": "9021:46:26",
                            "nodeType": "YulFunctionCall",
                            "src": "9021:46:26"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "9013:4:26",
                              "nodeType": "YulIdentifier",
                              "src": "9013:4:26"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "9087:9:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "9087:9:26"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "9098:2:26",
                                    "nodeType": "YulLiteral",
                                    "src": "9098:2:26",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "9083:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "9083:3:26"
                                },
                                "nativeSrc": "9083:18:26",
                                "nodeType": "YulFunctionCall",
                                "src": "9083:18:26"
                              },
                              {
                                "name": "value2",
                                "nativeSrc": "9103:6:26",
                                "nodeType": "YulIdentifier",
                                "src": "9103:6:26"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "9076:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "9076:6:26"
                            },
                            "nativeSrc": "9076:34:26",
                            "nodeType": "YulFunctionCall",
                            "src": "9076:34:26"
                          },
                          "nativeSrc": "9076:34:26",
                          "nodeType": "YulExpressionStatement",
                          "src": "9076:34:26"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "9130:9:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "9130:9:26"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "9141:2:26",
                                    "nodeType": "YulLiteral",
                                    "src": "9141:2:26",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "9126:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "9126:3:26"
                                },
                                "nativeSrc": "9126:18:26",
                                "nodeType": "YulFunctionCall",
                                "src": "9126:18:26"
                              },
                              {
                                "name": "value3",
                                "nativeSrc": "9146:6:26",
                                "nodeType": "YulIdentifier",
                                "src": "9146:6:26"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "9119:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "9119:6:26"
                            },
                            "nativeSrc": "9119:34:26",
                            "nodeType": "YulFunctionCall",
                            "src": "9119:34:26"
                          },
                          "nativeSrc": "9119:34:26",
                          "nodeType": "YulExpressionStatement",
                          "src": "9119:34:26"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_string_memory_ptr_t_uint256_t_uint256__to_t_address_t_string_memory_ptr_t_uint256_t_uint256__fromStack_reversed",
                    "nativeSrc": "8698:461:26",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "8848:9:26",
                        "nodeType": "YulTypedName",
                        "src": "8848:9:26",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nativeSrc": "8859:6:26",
                        "nodeType": "YulTypedName",
                        "src": "8859:6:26",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nativeSrc": "8867:6:26",
                        "nodeType": "YulTypedName",
                        "src": "8867:6:26",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nativeSrc": "8875:6:26",
                        "nodeType": "YulTypedName",
                        "src": "8875:6:26",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "8883:6:26",
                        "nodeType": "YulTypedName",
                        "src": "8883:6:26",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "8894:4:26",
                        "nodeType": "YulTypedName",
                        "src": "8894:4:26",
                        "type": ""
                      }
                    ],
                    "src": "8698:461:26"
                  },
                  {
                    "body": {
                      "nativeSrc": "9234:116:26",
                      "nodeType": "YulBlock",
                      "src": "9234:116:26",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "9280:16:26",
                            "nodeType": "YulBlock",
                            "src": "9280:16:26",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "9289:1:26",
                                      "nodeType": "YulLiteral",
                                      "src": "9289:1:26",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "9292:1:26",
                                      "nodeType": "YulLiteral",
                                      "src": "9292:1:26",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "9282:6:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "9282:6:26"
                                  },
                                  "nativeSrc": "9282:12:26",
                                  "nodeType": "YulFunctionCall",
                                  "src": "9282:12:26"
                                },
                                "nativeSrc": "9282:12:26",
                                "nodeType": "YulExpressionStatement",
                                "src": "9282:12:26"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "9255:7:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "9255:7:26"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "9264:9:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "9264:9:26"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "9251:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "9251:3:26"
                                },
                                "nativeSrc": "9251:23:26",
                                "nodeType": "YulFunctionCall",
                                "src": "9251:23:26"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "9276:2:26",
                                "nodeType": "YulLiteral",
                                "src": "9276:2:26",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nativeSrc": "9247:3:26",
                              "nodeType": "YulIdentifier",
                              "src": "9247:3:26"
                            },
                            "nativeSrc": "9247:32:26",
                            "nodeType": "YulFunctionCall",
                            "src": "9247:32:26"
                          },
                          "nativeSrc": "9244:52:26",
                          "nodeType": "YulIf",
                          "src": "9244:52:26"
                        },
                        {
                          "nativeSrc": "9305:39:26",
                          "nodeType": "YulAssignment",
                          "src": "9305:39:26",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "9334:9:26",
                                "nodeType": "YulIdentifier",
                                "src": "9334:9:26"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nativeSrc": "9315:18:26",
                              "nodeType": "YulIdentifier",
                              "src": "9315:18:26"
                            },
                            "nativeSrc": "9315:29:26",
                            "nodeType": "YulFunctionCall",
                            "src": "9315:29:26"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nativeSrc": "9305:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "9305:6:26"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_address",
                    "nativeSrc": "9164:186:26",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "9200:9:26",
                        "nodeType": "YulTypedName",
                        "src": "9200:9:26",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nativeSrc": "9211:7:26",
                        "nodeType": "YulTypedName",
                        "src": "9211:7:26",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nativeSrc": "9223:6:26",
                        "nodeType": "YulTypedName",
                        "src": "9223:6:26",
                        "type": ""
                      }
                    ],
                    "src": "9164:186:26"
                  },
                  {
                    "body": {
                      "nativeSrc": "9502:415:26",
                      "nodeType": "YulBlock",
                      "src": "9502:415:26",
                      "statements": [
                        {
                          "nativeSrc": "9512:27:26",
                          "nodeType": "YulAssignment",
                          "src": "9512:27:26",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "9524:9:26",
                                "nodeType": "YulIdentifier",
                                "src": "9524:9:26"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "9535:3:26",
                                "nodeType": "YulLiteral",
                                "src": "9535:3:26",
                                "type": "",
                                "value": "192"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "9520:3:26",
                              "nodeType": "YulIdentifier",
                              "src": "9520:3:26"
                            },
                            "nativeSrc": "9520:19:26",
                            "nodeType": "YulFunctionCall",
                            "src": "9520:19:26"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "9512:4:26",
                              "nodeType": "YulIdentifier",
                              "src": "9512:4:26"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "9555:9:26",
                                "nodeType": "YulIdentifier",
                                "src": "9555:9:26"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value0",
                                            "nativeSrc": "9586:6:26",
                                            "nodeType": "YulIdentifier",
                                            "src": "9586:6:26"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "mload",
                                          "nativeSrc": "9580:5:26",
                                          "nodeType": "YulIdentifier",
                                          "src": "9580:5:26"
                                        },
                                        "nativeSrc": "9580:13:26",
                                        "nodeType": "YulFunctionCall",
                                        "src": "9580:13:26"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nativeSrc": "9573:6:26",
                                      "nodeType": "YulIdentifier",
                                      "src": "9573:6:26"
                                    },
                                    "nativeSrc": "9573:21:26",
                                    "nodeType": "YulFunctionCall",
                                    "src": "9573:21:26"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nativeSrc": "9566:6:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "9566:6:26"
                                },
                                "nativeSrc": "9566:29:26",
                                "nodeType": "YulFunctionCall",
                                "src": "9566:29:26"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "9548:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "9548:6:26"
                            },
                            "nativeSrc": "9548:48:26",
                            "nodeType": "YulFunctionCall",
                            "src": "9548:48:26"
                          },
                          "nativeSrc": "9548:48:26",
                          "nodeType": "YulExpressionStatement",
                          "src": "9548:48:26"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "9616:9:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "9616:9:26"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "9627:4:26",
                                    "nodeType": "YulLiteral",
                                    "src": "9627:4:26",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "9612:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "9612:3:26"
                                },
                                "nativeSrc": "9612:20:26",
                                "nodeType": "YulFunctionCall",
                                "src": "9612:20:26"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nativeSrc": "9644:6:26",
                                        "nodeType": "YulIdentifier",
                                        "src": "9644:6:26"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "9652:4:26",
                                        "nodeType": "YulLiteral",
                                        "src": "9652:4:26",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "9640:3:26",
                                      "nodeType": "YulIdentifier",
                                      "src": "9640:3:26"
                                    },
                                    "nativeSrc": "9640:17:26",
                                    "nodeType": "YulFunctionCall",
                                    "src": "9640:17:26"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "9634:5:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "9634:5:26"
                                },
                                "nativeSrc": "9634:24:26",
                                "nodeType": "YulFunctionCall",
                                "src": "9634:24:26"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "9605:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "9605:6:26"
                            },
                            "nativeSrc": "9605:54:26",
                            "nodeType": "YulFunctionCall",
                            "src": "9605:54:26"
                          },
                          "nativeSrc": "9605:54:26",
                          "nodeType": "YulExpressionStatement",
                          "src": "9605:54:26"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "9679:9:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "9679:9:26"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "9690:4:26",
                                    "nodeType": "YulLiteral",
                                    "src": "9690:4:26",
                                    "type": "",
                                    "value": "0x40"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "9675:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "9675:3:26"
                                },
                                "nativeSrc": "9675:20:26",
                                "nodeType": "YulFunctionCall",
                                "src": "9675:20:26"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nativeSrc": "9707:6:26",
                                        "nodeType": "YulIdentifier",
                                        "src": "9707:6:26"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "9715:4:26",
                                        "nodeType": "YulLiteral",
                                        "src": "9715:4:26",
                                        "type": "",
                                        "value": "0x40"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "9703:3:26",
                                      "nodeType": "YulIdentifier",
                                      "src": "9703:3:26"
                                    },
                                    "nativeSrc": "9703:17:26",
                                    "nodeType": "YulFunctionCall",
                                    "src": "9703:17:26"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "9697:5:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "9697:5:26"
                                },
                                "nativeSrc": "9697:24:26",
                                "nodeType": "YulFunctionCall",
                                "src": "9697:24:26"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "9668:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "9668:6:26"
                            },
                            "nativeSrc": "9668:54:26",
                            "nodeType": "YulFunctionCall",
                            "src": "9668:54:26"
                          },
                          "nativeSrc": "9668:54:26",
                          "nodeType": "YulExpressionStatement",
                          "src": "9668:54:26"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "9742:9:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "9742:9:26"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "9753:4:26",
                                    "nodeType": "YulLiteral",
                                    "src": "9753:4:26",
                                    "type": "",
                                    "value": "0x60"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "9738:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "9738:3:26"
                                },
                                "nativeSrc": "9738:20:26",
                                "nodeType": "YulFunctionCall",
                                "src": "9738:20:26"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nativeSrc": "9770:6:26",
                                        "nodeType": "YulIdentifier",
                                        "src": "9770:6:26"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "9778:4:26",
                                        "nodeType": "YulLiteral",
                                        "src": "9778:4:26",
                                        "type": "",
                                        "value": "0x60"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "9766:3:26",
                                      "nodeType": "YulIdentifier",
                                      "src": "9766:3:26"
                                    },
                                    "nativeSrc": "9766:17:26",
                                    "nodeType": "YulFunctionCall",
                                    "src": "9766:17:26"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "9760:5:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "9760:5:26"
                                },
                                "nativeSrc": "9760:24:26",
                                "nodeType": "YulFunctionCall",
                                "src": "9760:24:26"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "9731:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "9731:6:26"
                            },
                            "nativeSrc": "9731:54:26",
                            "nodeType": "YulFunctionCall",
                            "src": "9731:54:26"
                          },
                          "nativeSrc": "9731:54:26",
                          "nodeType": "YulExpressionStatement",
                          "src": "9731:54:26"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "9805:9:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "9805:9:26"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "9816:4:26",
                                    "nodeType": "YulLiteral",
                                    "src": "9816:4:26",
                                    "type": "",
                                    "value": "0x80"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "9801:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "9801:3:26"
                                },
                                "nativeSrc": "9801:20:26",
                                "nodeType": "YulFunctionCall",
                                "src": "9801:20:26"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nativeSrc": "9833:6:26",
                                        "nodeType": "YulIdentifier",
                                        "src": "9833:6:26"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "9841:4:26",
                                        "nodeType": "YulLiteral",
                                        "src": "9841:4:26",
                                        "type": "",
                                        "value": "0x80"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "9829:3:26",
                                      "nodeType": "YulIdentifier",
                                      "src": "9829:3:26"
                                    },
                                    "nativeSrc": "9829:17:26",
                                    "nodeType": "YulFunctionCall",
                                    "src": "9829:17:26"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "9823:5:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "9823:5:26"
                                },
                                "nativeSrc": "9823:24:26",
                                "nodeType": "YulFunctionCall",
                                "src": "9823:24:26"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "9794:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "9794:6:26"
                            },
                            "nativeSrc": "9794:54:26",
                            "nodeType": "YulFunctionCall",
                            "src": "9794:54:26"
                          },
                          "nativeSrc": "9794:54:26",
                          "nodeType": "YulExpressionStatement",
                          "src": "9794:54:26"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "9868:9:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "9868:9:26"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "9879:4:26",
                                    "nodeType": "YulLiteral",
                                    "src": "9879:4:26",
                                    "type": "",
                                    "value": "0xa0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "9864:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "9864:3:26"
                                },
                                "nativeSrc": "9864:20:26",
                                "nodeType": "YulFunctionCall",
                                "src": "9864:20:26"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nativeSrc": "9896:6:26",
                                        "nodeType": "YulIdentifier",
                                        "src": "9896:6:26"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "9904:4:26",
                                        "nodeType": "YulLiteral",
                                        "src": "9904:4:26",
                                        "type": "",
                                        "value": "0xa0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "9892:3:26",
                                      "nodeType": "YulIdentifier",
                                      "src": "9892:3:26"
                                    },
                                    "nativeSrc": "9892:17:26",
                                    "nodeType": "YulFunctionCall",
                                    "src": "9892:17:26"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "9886:5:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "9886:5:26"
                                },
                                "nativeSrc": "9886:24:26",
                                "nodeType": "YulFunctionCall",
                                "src": "9886:24:26"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "9857:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "9857:6:26"
                            },
                            "nativeSrc": "9857:54:26",
                            "nodeType": "YulFunctionCall",
                            "src": "9857:54:26"
                          },
                          "nativeSrc": "9857:54:26",
                          "nodeType": "YulExpressionStatement",
                          "src": "9857:54:26"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_struct$_Proof_$3477_memory_ptr__to_t_struct$_Proof_$3477_memory_ptr__fromStack_reversed",
                    "nativeSrc": "9355:562:26",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "9471:9:26",
                        "nodeType": "YulTypedName",
                        "src": "9471:9:26",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "9482:6:26",
                        "nodeType": "YulTypedName",
                        "src": "9482:6:26",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "9493:4:26",
                        "nodeType": "YulTypedName",
                        "src": "9493:4:26",
                        "type": ""
                      }
                    ],
                    "src": "9355:562:26"
                  },
                  {
                    "body": {
                      "nativeSrc": "10002:242:26",
                      "nodeType": "YulBlock",
                      "src": "10002:242:26",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "10048:16:26",
                            "nodeType": "YulBlock",
                            "src": "10048:16:26",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "10057:1:26",
                                      "nodeType": "YulLiteral",
                                      "src": "10057:1:26",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "10060:1:26",
                                      "nodeType": "YulLiteral",
                                      "src": "10060:1:26",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "10050:6:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "10050:6:26"
                                  },
                                  "nativeSrc": "10050:12:26",
                                  "nodeType": "YulFunctionCall",
                                  "src": "10050:12:26"
                                },
                                "nativeSrc": "10050:12:26",
                                "nodeType": "YulExpressionStatement",
                                "src": "10050:12:26"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "10023:7:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "10023:7:26"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "10032:9:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "10032:9:26"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "10019:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "10019:3:26"
                                },
                                "nativeSrc": "10019:23:26",
                                "nodeType": "YulFunctionCall",
                                "src": "10019:23:26"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "10044:2:26",
                                "nodeType": "YulLiteral",
                                "src": "10044:2:26",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nativeSrc": "10015:3:26",
                              "nodeType": "YulIdentifier",
                              "src": "10015:3:26"
                            },
                            "nativeSrc": "10015:32:26",
                            "nodeType": "YulFunctionCall",
                            "src": "10015:32:26"
                          },
                          "nativeSrc": "10012:52:26",
                          "nodeType": "YulIf",
                          "src": "10012:52:26"
                        },
                        {
                          "nativeSrc": "10073:37:26",
                          "nodeType": "YulVariableDeclaration",
                          "src": "10073:37:26",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "10100:9:26",
                                "nodeType": "YulIdentifier",
                                "src": "10100:9:26"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nativeSrc": "10087:12:26",
                              "nodeType": "YulIdentifier",
                              "src": "10087:12:26"
                            },
                            "nativeSrc": "10087:23:26",
                            "nodeType": "YulFunctionCall",
                            "src": "10087:23:26"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nativeSrc": "10077:6:26",
                              "nodeType": "YulTypedName",
                              "src": "10077:6:26",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "10153:16:26",
                            "nodeType": "YulBlock",
                            "src": "10153:16:26",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "10162:1:26",
                                      "nodeType": "YulLiteral",
                                      "src": "10162:1:26",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "10165:1:26",
                                      "nodeType": "YulLiteral",
                                      "src": "10165:1:26",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "10155:6:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "10155:6:26"
                                  },
                                  "nativeSrc": "10155:12:26",
                                  "nodeType": "YulFunctionCall",
                                  "src": "10155:12:26"
                                },
                                "nativeSrc": "10155:12:26",
                                "nodeType": "YulExpressionStatement",
                                "src": "10155:12:26"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nativeSrc": "10125:6:26",
                                "nodeType": "YulIdentifier",
                                "src": "10125:6:26"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "10133:18:26",
                                "nodeType": "YulLiteral",
                                "src": "10133:18:26",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nativeSrc": "10122:2:26",
                              "nodeType": "YulIdentifier",
                              "src": "10122:2:26"
                            },
                            "nativeSrc": "10122:30:26",
                            "nodeType": "YulFunctionCall",
                            "src": "10122:30:26"
                          },
                          "nativeSrc": "10119:50:26",
                          "nodeType": "YulIf",
                          "src": "10119:50:26"
                        },
                        {
                          "nativeSrc": "10178:60:26",
                          "nodeType": "YulAssignment",
                          "src": "10178:60:26",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "10210:9:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "10210:9:26"
                                  },
                                  {
                                    "name": "offset",
                                    "nativeSrc": "10221:6:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "10221:6:26"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "10206:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "10206:3:26"
                                },
                                "nativeSrc": "10206:22:26",
                                "nodeType": "YulFunctionCall",
                                "src": "10206:22:26"
                              },
                              {
                                "name": "dataEnd",
                                "nativeSrc": "10230:7:26",
                                "nodeType": "YulIdentifier",
                                "src": "10230:7:26"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_string",
                              "nativeSrc": "10188:17:26",
                              "nodeType": "YulIdentifier",
                              "src": "10188:17:26"
                            },
                            "nativeSrc": "10188:50:26",
                            "nodeType": "YulFunctionCall",
                            "src": "10188:50:26"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nativeSrc": "10178:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "10178:6:26"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_string_memory_ptr",
                    "nativeSrc": "9922:322:26",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "9968:9:26",
                        "nodeType": "YulTypedName",
                        "src": "9968:9:26",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nativeSrc": "9979:7:26",
                        "nodeType": "YulTypedName",
                        "src": "9979:7:26",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nativeSrc": "9991:6:26",
                        "nodeType": "YulTypedName",
                        "src": "9991:6:26",
                        "type": ""
                      }
                    ],
                    "src": "9922:322:26"
                  },
                  {
                    "body": {
                      "nativeSrc": "10410:484:26",
                      "nodeType": "YulBlock",
                      "src": "10410:484:26",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "10427:9:26",
                                "nodeType": "YulIdentifier",
                                "src": "10427:9:26"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "10438:2:26",
                                "nodeType": "YulLiteral",
                                "src": "10438:2:26",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "10420:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "10420:6:26"
                            },
                            "nativeSrc": "10420:21:26",
                            "nodeType": "YulFunctionCall",
                            "src": "10420:21:26"
                          },
                          "nativeSrc": "10420:21:26",
                          "nodeType": "YulExpressionStatement",
                          "src": "10420:21:26"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "10461:9:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "10461:9:26"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "10472:2:26",
                                    "nodeType": "YulLiteral",
                                    "src": "10472:2:26",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "10457:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "10457:3:26"
                                },
                                "nativeSrc": "10457:18:26",
                                "nodeType": "YulFunctionCall",
                                "src": "10457:18:26"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nativeSrc": "10483:6:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "10483:6:26"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "10477:5:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "10477:5:26"
                                },
                                "nativeSrc": "10477:13:26",
                                "nodeType": "YulFunctionCall",
                                "src": "10477:13:26"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "10450:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "10450:6:26"
                            },
                            "nativeSrc": "10450:41:26",
                            "nodeType": "YulFunctionCall",
                            "src": "10450:41:26"
                          },
                          "nativeSrc": "10450:41:26",
                          "nodeType": "YulExpressionStatement",
                          "src": "10450:41:26"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "10511:9:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "10511:9:26"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "10522:2:26",
                                    "nodeType": "YulLiteral",
                                    "src": "10522:2:26",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "10507:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "10507:3:26"
                                },
                                "nativeSrc": "10507:18:26",
                                "nodeType": "YulFunctionCall",
                                "src": "10507:18:26"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value0",
                                            "nativeSrc": "10541:6:26",
                                            "nodeType": "YulIdentifier",
                                            "src": "10541:6:26"
                                          },
                                          {
                                            "kind": "number",
                                            "nativeSrc": "10549:2:26",
                                            "nodeType": "YulLiteral",
                                            "src": "10549:2:26",
                                            "type": "",
                                            "value": "32"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nativeSrc": "10537:3:26",
                                          "nodeType": "YulIdentifier",
                                          "src": "10537:3:26"
                                        },
                                        "nativeSrc": "10537:15:26",
                                        "nodeType": "YulFunctionCall",
                                        "src": "10537:15:26"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mload",
                                      "nativeSrc": "10531:5:26",
                                      "nodeType": "YulIdentifier",
                                      "src": "10531:5:26"
                                    },
                                    "nativeSrc": "10531:22:26",
                                    "nodeType": "YulFunctionCall",
                                    "src": "10531:22:26"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nativeSrc": "10563:3:26",
                                            "nodeType": "YulLiteral",
                                            "src": "10563:3:26",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nativeSrc": "10568:1:26",
                                            "nodeType": "YulLiteral",
                                            "src": "10568:1:26",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nativeSrc": "10559:3:26",
                                          "nodeType": "YulIdentifier",
                                          "src": "10559:3:26"
                                        },
                                        "nativeSrc": "10559:11:26",
                                        "nodeType": "YulFunctionCall",
                                        "src": "10559:11:26"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "10572:1:26",
                                        "nodeType": "YulLiteral",
                                        "src": "10572:1:26",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nativeSrc": "10555:3:26",
                                      "nodeType": "YulIdentifier",
                                      "src": "10555:3:26"
                                    },
                                    "nativeSrc": "10555:19:26",
                                    "nodeType": "YulFunctionCall",
                                    "src": "10555:19:26"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nativeSrc": "10527:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "10527:3:26"
                                },
                                "nativeSrc": "10527:48:26",
                                "nodeType": "YulFunctionCall",
                                "src": "10527:48:26"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "10500:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "10500:6:26"
                            },
                            "nativeSrc": "10500:76:26",
                            "nodeType": "YulFunctionCall",
                            "src": "10500:76:26"
                          },
                          "nativeSrc": "10500:76:26",
                          "nodeType": "YulExpressionStatement",
                          "src": "10500:76:26"
                        },
                        {
                          "nativeSrc": "10585:42:26",
                          "nodeType": "YulVariableDeclaration",
                          "src": "10585:42:26",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nativeSrc": "10615:6:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "10615:6:26"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "10623:2:26",
                                    "nodeType": "YulLiteral",
                                    "src": "10623:2:26",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "10611:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "10611:3:26"
                                },
                                "nativeSrc": "10611:15:26",
                                "nodeType": "YulFunctionCall",
                                "src": "10611:15:26"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nativeSrc": "10605:5:26",
                              "nodeType": "YulIdentifier",
                              "src": "10605:5:26"
                            },
                            "nativeSrc": "10605:22:26",
                            "nodeType": "YulFunctionCall",
                            "src": "10605:22:26"
                          },
                          "variables": [
                            {
                              "name": "memberValue0",
                              "nativeSrc": "10589:12:26",
                              "nodeType": "YulTypedName",
                              "src": "10589:12:26",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "10647:9:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "10647:9:26"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "10658:2:26",
                                    "nodeType": "YulLiteral",
                                    "src": "10658:2:26",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "10643:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "10643:3:26"
                                },
                                "nativeSrc": "10643:18:26",
                                "nodeType": "YulFunctionCall",
                                "src": "10643:18:26"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "10663:4:26",
                                "nodeType": "YulLiteral",
                                "src": "10663:4:26",
                                "type": "",
                                "value": "0xa0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "10636:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "10636:6:26"
                            },
                            "nativeSrc": "10636:32:26",
                            "nodeType": "YulFunctionCall",
                            "src": "10636:32:26"
                          },
                          "nativeSrc": "10636:32:26",
                          "nodeType": "YulExpressionStatement",
                          "src": "10636:32:26"
                        },
                        {
                          "nativeSrc": "10677:66:26",
                          "nodeType": "YulVariableDeclaration",
                          "src": "10677:66:26",
                          "value": {
                            "arguments": [
                              {
                                "name": "memberValue0",
                                "nativeSrc": "10709:12:26",
                                "nodeType": "YulIdentifier",
                                "src": "10709:12:26"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "10727:9:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "10727:9:26"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "10738:3:26",
                                    "nodeType": "YulLiteral",
                                    "src": "10738:3:26",
                                    "type": "",
                                    "value": "192"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "10723:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "10723:3:26"
                                },
                                "nativeSrc": "10723:19:26",
                                "nodeType": "YulFunctionCall",
                                "src": "10723:19:26"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_string",
                              "nativeSrc": "10691:17:26",
                              "nodeType": "YulIdentifier",
                              "src": "10691:17:26"
                            },
                            "nativeSrc": "10691:52:26",
                            "nodeType": "YulFunctionCall",
                            "src": "10691:52:26"
                          },
                          "variables": [
                            {
                              "name": "tail_1",
                              "nativeSrc": "10681:6:26",
                              "nodeType": "YulTypedName",
                              "src": "10681:6:26",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "10763:9:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "10763:9:26"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "10774:3:26",
                                    "nodeType": "YulLiteral",
                                    "src": "10774:3:26",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "10759:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "10759:3:26"
                                },
                                "nativeSrc": "10759:19:26",
                                "nodeType": "YulFunctionCall",
                                "src": "10759:19:26"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nativeSrc": "10790:6:26",
                                        "nodeType": "YulIdentifier",
                                        "src": "10790:6:26"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "10798:2:26",
                                        "nodeType": "YulLiteral",
                                        "src": "10798:2:26",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "10786:3:26",
                                      "nodeType": "YulIdentifier",
                                      "src": "10786:3:26"
                                    },
                                    "nativeSrc": "10786:15:26",
                                    "nodeType": "YulFunctionCall",
                                    "src": "10786:15:26"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "10780:5:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "10780:5:26"
                                },
                                "nativeSrc": "10780:22:26",
                                "nodeType": "YulFunctionCall",
                                "src": "10780:22:26"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "10752:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "10752:6:26"
                            },
                            "nativeSrc": "10752:51:26",
                            "nodeType": "YulFunctionCall",
                            "src": "10752:51:26"
                          },
                          "nativeSrc": "10752:51:26",
                          "nodeType": "YulExpressionStatement",
                          "src": "10752:51:26"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "10823:9:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "10823:9:26"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "10834:4:26",
                                    "nodeType": "YulLiteral",
                                    "src": "10834:4:26",
                                    "type": "",
                                    "value": "0xa0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "10819:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "10819:3:26"
                                },
                                "nativeSrc": "10819:20:26",
                                "nodeType": "YulFunctionCall",
                                "src": "10819:20:26"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nativeSrc": "10851:6:26",
                                        "nodeType": "YulIdentifier",
                                        "src": "10851:6:26"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "10859:3:26",
                                        "nodeType": "YulLiteral",
                                        "src": "10859:3:26",
                                        "type": "",
                                        "value": "128"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "10847:3:26",
                                      "nodeType": "YulIdentifier",
                                      "src": "10847:3:26"
                                    },
                                    "nativeSrc": "10847:16:26",
                                    "nodeType": "YulFunctionCall",
                                    "src": "10847:16:26"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "10841:5:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "10841:5:26"
                                },
                                "nativeSrc": "10841:23:26",
                                "nodeType": "YulFunctionCall",
                                "src": "10841:23:26"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "10812:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "10812:6:26"
                            },
                            "nativeSrc": "10812:53:26",
                            "nodeType": "YulFunctionCall",
                            "src": "10812:53:26"
                          },
                          "nativeSrc": "10812:53:26",
                          "nodeType": "YulExpressionStatement",
                          "src": "10812:53:26"
                        },
                        {
                          "nativeSrc": "10874:14:26",
                          "nodeType": "YulAssignment",
                          "src": "10874:14:26",
                          "value": {
                            "name": "tail_1",
                            "nativeSrc": "10882:6:26",
                            "nodeType": "YulIdentifier",
                            "src": "10882:6:26"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "10874:4:26",
                              "nodeType": "YulIdentifier",
                              "src": "10874:4:26"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_struct$_FileResponse_$3510_memory_ptr__to_t_struct$_FileResponse_$3510_memory_ptr__fromStack_reversed",
                    "nativeSrc": "10249:645:26",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "10379:9:26",
                        "nodeType": "YulTypedName",
                        "src": "10379:9:26",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "10390:6:26",
                        "nodeType": "YulTypedName",
                        "src": "10390:6:26",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "10401:4:26",
                        "nodeType": "YulTypedName",
                        "src": "10401:4:26",
                        "type": ""
                      }
                    ],
                    "src": "10249:645:26"
                  },
                  {
                    "body": {
                      "nativeSrc": "10946:185:26",
                      "nodeType": "YulBlock",
                      "src": "10946:185:26",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "10985:111:26",
                            "nodeType": "YulBlock",
                            "src": "10985:111:26",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "11006:1:26",
                                      "nodeType": "YulLiteral",
                                      "src": "11006:1:26",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nativeSrc": "11013:3:26",
                                          "nodeType": "YulLiteral",
                                          "src": "11013:3:26",
                                          "type": "",
                                          "value": "224"
                                        },
                                        {
                                          "kind": "number",
                                          "nativeSrc": "11018:10:26",
                                          "nodeType": "YulLiteral",
                                          "src": "11018:10:26",
                                          "type": "",
                                          "value": "0x4e487b71"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shl",
                                        "nativeSrc": "11009:3:26",
                                        "nodeType": "YulIdentifier",
                                        "src": "11009:3:26"
                                      },
                                      "nativeSrc": "11009:20:26",
                                      "nodeType": "YulFunctionCall",
                                      "src": "11009:20:26"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nativeSrc": "10999:6:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "10999:6:26"
                                  },
                                  "nativeSrc": "10999:31:26",
                                  "nodeType": "YulFunctionCall",
                                  "src": "10999:31:26"
                                },
                                "nativeSrc": "10999:31:26",
                                "nodeType": "YulExpressionStatement",
                                "src": "10999:31:26"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "11050:1:26",
                                      "nodeType": "YulLiteral",
                                      "src": "11050:1:26",
                                      "type": "",
                                      "value": "4"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "11053:4:26",
                                      "nodeType": "YulLiteral",
                                      "src": "11053:4:26",
                                      "type": "",
                                      "value": "0x11"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nativeSrc": "11043:6:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "11043:6:26"
                                  },
                                  "nativeSrc": "11043:15:26",
                                  "nodeType": "YulFunctionCall",
                                  "src": "11043:15:26"
                                },
                                "nativeSrc": "11043:15:26",
                                "nodeType": "YulExpressionStatement",
                                "src": "11043:15:26"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "11078:1:26",
                                      "nodeType": "YulLiteral",
                                      "src": "11078:1:26",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "11081:4:26",
                                      "nodeType": "YulLiteral",
                                      "src": "11081:4:26",
                                      "type": "",
                                      "value": "0x24"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "11071:6:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "11071:6:26"
                                  },
                                  "nativeSrc": "11071:15:26",
                                  "nodeType": "YulFunctionCall",
                                  "src": "11071:15:26"
                                },
                                "nativeSrc": "11071:15:26",
                                "nodeType": "YulExpressionStatement",
                                "src": "11071:15:26"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "10962:5:26",
                                "nodeType": "YulIdentifier",
                                "src": "10962:5:26"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nativeSrc": "10973:1:26",
                                    "nodeType": "YulLiteral",
                                    "src": "10973:1:26",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nativeSrc": "10969:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "10969:3:26"
                                },
                                "nativeSrc": "10969:6:26",
                                "nodeType": "YulFunctionCall",
                                "src": "10969:6:26"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nativeSrc": "10959:2:26",
                              "nodeType": "YulIdentifier",
                              "src": "10959:2:26"
                            },
                            "nativeSrc": "10959:17:26",
                            "nodeType": "YulFunctionCall",
                            "src": "10959:17:26"
                          },
                          "nativeSrc": "10956:140:26",
                          "nodeType": "YulIf",
                          "src": "10956:140:26"
                        },
                        {
                          "nativeSrc": "11105:20:26",
                          "nodeType": "YulAssignment",
                          "src": "11105:20:26",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "11116:5:26",
                                "nodeType": "YulIdentifier",
                                "src": "11116:5:26"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "11123:1:26",
                                "nodeType": "YulLiteral",
                                "src": "11123:1:26",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "11112:3:26",
                              "nodeType": "YulIdentifier",
                              "src": "11112:3:26"
                            },
                            "nativeSrc": "11112:13:26",
                            "nodeType": "YulFunctionCall",
                            "src": "11112:13:26"
                          },
                          "variableNames": [
                            {
                              "name": "ret",
                              "nativeSrc": "11105:3:26",
                              "nodeType": "YulIdentifier",
                              "src": "11105:3:26"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "increment_t_uint256",
                    "nativeSrc": "10899:232:26",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "10928:5:26",
                        "nodeType": "YulTypedName",
                        "src": "10928:5:26",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "ret",
                        "nativeSrc": "10938:3:26",
                        "nodeType": "YulTypedName",
                        "src": "10938:3:26",
                        "type": ""
                      }
                    ],
                    "src": "10899:232:26"
                  },
                  {
                    "body": {
                      "nativeSrc": "11191:325:26",
                      "nodeType": "YulBlock",
                      "src": "11191:325:26",
                      "statements": [
                        {
                          "nativeSrc": "11201:22:26",
                          "nodeType": "YulAssignment",
                          "src": "11201:22:26",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "11215:1:26",
                                "nodeType": "YulLiteral",
                                "src": "11215:1:26",
                                "type": "",
                                "value": "1"
                              },
                              {
                                "name": "data",
                                "nativeSrc": "11218:4:26",
                                "nodeType": "YulIdentifier",
                                "src": "11218:4:26"
                              }
                            ],
                            "functionName": {
                              "name": "shr",
                              "nativeSrc": "11211:3:26",
                              "nodeType": "YulIdentifier",
                              "src": "11211:3:26"
                            },
                            "nativeSrc": "11211:12:26",
                            "nodeType": "YulFunctionCall",
                            "src": "11211:12:26"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nativeSrc": "11201:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "11201:6:26"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "11232:38:26",
                          "nodeType": "YulVariableDeclaration",
                          "src": "11232:38:26",
                          "value": {
                            "arguments": [
                              {
                                "name": "data",
                                "nativeSrc": "11262:4:26",
                                "nodeType": "YulIdentifier",
                                "src": "11262:4:26"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "11268:1:26",
                                "nodeType": "YulLiteral",
                                "src": "11268:1:26",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nativeSrc": "11258:3:26",
                              "nodeType": "YulIdentifier",
                              "src": "11258:3:26"
                            },
                            "nativeSrc": "11258:12:26",
                            "nodeType": "YulFunctionCall",
                            "src": "11258:12:26"
                          },
                          "variables": [
                            {
                              "name": "outOfPlaceEncoding",
                              "nativeSrc": "11236:18:26",
                              "nodeType": "YulTypedName",
                              "src": "11236:18:26",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "11309:31:26",
                            "nodeType": "YulBlock",
                            "src": "11309:31:26",
                            "statements": [
                              {
                                "nativeSrc": "11311:27:26",
                                "nodeType": "YulAssignment",
                                "src": "11311:27:26",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "length",
                                      "nativeSrc": "11325:6:26",
                                      "nodeType": "YulIdentifier",
                                      "src": "11325:6:26"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "11333:4:26",
                                      "nodeType": "YulLiteral",
                                      "src": "11333:4:26",
                                      "type": "",
                                      "value": "0x7f"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nativeSrc": "11321:3:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "11321:3:26"
                                  },
                                  "nativeSrc": "11321:17:26",
                                  "nodeType": "YulFunctionCall",
                                  "src": "11321:17:26"
                                },
                                "variableNames": [
                                  {
                                    "name": "length",
                                    "nativeSrc": "11311:6:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "11311:6:26"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nativeSrc": "11289:18:26",
                                "nodeType": "YulIdentifier",
                                "src": "11289:18:26"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nativeSrc": "11282:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "11282:6:26"
                            },
                            "nativeSrc": "11282:26:26",
                            "nodeType": "YulFunctionCall",
                            "src": "11282:26:26"
                          },
                          "nativeSrc": "11279:61:26",
                          "nodeType": "YulIf",
                          "src": "11279:61:26"
                        },
                        {
                          "body": {
                            "nativeSrc": "11399:111:26",
                            "nodeType": "YulBlock",
                            "src": "11399:111:26",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "11420:1:26",
                                      "nodeType": "YulLiteral",
                                      "src": "11420:1:26",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nativeSrc": "11427:3:26",
                                          "nodeType": "YulLiteral",
                                          "src": "11427:3:26",
                                          "type": "",
                                          "value": "224"
                                        },
                                        {
                                          "kind": "number",
                                          "nativeSrc": "11432:10:26",
                                          "nodeType": "YulLiteral",
                                          "src": "11432:10:26",
                                          "type": "",
                                          "value": "0x4e487b71"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shl",
                                        "nativeSrc": "11423:3:26",
                                        "nodeType": "YulIdentifier",
                                        "src": "11423:3:26"
                                      },
                                      "nativeSrc": "11423:20:26",
                                      "nodeType": "YulFunctionCall",
                                      "src": "11423:20:26"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nativeSrc": "11413:6:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "11413:6:26"
                                  },
                                  "nativeSrc": "11413:31:26",
                                  "nodeType": "YulFunctionCall",
                                  "src": "11413:31:26"
                                },
                                "nativeSrc": "11413:31:26",
                                "nodeType": "YulExpressionStatement",
                                "src": "11413:31:26"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "11464:1:26",
                                      "nodeType": "YulLiteral",
                                      "src": "11464:1:26",
                                      "type": "",
                                      "value": "4"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "11467:4:26",
                                      "nodeType": "YulLiteral",
                                      "src": "11467:4:26",
                                      "type": "",
                                      "value": "0x22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nativeSrc": "11457:6:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "11457:6:26"
                                  },
                                  "nativeSrc": "11457:15:26",
                                  "nodeType": "YulFunctionCall",
                                  "src": "11457:15:26"
                                },
                                "nativeSrc": "11457:15:26",
                                "nodeType": "YulExpressionStatement",
                                "src": "11457:15:26"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "11492:1:26",
                                      "nodeType": "YulLiteral",
                                      "src": "11492:1:26",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "11495:4:26",
                                      "nodeType": "YulLiteral",
                                      "src": "11495:4:26",
                                      "type": "",
                                      "value": "0x24"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "11485:6:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "11485:6:26"
                                  },
                                  "nativeSrc": "11485:15:26",
                                  "nodeType": "YulFunctionCall",
                                  "src": "11485:15:26"
                                },
                                "nativeSrc": "11485:15:26",
                                "nodeType": "YulExpressionStatement",
                                "src": "11485:15:26"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nativeSrc": "11355:18:26",
                                "nodeType": "YulIdentifier",
                                "src": "11355:18:26"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nativeSrc": "11378:6:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "11378:6:26"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "11386:2:26",
                                    "nodeType": "YulLiteral",
                                    "src": "11386:2:26",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nativeSrc": "11375:2:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "11375:2:26"
                                },
                                "nativeSrc": "11375:14:26",
                                "nodeType": "YulFunctionCall",
                                "src": "11375:14:26"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nativeSrc": "11352:2:26",
                              "nodeType": "YulIdentifier",
                              "src": "11352:2:26"
                            },
                            "nativeSrc": "11352:38:26",
                            "nodeType": "YulFunctionCall",
                            "src": "11352:38:26"
                          },
                          "nativeSrc": "11349:161:26",
                          "nodeType": "YulIf",
                          "src": "11349:161:26"
                        }
                      ]
                    },
                    "name": "extract_byte_array_length",
                    "nativeSrc": "11136:380:26",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "data",
                        "nativeSrc": "11171:4:26",
                        "nodeType": "YulTypedName",
                        "src": "11171:4:26",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "length",
                        "nativeSrc": "11180:6:26",
                        "nodeType": "YulTypedName",
                        "src": "11180:6:26",
                        "type": ""
                      }
                    ],
                    "src": "11136:380:26"
                  },
                  {
                    "body": {
                      "nativeSrc": "11629:101:26",
                      "nodeType": "YulBlock",
                      "src": "11629:101:26",
                      "statements": [
                        {
                          "nativeSrc": "11639:26:26",
                          "nodeType": "YulAssignment",
                          "src": "11639:26:26",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "11651:9:26",
                                "nodeType": "YulIdentifier",
                                "src": "11651:9:26"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "11662:2:26",
                                "nodeType": "YulLiteral",
                                "src": "11662:2:26",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "11647:3:26",
                              "nodeType": "YulIdentifier",
                              "src": "11647:3:26"
                            },
                            "nativeSrc": "11647:18:26",
                            "nodeType": "YulFunctionCall",
                            "src": "11647:18:26"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "11639:4:26",
                              "nodeType": "YulIdentifier",
                              "src": "11639:4:26"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "11681:9:26",
                                "nodeType": "YulIdentifier",
                                "src": "11681:9:26"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nativeSrc": "11696:6:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "11696:6:26"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "11704:18:26",
                                    "nodeType": "YulLiteral",
                                    "src": "11704:18:26",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nativeSrc": "11692:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "11692:3:26"
                                },
                                "nativeSrc": "11692:31:26",
                                "nodeType": "YulFunctionCall",
                                "src": "11692:31:26"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "11674:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "11674:6:26"
                            },
                            "nativeSrc": "11674:50:26",
                            "nodeType": "YulFunctionCall",
                            "src": "11674:50:26"
                          },
                          "nativeSrc": "11674:50:26",
                          "nodeType": "YulExpressionStatement",
                          "src": "11674:50:26"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_rational_1_by_1__to_t_uint64__fromStack_reversed",
                    "nativeSrc": "11521:209:26",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "11598:9:26",
                        "nodeType": "YulTypedName",
                        "src": "11598:9:26",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "11609:6:26",
                        "nodeType": "YulTypedName",
                        "src": "11609:6:26",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "11620:4:26",
                        "nodeType": "YulTypedName",
                        "src": "11620:4:26",
                        "type": ""
                      }
                    ],
                    "src": "11521:209:26"
                  },
                  {
                    "body": {
                      "nativeSrc": "11791:65:26",
                      "nodeType": "YulBlock",
                      "src": "11791:65:26",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "11808:1:26",
                                "nodeType": "YulLiteral",
                                "src": "11808:1:26",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "name": "ptr",
                                "nativeSrc": "11811:3:26",
                                "nodeType": "YulIdentifier",
                                "src": "11811:3:26"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "11801:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "11801:6:26"
                            },
                            "nativeSrc": "11801:14:26",
                            "nodeType": "YulFunctionCall",
                            "src": "11801:14:26"
                          },
                          "nativeSrc": "11801:14:26",
                          "nodeType": "YulExpressionStatement",
                          "src": "11801:14:26"
                        },
                        {
                          "nativeSrc": "11824:26:26",
                          "nodeType": "YulAssignment",
                          "src": "11824:26:26",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "11842:1:26",
                                "nodeType": "YulLiteral",
                                "src": "11842:1:26",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "11845:4:26",
                                "nodeType": "YulLiteral",
                                "src": "11845:4:26",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "keccak256",
                              "nativeSrc": "11832:9:26",
                              "nodeType": "YulIdentifier",
                              "src": "11832:9:26"
                            },
                            "nativeSrc": "11832:18:26",
                            "nodeType": "YulFunctionCall",
                            "src": "11832:18:26"
                          },
                          "variableNames": [
                            {
                              "name": "data",
                              "nativeSrc": "11824:4:26",
                              "nodeType": "YulIdentifier",
                              "src": "11824:4:26"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_dataslot_string_storage",
                    "nativeSrc": "11735:121:26",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "ptr",
                        "nativeSrc": "11774:3:26",
                        "nodeType": "YulTypedName",
                        "src": "11774:3:26",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "data",
                        "nativeSrc": "11782:4:26",
                        "nodeType": "YulTypedName",
                        "src": "11782:4:26",
                        "type": ""
                      }
                    ],
                    "src": "11735:121:26"
                  },
                  {
                    "body": {
                      "nativeSrc": "11942:462:26",
                      "nodeType": "YulBlock",
                      "src": "11942:462:26",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "11975:423:26",
                            "nodeType": "YulBlock",
                            "src": "11975:423:26",
                            "statements": [
                              {
                                "nativeSrc": "11989:11:26",
                                "nodeType": "YulVariableDeclaration",
                                "src": "11989:11:26",
                                "value": {
                                  "kind": "number",
                                  "nativeSrc": "11999:1:26",
                                  "nodeType": "YulLiteral",
                                  "src": "11999:1:26",
                                  "type": "",
                                  "value": "0"
                                },
                                "variables": [
                                  {
                                    "name": "_1",
                                    "nativeSrc": "11993:2:26",
                                    "nodeType": "YulTypedName",
                                    "src": "11993:2:26",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "12020:1:26",
                                      "nodeType": "YulLiteral",
                                      "src": "12020:1:26",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "name": "array",
                                      "nativeSrc": "12023:5:26",
                                      "nodeType": "YulIdentifier",
                                      "src": "12023:5:26"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nativeSrc": "12013:6:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "12013:6:26"
                                  },
                                  "nativeSrc": "12013:16:26",
                                  "nodeType": "YulFunctionCall",
                                  "src": "12013:16:26"
                                },
                                "nativeSrc": "12013:16:26",
                                "nodeType": "YulExpressionStatement",
                                "src": "12013:16:26"
                              },
                              {
                                "nativeSrc": "12042:30:26",
                                "nodeType": "YulVariableDeclaration",
                                "src": "12042:30:26",
                                "value": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "12064:1:26",
                                      "nodeType": "YulLiteral",
                                      "src": "12064:1:26",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "12067:4:26",
                                      "nodeType": "YulLiteral",
                                      "src": "12067:4:26",
                                      "type": "",
                                      "value": "0x20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "keccak256",
                                    "nativeSrc": "12054:9:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "12054:9:26"
                                  },
                                  "nativeSrc": "12054:18:26",
                                  "nodeType": "YulFunctionCall",
                                  "src": "12054:18:26"
                                },
                                "variables": [
                                  {
                                    "name": "data",
                                    "nativeSrc": "12046:4:26",
                                    "nodeType": "YulTypedName",
                                    "src": "12046:4:26",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "nativeSrc": "12085:57:26",
                                "nodeType": "YulVariableDeclaration",
                                "src": "12085:57:26",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "data",
                                      "nativeSrc": "12108:4:26",
                                      "nodeType": "YulIdentifier",
                                      "src": "12108:4:26"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nativeSrc": "12118:1:26",
                                          "nodeType": "YulLiteral",
                                          "src": "12118:1:26",
                                          "type": "",
                                          "value": "5"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "startIndex",
                                              "nativeSrc": "12125:10:26",
                                              "nodeType": "YulIdentifier",
                                              "src": "12125:10:26"
                                            },
                                            {
                                              "kind": "number",
                                              "nativeSrc": "12137:2:26",
                                              "nodeType": "YulLiteral",
                                              "src": "12137:2:26",
                                              "type": "",
                                              "value": "31"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nativeSrc": "12121:3:26",
                                            "nodeType": "YulIdentifier",
                                            "src": "12121:3:26"
                                          },
                                          "nativeSrc": "12121:19:26",
                                          "nodeType": "YulFunctionCall",
                                          "src": "12121:19:26"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shr",
                                        "nativeSrc": "12114:3:26",
                                        "nodeType": "YulIdentifier",
                                        "src": "12114:3:26"
                                      },
                                      "nativeSrc": "12114:27:26",
                                      "nodeType": "YulFunctionCall",
                                      "src": "12114:27:26"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "12104:3:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "12104:3:26"
                                  },
                                  "nativeSrc": "12104:38:26",
                                  "nodeType": "YulFunctionCall",
                                  "src": "12104:38:26"
                                },
                                "variables": [
                                  {
                                    "name": "deleteStart",
                                    "nativeSrc": "12089:11:26",
                                    "nodeType": "YulTypedName",
                                    "src": "12089:11:26",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "body": {
                                  "nativeSrc": "12179:23:26",
                                  "nodeType": "YulBlock",
                                  "src": "12179:23:26",
                                  "statements": [
                                    {
                                      "nativeSrc": "12181:19:26",
                                      "nodeType": "YulAssignment",
                                      "src": "12181:19:26",
                                      "value": {
                                        "name": "data",
                                        "nativeSrc": "12196:4:26",
                                        "nodeType": "YulIdentifier",
                                        "src": "12196:4:26"
                                      },
                                      "variableNames": [
                                        {
                                          "name": "deleteStart",
                                          "nativeSrc": "12181:11:26",
                                          "nodeType": "YulIdentifier",
                                          "src": "12181:11:26"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "condition": {
                                  "arguments": [
                                    {
                                      "name": "startIndex",
                                      "nativeSrc": "12161:10:26",
                                      "nodeType": "YulIdentifier",
                                      "src": "12161:10:26"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "12173:4:26",
                                      "nodeType": "YulLiteral",
                                      "src": "12173:4:26",
                                      "type": "",
                                      "value": "0x20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "lt",
                                    "nativeSrc": "12158:2:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "12158:2:26"
                                  },
                                  "nativeSrc": "12158:20:26",
                                  "nodeType": "YulFunctionCall",
                                  "src": "12158:20:26"
                                },
                                "nativeSrc": "12155:47:26",
                                "nodeType": "YulIf",
                                "src": "12155:47:26"
                              },
                              {
                                "nativeSrc": "12215:41:26",
                                "nodeType": "YulVariableDeclaration",
                                "src": "12215:41:26",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "data",
                                      "nativeSrc": "12229:4:26",
                                      "nodeType": "YulIdentifier",
                                      "src": "12229:4:26"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nativeSrc": "12239:1:26",
                                          "nodeType": "YulLiteral",
                                          "src": "12239:1:26",
                                          "type": "",
                                          "value": "5"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "len",
                                              "nativeSrc": "12246:3:26",
                                              "nodeType": "YulIdentifier",
                                              "src": "12246:3:26"
                                            },
                                            {
                                              "kind": "number",
                                              "nativeSrc": "12251:2:26",
                                              "nodeType": "YulLiteral",
                                              "src": "12251:2:26",
                                              "type": "",
                                              "value": "31"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nativeSrc": "12242:3:26",
                                            "nodeType": "YulIdentifier",
                                            "src": "12242:3:26"
                                          },
                                          "nativeSrc": "12242:12:26",
                                          "nodeType": "YulFunctionCall",
                                          "src": "12242:12:26"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shr",
                                        "nativeSrc": "12235:3:26",
                                        "nodeType": "YulIdentifier",
                                        "src": "12235:3:26"
                                      },
                                      "nativeSrc": "12235:20:26",
                                      "nodeType": "YulFunctionCall",
                                      "src": "12235:20:26"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "12225:3:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "12225:3:26"
                                  },
                                  "nativeSrc": "12225:31:26",
                                  "nodeType": "YulFunctionCall",
                                  "src": "12225:31:26"
                                },
                                "variables": [
                                  {
                                    "name": "_2",
                                    "nativeSrc": "12219:2:26",
                                    "nodeType": "YulTypedName",
                                    "src": "12219:2:26",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "nativeSrc": "12269:24:26",
                                "nodeType": "YulVariableDeclaration",
                                "src": "12269:24:26",
                                "value": {
                                  "name": "deleteStart",
                                  "nativeSrc": "12282:11:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "12282:11:26"
                                },
                                "variables": [
                                  {
                                    "name": "start",
                                    "nativeSrc": "12273:5:26",
                                    "nodeType": "YulTypedName",
                                    "src": "12273:5:26",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "body": {
                                  "nativeSrc": "12367:21:26",
                                  "nodeType": "YulBlock",
                                  "src": "12367:21:26",
                                  "statements": [
                                    {
                                      "expression": {
                                        "arguments": [
                                          {
                                            "name": "start",
                                            "nativeSrc": "12376:5:26",
                                            "nodeType": "YulIdentifier",
                                            "src": "12376:5:26"
                                          },
                                          {
                                            "name": "_1",
                                            "nativeSrc": "12383:2:26",
                                            "nodeType": "YulIdentifier",
                                            "src": "12383:2:26"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sstore",
                                          "nativeSrc": "12369:6:26",
                                          "nodeType": "YulIdentifier",
                                          "src": "12369:6:26"
                                        },
                                        "nativeSrc": "12369:17:26",
                                        "nodeType": "YulFunctionCall",
                                        "src": "12369:17:26"
                                      },
                                      "nativeSrc": "12369:17:26",
                                      "nodeType": "YulExpressionStatement",
                                      "src": "12369:17:26"
                                    }
                                  ]
                                },
                                "condition": {
                                  "arguments": [
                                    {
                                      "name": "start",
                                      "nativeSrc": "12317:5:26",
                                      "nodeType": "YulIdentifier",
                                      "src": "12317:5:26"
                                    },
                                    {
                                      "name": "_2",
                                      "nativeSrc": "12324:2:26",
                                      "nodeType": "YulIdentifier",
                                      "src": "12324:2:26"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "lt",
                                    "nativeSrc": "12314:2:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "12314:2:26"
                                  },
                                  "nativeSrc": "12314:13:26",
                                  "nodeType": "YulFunctionCall",
                                  "src": "12314:13:26"
                                },
                                "nativeSrc": "12306:82:26",
                                "nodeType": "YulForLoop",
                                "post": {
                                  "nativeSrc": "12328:26:26",
                                  "nodeType": "YulBlock",
                                  "src": "12328:26:26",
                                  "statements": [
                                    {
                                      "nativeSrc": "12330:22:26",
                                      "nodeType": "YulAssignment",
                                      "src": "12330:22:26",
                                      "value": {
                                        "arguments": [
                                          {
                                            "name": "start",
                                            "nativeSrc": "12343:5:26",
                                            "nodeType": "YulIdentifier",
                                            "src": "12343:5:26"
                                          },
                                          {
                                            "kind": "number",
                                            "nativeSrc": "12350:1:26",
                                            "nodeType": "YulLiteral",
                                            "src": "12350:1:26",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nativeSrc": "12339:3:26",
                                          "nodeType": "YulIdentifier",
                                          "src": "12339:3:26"
                                        },
                                        "nativeSrc": "12339:13:26",
                                        "nodeType": "YulFunctionCall",
                                        "src": "12339:13:26"
                                      },
                                      "variableNames": [
                                        {
                                          "name": "start",
                                          "nativeSrc": "12330:5:26",
                                          "nodeType": "YulIdentifier",
                                          "src": "12330:5:26"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "pre": {
                                  "nativeSrc": "12310:3:26",
                                  "nodeType": "YulBlock",
                                  "src": "12310:3:26",
                                  "statements": []
                                },
                                "src": "12306:82:26"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "len",
                                "nativeSrc": "11958:3:26",
                                "nodeType": "YulIdentifier",
                                "src": "11958:3:26"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "11963:2:26",
                                "nodeType": "YulLiteral",
                                "src": "11963:2:26",
                                "type": "",
                                "value": "31"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nativeSrc": "11955:2:26",
                              "nodeType": "YulIdentifier",
                              "src": "11955:2:26"
                            },
                            "nativeSrc": "11955:11:26",
                            "nodeType": "YulFunctionCall",
                            "src": "11955:11:26"
                          },
                          "nativeSrc": "11952:446:26",
                          "nodeType": "YulIf",
                          "src": "11952:446:26"
                        }
                      ]
                    },
                    "name": "clean_up_bytearray_end_slots_string_storage",
                    "nativeSrc": "11861:543:26",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "array",
                        "nativeSrc": "11914:5:26",
                        "nodeType": "YulTypedName",
                        "src": "11914:5:26",
                        "type": ""
                      },
                      {
                        "name": "len",
                        "nativeSrc": "11921:3:26",
                        "nodeType": "YulTypedName",
                        "src": "11921:3:26",
                        "type": ""
                      },
                      {
                        "name": "startIndex",
                        "nativeSrc": "11926:10:26",
                        "nodeType": "YulTypedName",
                        "src": "11926:10:26",
                        "type": ""
                      }
                    ],
                    "src": "11861:543:26"
                  },
                  {
                    "body": {
                      "nativeSrc": "12494:81:26",
                      "nodeType": "YulBlock",
                      "src": "12494:81:26",
                      "statements": [
                        {
                          "nativeSrc": "12504:65:26",
                          "nodeType": "YulAssignment",
                          "src": "12504:65:26",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "data",
                                    "nativeSrc": "12519:4:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "12519:4:26"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nativeSrc": "12537:1:26",
                                                "nodeType": "YulLiteral",
                                                "src": "12537:1:26",
                                                "type": "",
                                                "value": "3"
                                              },
                                              {
                                                "name": "len",
                                                "nativeSrc": "12540:3:26",
                                                "nodeType": "YulIdentifier",
                                                "src": "12540:3:26"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nativeSrc": "12533:3:26",
                                              "nodeType": "YulIdentifier",
                                              "src": "12533:3:26"
                                            },
                                            "nativeSrc": "12533:11:26",
                                            "nodeType": "YulFunctionCall",
                                            "src": "12533:11:26"
                                          },
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nativeSrc": "12550:1:26",
                                                "nodeType": "YulLiteral",
                                                "src": "12550:1:26",
                                                "type": "",
                                                "value": "0"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "not",
                                              "nativeSrc": "12546:3:26",
                                              "nodeType": "YulIdentifier",
                                              "src": "12546:3:26"
                                            },
                                            "nativeSrc": "12546:6:26",
                                            "nodeType": "YulFunctionCall",
                                            "src": "12546:6:26"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shr",
                                          "nativeSrc": "12529:3:26",
                                          "nodeType": "YulIdentifier",
                                          "src": "12529:3:26"
                                        },
                                        "nativeSrc": "12529:24:26",
                                        "nodeType": "YulFunctionCall",
                                        "src": "12529:24:26"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nativeSrc": "12525:3:26",
                                      "nodeType": "YulIdentifier",
                                      "src": "12525:3:26"
                                    },
                                    "nativeSrc": "12525:29:26",
                                    "nodeType": "YulFunctionCall",
                                    "src": "12525:29:26"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nativeSrc": "12515:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "12515:3:26"
                                },
                                "nativeSrc": "12515:40:26",
                                "nodeType": "YulFunctionCall",
                                "src": "12515:40:26"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nativeSrc": "12561:1:26",
                                    "nodeType": "YulLiteral",
                                    "src": "12561:1:26",
                                    "type": "",
                                    "value": "1"
                                  },
                                  {
                                    "name": "len",
                                    "nativeSrc": "12564:3:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "12564:3:26"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nativeSrc": "12557:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "12557:3:26"
                                },
                                "nativeSrc": "12557:11:26",
                                "nodeType": "YulFunctionCall",
                                "src": "12557:11:26"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nativeSrc": "12512:2:26",
                              "nodeType": "YulIdentifier",
                              "src": "12512:2:26"
                            },
                            "nativeSrc": "12512:57:26",
                            "nodeType": "YulFunctionCall",
                            "src": "12512:57:26"
                          },
                          "variableNames": [
                            {
                              "name": "used",
                              "nativeSrc": "12504:4:26",
                              "nodeType": "YulIdentifier",
                              "src": "12504:4:26"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "extract_used_part_and_set_length_of_short_byte_array",
                    "nativeSrc": "12409:166:26",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "data",
                        "nativeSrc": "12471:4:26",
                        "nodeType": "YulTypedName",
                        "src": "12471:4:26",
                        "type": ""
                      },
                      {
                        "name": "len",
                        "nativeSrc": "12477:3:26",
                        "nodeType": "YulTypedName",
                        "src": "12477:3:26",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "used",
                        "nativeSrc": "12485:4:26",
                        "nodeType": "YulTypedName",
                        "src": "12485:4:26",
                        "type": ""
                      }
                    ],
                    "src": "12409:166:26"
                  },
                  {
                    "body": {
                      "nativeSrc": "12676:1249:26",
                      "nodeType": "YulBlock",
                      "src": "12676:1249:26",
                      "statements": [
                        {
                          "nativeSrc": "12686:24:26",
                          "nodeType": "YulVariableDeclaration",
                          "src": "12686:24:26",
                          "value": {
                            "arguments": [
                              {
                                "name": "src",
                                "nativeSrc": "12706:3:26",
                                "nodeType": "YulIdentifier",
                                "src": "12706:3:26"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nativeSrc": "12700:5:26",
                              "nodeType": "YulIdentifier",
                              "src": "12700:5:26"
                            },
                            "nativeSrc": "12700:10:26",
                            "nodeType": "YulFunctionCall",
                            "src": "12700:10:26"
                          },
                          "variables": [
                            {
                              "name": "newLen",
                              "nativeSrc": "12690:6:26",
                              "nodeType": "YulTypedName",
                              "src": "12690:6:26",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "12753:22:26",
                            "nodeType": "YulBlock",
                            "src": "12753:22:26",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nativeSrc": "12755:16:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "12755:16:26"
                                  },
                                  "nativeSrc": "12755:18:26",
                                  "nodeType": "YulFunctionCall",
                                  "src": "12755:18:26"
                                },
                                "nativeSrc": "12755:18:26",
                                "nodeType": "YulExpressionStatement",
                                "src": "12755:18:26"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "newLen",
                                "nativeSrc": "12725:6:26",
                                "nodeType": "YulIdentifier",
                                "src": "12725:6:26"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "12733:18:26",
                                "nodeType": "YulLiteral",
                                "src": "12733:18:26",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nativeSrc": "12722:2:26",
                              "nodeType": "YulIdentifier",
                              "src": "12722:2:26"
                            },
                            "nativeSrc": "12722:30:26",
                            "nodeType": "YulFunctionCall",
                            "src": "12722:30:26"
                          },
                          "nativeSrc": "12719:56:26",
                          "nodeType": "YulIf",
                          "src": "12719:56:26"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "slot",
                                "nativeSrc": "12828:4:26",
                                "nodeType": "YulIdentifier",
                                "src": "12828:4:26"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "slot",
                                        "nativeSrc": "12866:4:26",
                                        "nodeType": "YulIdentifier",
                                        "src": "12866:4:26"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sload",
                                      "nativeSrc": "12860:5:26",
                                      "nodeType": "YulIdentifier",
                                      "src": "12860:5:26"
                                    },
                                    "nativeSrc": "12860:11:26",
                                    "nodeType": "YulFunctionCall",
                                    "src": "12860:11:26"
                                  }
                                ],
                                "functionName": {
                                  "name": "extract_byte_array_length",
                                  "nativeSrc": "12834:25:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "12834:25:26"
                                },
                                "nativeSrc": "12834:38:26",
                                "nodeType": "YulFunctionCall",
                                "src": "12834:38:26"
                              },
                              {
                                "name": "newLen",
                                "nativeSrc": "12874:6:26",
                                "nodeType": "YulIdentifier",
                                "src": "12874:6:26"
                              }
                            ],
                            "functionName": {
                              "name": "clean_up_bytearray_end_slots_string_storage",
                              "nativeSrc": "12784:43:26",
                              "nodeType": "YulIdentifier",
                              "src": "12784:43:26"
                            },
                            "nativeSrc": "12784:97:26",
                            "nodeType": "YulFunctionCall",
                            "src": "12784:97:26"
                          },
                          "nativeSrc": "12784:97:26",
                          "nodeType": "YulExpressionStatement",
                          "src": "12784:97:26"
                        },
                        {
                          "nativeSrc": "12890:18:26",
                          "nodeType": "YulVariableDeclaration",
                          "src": "12890:18:26",
                          "value": {
                            "kind": "number",
                            "nativeSrc": "12907:1:26",
                            "nodeType": "YulLiteral",
                            "src": "12907:1:26",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "srcOffset",
                              "nativeSrc": "12894:9:26",
                              "nodeType": "YulTypedName",
                              "src": "12894:9:26",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nativeSrc": "12917:23:26",
                          "nodeType": "YulVariableDeclaration",
                          "src": "12917:23:26",
                          "value": {
                            "kind": "number",
                            "nativeSrc": "12936:4:26",
                            "nodeType": "YulLiteral",
                            "src": "12936:4:26",
                            "type": "",
                            "value": "0x20"
                          },
                          "variables": [
                            {
                              "name": "srcOffset_1",
                              "nativeSrc": "12921:11:26",
                              "nodeType": "YulTypedName",
                              "src": "12921:11:26",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nativeSrc": "12949:17:26",
                          "nodeType": "YulAssignment",
                          "src": "12949:17:26",
                          "value": {
                            "kind": "number",
                            "nativeSrc": "12962:4:26",
                            "nodeType": "YulLiteral",
                            "src": "12962:4:26",
                            "type": "",
                            "value": "0x20"
                          },
                          "variableNames": [
                            {
                              "name": "srcOffset",
                              "nativeSrc": "12949:9:26",
                              "nodeType": "YulIdentifier",
                              "src": "12949:9:26"
                            }
                          ]
                        },
                        {
                          "cases": [
                            {
                              "body": {
                                "nativeSrc": "13012:656:26",
                                "nodeType": "YulBlock",
                                "src": "13012:656:26",
                                "statements": [
                                  {
                                    "nativeSrc": "13026:35:26",
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "13026:35:26",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "newLen",
                                          "nativeSrc": "13045:6:26",
                                          "nodeType": "YulIdentifier",
                                          "src": "13045:6:26"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nativeSrc": "13057:2:26",
                                              "nodeType": "YulLiteral",
                                              "src": "13057:2:26",
                                              "type": "",
                                              "value": "31"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "not",
                                            "nativeSrc": "13053:3:26",
                                            "nodeType": "YulIdentifier",
                                            "src": "13053:3:26"
                                          },
                                          "nativeSrc": "13053:7:26",
                                          "nodeType": "YulFunctionCall",
                                          "src": "13053:7:26"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "and",
                                        "nativeSrc": "13041:3:26",
                                        "nodeType": "YulIdentifier",
                                        "src": "13041:3:26"
                                      },
                                      "nativeSrc": "13041:20:26",
                                      "nodeType": "YulFunctionCall",
                                      "src": "13041:20:26"
                                    },
                                    "variables": [
                                      {
                                        "name": "loopEnd",
                                        "nativeSrc": "13030:7:26",
                                        "nodeType": "YulTypedName",
                                        "src": "13030:7:26",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nativeSrc": "13074:49:26",
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "13074:49:26",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "slot",
                                          "nativeSrc": "13118:4:26",
                                          "nodeType": "YulIdentifier",
                                          "src": "13118:4:26"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "array_dataslot_string_storage",
                                        "nativeSrc": "13088:29:26",
                                        "nodeType": "YulIdentifier",
                                        "src": "13088:29:26"
                                      },
                                      "nativeSrc": "13088:35:26",
                                      "nodeType": "YulFunctionCall",
                                      "src": "13088:35:26"
                                    },
                                    "variables": [
                                      {
                                        "name": "dstPtr",
                                        "nativeSrc": "13078:6:26",
                                        "nodeType": "YulTypedName",
                                        "src": "13078:6:26",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nativeSrc": "13136:10:26",
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "13136:10:26",
                                    "value": {
                                      "kind": "number",
                                      "nativeSrc": "13145:1:26",
                                      "nodeType": "YulLiteral",
                                      "src": "13145:1:26",
                                      "type": "",
                                      "value": "0"
                                    },
                                    "variables": [
                                      {
                                        "name": "i",
                                        "nativeSrc": "13140:1:26",
                                        "nodeType": "YulTypedName",
                                        "src": "13140:1:26",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "body": {
                                      "nativeSrc": "13223:172:26",
                                      "nodeType": "YulBlock",
                                      "src": "13223:172:26",
                                      "statements": [
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "name": "dstPtr",
                                                "nativeSrc": "13248:6:26",
                                                "nodeType": "YulIdentifier",
                                                "src": "13248:6:26"
                                              },
                                              {
                                                "arguments": [
                                                  {
                                                    "arguments": [
                                                      {
                                                        "name": "src",
                                                        "nativeSrc": "13266:3:26",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "13266:3:26"
                                                      },
                                                      {
                                                        "name": "srcOffset",
                                                        "nativeSrc": "13271:9:26",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "13271:9:26"
                                                      }
                                                    ],
                                                    "functionName": {
                                                      "name": "add",
                                                      "nativeSrc": "13262:3:26",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "13262:3:26"
                                                    },
                                                    "nativeSrc": "13262:19:26",
                                                    "nodeType": "YulFunctionCall",
                                                    "src": "13262:19:26"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "mload",
                                                  "nativeSrc": "13256:5:26",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "13256:5:26"
                                                },
                                                "nativeSrc": "13256:26:26",
                                                "nodeType": "YulFunctionCall",
                                                "src": "13256:26:26"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "sstore",
                                              "nativeSrc": "13241:6:26",
                                              "nodeType": "YulIdentifier",
                                              "src": "13241:6:26"
                                            },
                                            "nativeSrc": "13241:42:26",
                                            "nodeType": "YulFunctionCall",
                                            "src": "13241:42:26"
                                          },
                                          "nativeSrc": "13241:42:26",
                                          "nodeType": "YulExpressionStatement",
                                          "src": "13241:42:26"
                                        },
                                        {
                                          "nativeSrc": "13300:24:26",
                                          "nodeType": "YulAssignment",
                                          "src": "13300:24:26",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "dstPtr",
                                                "nativeSrc": "13314:6:26",
                                                "nodeType": "YulIdentifier",
                                                "src": "13314:6:26"
                                              },
                                              {
                                                "kind": "number",
                                                "nativeSrc": "13322:1:26",
                                                "nodeType": "YulLiteral",
                                                "src": "13322:1:26",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nativeSrc": "13310:3:26",
                                              "nodeType": "YulIdentifier",
                                              "src": "13310:3:26"
                                            },
                                            "nativeSrc": "13310:14:26",
                                            "nodeType": "YulFunctionCall",
                                            "src": "13310:14:26"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "dstPtr",
                                              "nativeSrc": "13300:6:26",
                                              "nodeType": "YulIdentifier",
                                              "src": "13300:6:26"
                                            }
                                          ]
                                        },
                                        {
                                          "nativeSrc": "13341:40:26",
                                          "nodeType": "YulAssignment",
                                          "src": "13341:40:26",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "srcOffset",
                                                "nativeSrc": "13358:9:26",
                                                "nodeType": "YulIdentifier",
                                                "src": "13358:9:26"
                                              },
                                              {
                                                "name": "srcOffset_1",
                                                "nativeSrc": "13369:11:26",
                                                "nodeType": "YulIdentifier",
                                                "src": "13369:11:26"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nativeSrc": "13354:3:26",
                                              "nodeType": "YulIdentifier",
                                              "src": "13354:3:26"
                                            },
                                            "nativeSrc": "13354:27:26",
                                            "nodeType": "YulFunctionCall",
                                            "src": "13354:27:26"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "srcOffset",
                                              "nativeSrc": "13341:9:26",
                                              "nodeType": "YulIdentifier",
                                              "src": "13341:9:26"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "arguments": [
                                        {
                                          "name": "i",
                                          "nativeSrc": "13170:1:26",
                                          "nodeType": "YulIdentifier",
                                          "src": "13170:1:26"
                                        },
                                        {
                                          "name": "loopEnd",
                                          "nativeSrc": "13173:7:26",
                                          "nodeType": "YulIdentifier",
                                          "src": "13173:7:26"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "lt",
                                        "nativeSrc": "13167:2:26",
                                        "nodeType": "YulIdentifier",
                                        "src": "13167:2:26"
                                      },
                                      "nativeSrc": "13167:14:26",
                                      "nodeType": "YulFunctionCall",
                                      "src": "13167:14:26"
                                    },
                                    "nativeSrc": "13159:236:26",
                                    "nodeType": "YulForLoop",
                                    "post": {
                                      "nativeSrc": "13182:28:26",
                                      "nodeType": "YulBlock",
                                      "src": "13182:28:26",
                                      "statements": [
                                        {
                                          "nativeSrc": "13184:24:26",
                                          "nodeType": "YulAssignment",
                                          "src": "13184:24:26",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "i",
                                                "nativeSrc": "13193:1:26",
                                                "nodeType": "YulIdentifier",
                                                "src": "13193:1:26"
                                              },
                                              {
                                                "name": "srcOffset_1",
                                                "nativeSrc": "13196:11:26",
                                                "nodeType": "YulIdentifier",
                                                "src": "13196:11:26"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nativeSrc": "13189:3:26",
                                              "nodeType": "YulIdentifier",
                                              "src": "13189:3:26"
                                            },
                                            "nativeSrc": "13189:19:26",
                                            "nodeType": "YulFunctionCall",
                                            "src": "13189:19:26"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "i",
                                              "nativeSrc": "13184:1:26",
                                              "nodeType": "YulIdentifier",
                                              "src": "13184:1:26"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "pre": {
                                      "nativeSrc": "13163:3:26",
                                      "nodeType": "YulBlock",
                                      "src": "13163:3:26",
                                      "statements": []
                                    },
                                    "src": "13159:236:26"
                                  },
                                  {
                                    "body": {
                                      "nativeSrc": "13443:166:26",
                                      "nodeType": "YulBlock",
                                      "src": "13443:166:26",
                                      "statements": [
                                        {
                                          "nativeSrc": "13461:43:26",
                                          "nodeType": "YulVariableDeclaration",
                                          "src": "13461:43:26",
                                          "value": {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "src",
                                                    "nativeSrc": "13488:3:26",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "13488:3:26"
                                                  },
                                                  {
                                                    "name": "srcOffset",
                                                    "nativeSrc": "13493:9:26",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "13493:9:26"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nativeSrc": "13484:3:26",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "13484:3:26"
                                                },
                                                "nativeSrc": "13484:19:26",
                                                "nodeType": "YulFunctionCall",
                                                "src": "13484:19:26"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mload",
                                              "nativeSrc": "13478:5:26",
                                              "nodeType": "YulIdentifier",
                                              "src": "13478:5:26"
                                            },
                                            "nativeSrc": "13478:26:26",
                                            "nodeType": "YulFunctionCall",
                                            "src": "13478:26:26"
                                          },
                                          "variables": [
                                            {
                                              "name": "lastValue",
                                              "nativeSrc": "13465:9:26",
                                              "nodeType": "YulTypedName",
                                              "src": "13465:9:26",
                                              "type": ""
                                            }
                                          ]
                                        },
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "name": "dstPtr",
                                                "nativeSrc": "13528:6:26",
                                                "nodeType": "YulIdentifier",
                                                "src": "13528:6:26"
                                              },
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "lastValue",
                                                    "nativeSrc": "13540:9:26",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "13540:9:26"
                                                  },
                                                  {
                                                    "arguments": [
                                                      {
                                                        "arguments": [
                                                          {
                                                            "arguments": [
                                                              {
                                                                "arguments": [
                                                                  {
                                                                    "kind": "number",
                                                                    "nativeSrc": "13567:1:26",
                                                                    "nodeType": "YulLiteral",
                                                                    "src": "13567:1:26",
                                                                    "type": "",
                                                                    "value": "3"
                                                                  },
                                                                  {
                                                                    "name": "newLen",
                                                                    "nativeSrc": "13570:6:26",
                                                                    "nodeType": "YulIdentifier",
                                                                    "src": "13570:6:26"
                                                                  }
                                                                ],
                                                                "functionName": {
                                                                  "name": "shl",
                                                                  "nativeSrc": "13563:3:26",
                                                                  "nodeType": "YulIdentifier",
                                                                  "src": "13563:3:26"
                                                                },
                                                                "nativeSrc": "13563:14:26",
                                                                "nodeType": "YulFunctionCall",
                                                                "src": "13563:14:26"
                                                              },
                                                              {
                                                                "kind": "number",
                                                                "nativeSrc": "13579:3:26",
                                                                "nodeType": "YulLiteral",
                                                                "src": "13579:3:26",
                                                                "type": "",
                                                                "value": "248"
                                                              }
                                                            ],
                                                            "functionName": {
                                                              "name": "and",
                                                              "nativeSrc": "13559:3:26",
                                                              "nodeType": "YulIdentifier",
                                                              "src": "13559:3:26"
                                                            },
                                                            "nativeSrc": "13559:24:26",
                                                            "nodeType": "YulFunctionCall",
                                                            "src": "13559:24:26"
                                                          },
                                                          {
                                                            "arguments": [
                                                              {
                                                                "kind": "number",
                                                                "nativeSrc": "13589:1:26",
                                                                "nodeType": "YulLiteral",
                                                                "src": "13589:1:26",
                                                                "type": "",
                                                                "value": "0"
                                                              }
                                                            ],
                                                            "functionName": {
                                                              "name": "not",
                                                              "nativeSrc": "13585:3:26",
                                                              "nodeType": "YulIdentifier",
                                                              "src": "13585:3:26"
                                                            },
                                                            "nativeSrc": "13585:6:26",
                                                            "nodeType": "YulFunctionCall",
                                                            "src": "13585:6:26"
                                                          }
                                                        ],
                                                        "functionName": {
                                                          "name": "shr",
                                                          "nativeSrc": "13555:3:26",
                                                          "nodeType": "YulIdentifier",
                                                          "src": "13555:3:26"
                                                        },
                                                        "nativeSrc": "13555:37:26",
                                                        "nodeType": "YulFunctionCall",
                                                        "src": "13555:37:26"
                                                      }
                                                    ],
                                                    "functionName": {
                                                      "name": "not",
                                                      "nativeSrc": "13551:3:26",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "13551:3:26"
                                                    },
                                                    "nativeSrc": "13551:42:26",
                                                    "nodeType": "YulFunctionCall",
                                                    "src": "13551:42:26"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "and",
                                                  "nativeSrc": "13536:3:26",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "13536:3:26"
                                                },
                                                "nativeSrc": "13536:58:26",
                                                "nodeType": "YulFunctionCall",
                                                "src": "13536:58:26"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "sstore",
                                              "nativeSrc": "13521:6:26",
                                              "nodeType": "YulIdentifier",
                                              "src": "13521:6:26"
                                            },
                                            "nativeSrc": "13521:74:26",
                                            "nodeType": "YulFunctionCall",
                                            "src": "13521:74:26"
                                          },
                                          "nativeSrc": "13521:74:26",
                                          "nodeType": "YulExpressionStatement",
                                          "src": "13521:74:26"
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "arguments": [
                                        {
                                          "name": "loopEnd",
                                          "nativeSrc": "13414:7:26",
                                          "nodeType": "YulIdentifier",
                                          "src": "13414:7:26"
                                        },
                                        {
                                          "name": "newLen",
                                          "nativeSrc": "13423:6:26",
                                          "nodeType": "YulIdentifier",
                                          "src": "13423:6:26"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "lt",
                                        "nativeSrc": "13411:2:26",
                                        "nodeType": "YulIdentifier",
                                        "src": "13411:2:26"
                                      },
                                      "nativeSrc": "13411:19:26",
                                      "nodeType": "YulFunctionCall",
                                      "src": "13411:19:26"
                                    },
                                    "nativeSrc": "13408:201:26",
                                    "nodeType": "YulIf",
                                    "src": "13408:201:26"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "slot",
                                          "nativeSrc": "13629:4:26",
                                          "nodeType": "YulIdentifier",
                                          "src": "13629:4:26"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "kind": "number",
                                                  "nativeSrc": "13643:1:26",
                                                  "nodeType": "YulLiteral",
                                                  "src": "13643:1:26",
                                                  "type": "",
                                                  "value": "1"
                                                },
                                                {
                                                  "name": "newLen",
                                                  "nativeSrc": "13646:6:26",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "13646:6:26"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "shl",
                                                "nativeSrc": "13639:3:26",
                                                "nodeType": "YulIdentifier",
                                                "src": "13639:3:26"
                                              },
                                              "nativeSrc": "13639:14:26",
                                              "nodeType": "YulFunctionCall",
                                              "src": "13639:14:26"
                                            },
                                            {
                                              "kind": "number",
                                              "nativeSrc": "13655:1:26",
                                              "nodeType": "YulLiteral",
                                              "src": "13655:1:26",
                                              "type": "",
                                              "value": "1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nativeSrc": "13635:3:26",
                                            "nodeType": "YulIdentifier",
                                            "src": "13635:3:26"
                                          },
                                          "nativeSrc": "13635:22:26",
                                          "nodeType": "YulFunctionCall",
                                          "src": "13635:22:26"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "sstore",
                                        "nativeSrc": "13622:6:26",
                                        "nodeType": "YulIdentifier",
                                        "src": "13622:6:26"
                                      },
                                      "nativeSrc": "13622:36:26",
                                      "nodeType": "YulFunctionCall",
                                      "src": "13622:36:26"
                                    },
                                    "nativeSrc": "13622:36:26",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "13622:36:26"
                                  }
                                ]
                              },
                              "nativeSrc": "13005:663:26",
                              "nodeType": "YulCase",
                              "src": "13005:663:26",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "13010:1:26",
                                "nodeType": "YulLiteral",
                                "src": "13010:1:26",
                                "type": "",
                                "value": "1"
                              }
                            },
                            {
                              "body": {
                                "nativeSrc": "13685:234:26",
                                "nodeType": "YulBlock",
                                "src": "13685:234:26",
                                "statements": [
                                  {
                                    "nativeSrc": "13699:14:26",
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "13699:14:26",
                                    "value": {
                                      "kind": "number",
                                      "nativeSrc": "13712:1:26",
                                      "nodeType": "YulLiteral",
                                      "src": "13712:1:26",
                                      "type": "",
                                      "value": "0"
                                    },
                                    "variables": [
                                      {
                                        "name": "value",
                                        "nativeSrc": "13703:5:26",
                                        "nodeType": "YulTypedName",
                                        "src": "13703:5:26",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "body": {
                                      "nativeSrc": "13748:67:26",
                                      "nodeType": "YulBlock",
                                      "src": "13748:67:26",
                                      "statements": [
                                        {
                                          "nativeSrc": "13766:35:26",
                                          "nodeType": "YulAssignment",
                                          "src": "13766:35:26",
                                          "value": {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "src",
                                                    "nativeSrc": "13785:3:26",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "13785:3:26"
                                                  },
                                                  {
                                                    "name": "srcOffset",
                                                    "nativeSrc": "13790:9:26",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "13790:9:26"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nativeSrc": "13781:3:26",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "13781:3:26"
                                                },
                                                "nativeSrc": "13781:19:26",
                                                "nodeType": "YulFunctionCall",
                                                "src": "13781:19:26"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mload",
                                              "nativeSrc": "13775:5:26",
                                              "nodeType": "YulIdentifier",
                                              "src": "13775:5:26"
                                            },
                                            "nativeSrc": "13775:26:26",
                                            "nodeType": "YulFunctionCall",
                                            "src": "13775:26:26"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "value",
                                              "nativeSrc": "13766:5:26",
                                              "nodeType": "YulIdentifier",
                                              "src": "13766:5:26"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "name": "newLen",
                                      "nativeSrc": "13729:6:26",
                                      "nodeType": "YulIdentifier",
                                      "src": "13729:6:26"
                                    },
                                    "nativeSrc": "13726:89:26",
                                    "nodeType": "YulIf",
                                    "src": "13726:89:26"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "slot",
                                          "nativeSrc": "13835:4:26",
                                          "nodeType": "YulIdentifier",
                                          "src": "13835:4:26"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "value",
                                              "nativeSrc": "13894:5:26",
                                              "nodeType": "YulIdentifier",
                                              "src": "13894:5:26"
                                            },
                                            {
                                              "name": "newLen",
                                              "nativeSrc": "13901:6:26",
                                              "nodeType": "YulIdentifier",
                                              "src": "13901:6:26"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "extract_used_part_and_set_length_of_short_byte_array",
                                            "nativeSrc": "13841:52:26",
                                            "nodeType": "YulIdentifier",
                                            "src": "13841:52:26"
                                          },
                                          "nativeSrc": "13841:67:26",
                                          "nodeType": "YulFunctionCall",
                                          "src": "13841:67:26"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "sstore",
                                        "nativeSrc": "13828:6:26",
                                        "nodeType": "YulIdentifier",
                                        "src": "13828:6:26"
                                      },
                                      "nativeSrc": "13828:81:26",
                                      "nodeType": "YulFunctionCall",
                                      "src": "13828:81:26"
                                    },
                                    "nativeSrc": "13828:81:26",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "13828:81:26"
                                  }
                                ]
                              },
                              "nativeSrc": "13677:242:26",
                              "nodeType": "YulCase",
                              "src": "13677:242:26",
                              "value": "default"
                            }
                          ],
                          "expression": {
                            "arguments": [
                              {
                                "name": "newLen",
                                "nativeSrc": "12985:6:26",
                                "nodeType": "YulIdentifier",
                                "src": "12985:6:26"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "12993:2:26",
                                "nodeType": "YulLiteral",
                                "src": "12993:2:26",
                                "type": "",
                                "value": "31"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nativeSrc": "12982:2:26",
                              "nodeType": "YulIdentifier",
                              "src": "12982:2:26"
                            },
                            "nativeSrc": "12982:14:26",
                            "nodeType": "YulFunctionCall",
                            "src": "12982:14:26"
                          },
                          "nativeSrc": "12975:944:26",
                          "nodeType": "YulSwitch",
                          "src": "12975:944:26"
                        }
                      ]
                    },
                    "name": "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage",
                    "nativeSrc": "12580:1345:26",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "slot",
                        "nativeSrc": "12661:4:26",
                        "nodeType": "YulTypedName",
                        "src": "12661:4:26",
                        "type": ""
                      },
                      {
                        "name": "src",
                        "nativeSrc": "12667:3:26",
                        "nodeType": "YulTypedName",
                        "src": "12667:3:26",
                        "type": ""
                      }
                    ],
                    "src": "12580:1345:26"
                  },
                  {
                    "body": {
                      "nativeSrc": "13962:95:26",
                      "nodeType": "YulBlock",
                      "src": "13962:95:26",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "13979:1:26",
                                "nodeType": "YulLiteral",
                                "src": "13979:1:26",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nativeSrc": "13986:3:26",
                                    "nodeType": "YulLiteral",
                                    "src": "13986:3:26",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "13991:10:26",
                                    "nodeType": "YulLiteral",
                                    "src": "13991:10:26",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nativeSrc": "13982:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "13982:3:26"
                                },
                                "nativeSrc": "13982:20:26",
                                "nodeType": "YulFunctionCall",
                                "src": "13982:20:26"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "13972:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "13972:6:26"
                            },
                            "nativeSrc": "13972:31:26",
                            "nodeType": "YulFunctionCall",
                            "src": "13972:31:26"
                          },
                          "nativeSrc": "13972:31:26",
                          "nodeType": "YulExpressionStatement",
                          "src": "13972:31:26"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "14019:1:26",
                                "nodeType": "YulLiteral",
                                "src": "14019:1:26",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "14022:4:26",
                                "nodeType": "YulLiteral",
                                "src": "14022:4:26",
                                "type": "",
                                "value": "0x32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "14012:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "14012:6:26"
                            },
                            "nativeSrc": "14012:15:26",
                            "nodeType": "YulFunctionCall",
                            "src": "14012:15:26"
                          },
                          "nativeSrc": "14012:15:26",
                          "nodeType": "YulExpressionStatement",
                          "src": "14012:15:26"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "14043:1:26",
                                "nodeType": "YulLiteral",
                                "src": "14043:1:26",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "14046:4:26",
                                "nodeType": "YulLiteral",
                                "src": "14046:4:26",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nativeSrc": "14036:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "14036:6:26"
                            },
                            "nativeSrc": "14036:15:26",
                            "nodeType": "YulFunctionCall",
                            "src": "14036:15:26"
                          },
                          "nativeSrc": "14036:15:26",
                          "nodeType": "YulExpressionStatement",
                          "src": "14036:15:26"
                        }
                      ]
                    },
                    "name": "panic_error_0x32",
                    "nativeSrc": "13930:127:26",
                    "nodeType": "YulFunctionDefinition",
                    "src": "13930:127:26"
                  },
                  {
                    "body": {
                      "nativeSrc": "14143:103:26",
                      "nodeType": "YulBlock",
                      "src": "14143:103:26",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "14189:16:26",
                            "nodeType": "YulBlock",
                            "src": "14189:16:26",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "14198:1:26",
                                      "nodeType": "YulLiteral",
                                      "src": "14198:1:26",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "14201:1:26",
                                      "nodeType": "YulLiteral",
                                      "src": "14201:1:26",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "14191:6:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "14191:6:26"
                                  },
                                  "nativeSrc": "14191:12:26",
                                  "nodeType": "YulFunctionCall",
                                  "src": "14191:12:26"
                                },
                                "nativeSrc": "14191:12:26",
                                "nodeType": "YulExpressionStatement",
                                "src": "14191:12:26"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "14164:7:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "14164:7:26"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "14173:9:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "14173:9:26"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "14160:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "14160:3:26"
                                },
                                "nativeSrc": "14160:23:26",
                                "nodeType": "YulFunctionCall",
                                "src": "14160:23:26"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "14185:2:26",
                                "nodeType": "YulLiteral",
                                "src": "14185:2:26",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nativeSrc": "14156:3:26",
                              "nodeType": "YulIdentifier",
                              "src": "14156:3:26"
                            },
                            "nativeSrc": "14156:32:26",
                            "nodeType": "YulFunctionCall",
                            "src": "14156:32:26"
                          },
                          "nativeSrc": "14153:52:26",
                          "nodeType": "YulIf",
                          "src": "14153:52:26"
                        },
                        {
                          "nativeSrc": "14214:26:26",
                          "nodeType": "YulAssignment",
                          "src": "14214:26:26",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "14230:9:26",
                                "nodeType": "YulIdentifier",
                                "src": "14230:9:26"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nativeSrc": "14224:5:26",
                              "nodeType": "YulIdentifier",
                              "src": "14224:5:26"
                            },
                            "nativeSrc": "14224:16:26",
                            "nodeType": "YulFunctionCall",
                            "src": "14224:16:26"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nativeSrc": "14214:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "14214:6:26"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes32_fromMemory",
                    "nativeSrc": "14062:184:26",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "14109:9:26",
                        "nodeType": "YulTypedName",
                        "src": "14109:9:26",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nativeSrc": "14120:7:26",
                        "nodeType": "YulTypedName",
                        "src": "14120:7:26",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nativeSrc": "14132:6:26",
                        "nodeType": "YulTypedName",
                        "src": "14132:6:26",
                        "type": ""
                      }
                    ],
                    "src": "14062:184:26"
                  },
                  {
                    "body": {
                      "nativeSrc": "14380:145:26",
                      "nodeType": "YulBlock",
                      "src": "14380:145:26",
                      "statements": [
                        {
                          "nativeSrc": "14390:26:26",
                          "nodeType": "YulAssignment",
                          "src": "14390:26:26",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "14402:9:26",
                                "nodeType": "YulIdentifier",
                                "src": "14402:9:26"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "14413:2:26",
                                "nodeType": "YulLiteral",
                                "src": "14413:2:26",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "14398:3:26",
                              "nodeType": "YulIdentifier",
                              "src": "14398:3:26"
                            },
                            "nativeSrc": "14398:18:26",
                            "nodeType": "YulFunctionCall",
                            "src": "14398:18:26"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "14390:4:26",
                              "nodeType": "YulIdentifier",
                              "src": "14390:4:26"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "14432:9:26",
                                "nodeType": "YulIdentifier",
                                "src": "14432:9:26"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nativeSrc": "14447:6:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "14447:6:26"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nativeSrc": "14463:3:26",
                                            "nodeType": "YulLiteral",
                                            "src": "14463:3:26",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nativeSrc": "14468:1:26",
                                            "nodeType": "YulLiteral",
                                            "src": "14468:1:26",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nativeSrc": "14459:3:26",
                                          "nodeType": "YulIdentifier",
                                          "src": "14459:3:26"
                                        },
                                        "nativeSrc": "14459:11:26",
                                        "nodeType": "YulFunctionCall",
                                        "src": "14459:11:26"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "14472:1:26",
                                        "nodeType": "YulLiteral",
                                        "src": "14472:1:26",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nativeSrc": "14455:3:26",
                                      "nodeType": "YulIdentifier",
                                      "src": "14455:3:26"
                                    },
                                    "nativeSrc": "14455:19:26",
                                    "nodeType": "YulFunctionCall",
                                    "src": "14455:19:26"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nativeSrc": "14443:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "14443:3:26"
                                },
                                "nativeSrc": "14443:32:26",
                                "nodeType": "YulFunctionCall",
                                "src": "14443:32:26"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "14425:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "14425:6:26"
                            },
                            "nativeSrc": "14425:51:26",
                            "nodeType": "YulFunctionCall",
                            "src": "14425:51:26"
                          },
                          "nativeSrc": "14425:51:26",
                          "nodeType": "YulExpressionStatement",
                          "src": "14425:51:26"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "14496:9:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "14496:9:26"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "14507:2:26",
                                    "nodeType": "YulLiteral",
                                    "src": "14507:2:26",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "14492:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "14492:3:26"
                                },
                                "nativeSrc": "14492:18:26",
                                "nodeType": "YulFunctionCall",
                                "src": "14492:18:26"
                              },
                              {
                                "name": "value1",
                                "nativeSrc": "14512:6:26",
                                "nodeType": "YulIdentifier",
                                "src": "14512:6:26"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "14485:6:26",
                              "nodeType": "YulIdentifier",
                              "src": "14485:6:26"
                            },
                            "nativeSrc": "14485:34:26",
                            "nodeType": "YulFunctionCall",
                            "src": "14485:34:26"
                          },
                          "nativeSrc": "14485:34:26",
                          "nodeType": "YulExpressionStatement",
                          "src": "14485:34:26"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_bytes32__to_t_address_t_bytes32__fromStack_reversed",
                    "nativeSrc": "14251:274:26",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "14341:9:26",
                        "nodeType": "YulTypedName",
                        "src": "14341:9:26",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nativeSrc": "14352:6:26",
                        "nodeType": "YulTypedName",
                        "src": "14352:6:26",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "14360:6:26",
                        "nodeType": "YulTypedName",
                        "src": "14360:6:26",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "14371:4:26",
                        "nodeType": "YulTypedName",
                        "src": "14371:4:26",
                        "type": ""
                      }
                    ],
                    "src": "14251:274:26"
                  },
                  {
                    "body": {
                      "nativeSrc": "14667:150:26",
                      "nodeType": "YulBlock",
                      "src": "14667:150:26",
                      "statements": [
                        {
                          "nativeSrc": "14677:27:26",
                          "nodeType": "YulVariableDeclaration",
                          "src": "14677:27:26",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nativeSrc": "14697:6:26",
                                "nodeType": "YulIdentifier",
                                "src": "14697:6:26"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nativeSrc": "14691:5:26",
                              "nodeType": "YulIdentifier",
                              "src": "14691:5:26"
                            },
                            "nativeSrc": "14691:13:26",
                            "nodeType": "YulFunctionCall",
                            "src": "14691:13:26"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nativeSrc": "14681:6:26",
                              "nodeType": "YulTypedName",
                              "src": "14681:6:26",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nativeSrc": "14752:6:26",
                                    "nodeType": "YulIdentifier",
                                    "src": "14752:6:26"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "14760:4:26",
                                    "nodeType": "YulLiteral",
                                    "src": "14760:4:26",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "14748:3:26",
                                  "nodeType": "YulIdentifier",
                                  "src": "14748:3:26"
                                },
                                "nativeSrc": "14748:17:26",
                                "nodeType": "YulFunctionCall",
                                "src": "14748:17:26"
                              },
                              {
                                "name": "pos",
                                "nativeSrc": "14767:3:26",
                                "nodeType": "YulIdentifier",
                                "src": "14767:3:26"
                              },
                              {
                                "name": "length",
                                "nativeSrc": "14772:6:26",
                                "nodeType": "YulIdentifier",
                                "src": "14772:6:26"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory_with_cleanup",
                              "nativeSrc": "14713:34:26",
                              "nodeType": "YulIdentifier",
                              "src": "14713:34:26"
                            },
                            "nativeSrc": "14713:66:26",
                            "nodeType": "YulFunctionCall",
                            "src": "14713:66:26"
                          },
                          "nativeSrc": "14713:66:26",
                          "nodeType": "YulExpressionStatement",
                          "src": "14713:66:26"
                        },
                        {
                          "nativeSrc": "14788:23:26",
                          "nodeType": "YulAssignment",
                          "src": "14788:23:26",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "14799:3:26",
                                "nodeType": "YulIdentifier",
                                "src": "14799:3:26"
                              },
                              {
                                "name": "length",
                                "nativeSrc": "14804:6:26",
                                "nodeType": "YulIdentifier",
                                "src": "14804:6:26"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "14795:3:26",
                              "nodeType": "YulIdentifier",
                              "src": "14795:3:26"
                            },
                            "nativeSrc": "14795:16:26",
                            "nodeType": "YulFunctionCall",
                            "src": "14795:16:26"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nativeSrc": "14788:3:26",
                              "nodeType": "YulIdentifier",
                              "src": "14788:3:26"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
                    "nativeSrc": "14530:287:26",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nativeSrc": "14643:3:26",
                        "nodeType": "YulTypedName",
                        "src": "14643:3:26",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "14648:6:26",
                        "nodeType": "YulTypedName",
                        "src": "14648:6:26",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nativeSrc": "14659:3:26",
                        "nodeType": "YulTypedName",
                        "src": "14659:3:26",
                        "type": ""
                      }
                    ],
                    "src": "14530:287:26"
                  }
                ]
              },
              "contents": "{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function allocate_memory_1948() -> memPtr\n    {\n        memPtr := mload(0x40)\n        let newFreePtr := add(memPtr, 0x40)\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(0x40, newFreePtr)\n    }\n    function allocate_memory_1950() -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, 0xc0)\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function allocate_memory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function abi_decode_available_length_string(src, length, end) -> array\n    {\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        array := allocate_memory(add(and(add(length, 31), not(31)), 0x20))\n        mstore(array, length)\n        if gt(add(src, length), end) { revert(0, 0) }\n        calldatacopy(add(array, 0x20), src, length)\n        mstore(add(add(array, length), 0x20), 0)\n    }\n    function abi_decode_string(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        array := abi_decode_available_length_string(add(offset, 0x20), calldataload(offset), end)\n    }\n    function abi_decode_array_struct_FilePermissions_dyn(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let _2 := 0x20\n        let _3 := 0xffffffffffffffff\n        if gt(_1, _3) { panic_error_0x41() }\n        let _4 := shl(5, _1)\n        let dst := allocate_memory(add(_4, _2))\n        let dst_1 := dst\n        mstore(dst, _1)\n        dst := add(dst, _2)\n        let srcEnd := add(add(offset, _4), _2)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, _2)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            let innerOffset := calldataload(src)\n            if gt(innerOffset, _3)\n            {\n                let _5 := 0\n                revert(_5, _5)\n            }\n            let _6 := add(offset, innerOffset)\n            let _7 := 0x40\n            if slt(add(sub(end, _6), not(31)), _7)\n            {\n                let _8 := 0\n                revert(_8, _8)\n            }\n            let value := allocate_memory_1948()\n            mstore(value, abi_decode_address(add(_6, _2)))\n            let offset_1 := calldataload(add(_6, _7))\n            if gt(offset_1, _3)\n            {\n                let _9 := 0\n                revert(_9, _9)\n            }\n            mstore(add(value, _2), abi_decode_string(add(add(_6, offset_1), _2), end))\n            mstore(dst, value)\n            dst := add(dst, _2)\n        }\n        array := dst_1\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_array$_t_struct$_FilePermissions_$3515_memory_ptr_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_string(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_array_struct_FilePermissions_dyn(add(headStart, offset_1), dataEnd)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_addresst_bytes_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let _1 := add(headStart, offset)\n        if iszero(slt(add(_1, 0x1f), dataEnd)) { revert(0, 0) }\n        value1 := abi_decode_available_length_string(add(_1, 32), calldataload(_1), dataEnd)\n    }\n    function abi_decode_tuple_t_uint256t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_uint256t_array$_t_struct$_FilePermissions_$3515_memory_ptr_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value1 := abi_decode_array_struct_FilePermissions_dyn(add(headStart, offset), dataEnd)\n    }\n    function abi_decode_tuple_t_uint256t_struct$_Proof_$3477_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        let _1 := sub(dataEnd, headStart)\n        if slt(_1, 224) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        if slt(add(_1, not(31)), 0xc0) { revert(0, 0) }\n        let value := allocate_memory_1950()\n        let value_1 := calldataload(add(headStart, 32))\n        if iszero(eq(value_1, iszero(iszero(value_1)))) { revert(0, 0) }\n        mstore(value, value_1)\n        mstore(add(value, 32), calldataload(add(headStart, 64)))\n        mstore(add(value, 64), calldataload(add(headStart, 96)))\n        mstore(add(value, 96), calldataload(add(headStart, 128)))\n        mstore(add(value, 128), calldataload(add(headStart, 160)))\n        mstore(add(value, 160), calldataload(add(headStart, 0xc0)))\n        value1 := value\n    }\n    function abi_encode_tuple_t_address_t_string_memory_ptr_t_uint256_t_uint256__to_t_address_t_string_memory_ptr_t_uint256_t_uint256__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), 128)\n        tail := abi_encode_string(value1, add(headStart, 128))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_struct$_Proof_$3477_memory_ptr__to_t_struct$_Proof_$3477_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 192)\n        mstore(headStart, iszero(iszero(mload(value0))))\n        mstore(add(headStart, 0x20), mload(add(value0, 0x20)))\n        mstore(add(headStart, 0x40), mload(add(value0, 0x40)))\n        mstore(add(headStart, 0x60), mload(add(value0, 0x60)))\n        mstore(add(headStart, 0x80), mload(add(value0, 0x80)))\n        mstore(add(headStart, 0xa0), mload(add(value0, 0xa0)))\n    }\n    function abi_decode_tuple_t_string_memory_ptr(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value0 := abi_decode_string(add(headStart, offset), dataEnd)\n    }\n    function abi_encode_tuple_t_struct$_FileResponse_$3510_memory_ptr__to_t_struct$_FileResponse_$3510_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), mload(value0))\n        mstore(add(headStart, 64), and(mload(add(value0, 32)), sub(shl(160, 1), 1)))\n        let memberValue0 := mload(add(value0, 64))\n        mstore(add(headStart, 96), 0xa0)\n        let tail_1 := abi_encode_string(memberValue0, add(headStart, 192))\n        mstore(add(headStart, 128), mload(add(value0, 96)))\n        mstore(add(headStart, 0xa0), mload(add(value0, 128)))\n        tail := tail_1\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n        ret := add(value, 1)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint64__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffff))\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(0, array)\n            let data := keccak256(0, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := 0x20\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_bytes32_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_address_t_bytes32__to_t_address_t_bytes32__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n}",
              "id": 26,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "immutableReferences": {
            "968": [
              {
                "length": 32,
                "start": 4630
              },
              {
                "length": 32,
                "start": 4671
              },
              {
                "length": 32,
                "start": 4992
              }
            ]
          },
          "linkReferences": {},
          "object": "6080604052600436106101e35760003560e01c80638456cb5911610102578063c99b680311610095578063e30c397811610064578063e30c3978146105db578063eb9b9b64146105f0578063f2fde38b14610610578063f4c714b41461063057600080fd5b8063c99b680314610517578063cd35364a14610537578063d547741f146105a5578063dfb5e9ba146105c557600080fd5b8063a217fddf116100d1578063a217fddf14610481578063ac1abb6814610496578063ad3cb1cc146104c6578063c4d66de8146104f757600080fd5b80638456cb59146104175780638da5cb5b1461042c578063905c26861461044157806391d148541461046157600080fd5b806352d1902d1161017a57806367a3f59b1161014957806367a3f59b14610370578063715018a6146103cd5780637468cd62146103e257806379ba50971461040257600080fd5b806352d1902d146102f557806354fd4d501461030a5780635c975abb1461031e57806360f1c43a1461034357600080fd5b80633bbaf127116101b65780633bbaf1271461028d5780633f4ba83a146102ad5780633ff36d65146102c25780634f1ef286146102e257600080fd5b806301ffc9a7146101e8578063248a9ca31461021d5780632f2ff15d1461024b57806336568abe1461026d575b600080fd5b3480156101f457600080fd5b5061020861020336600461185f565b61065d565b60405190151581526020015b60405180910390f35b34801561022957600080fd5b5061023d610238366004611889565b610694565b604051908152602001610214565b34801561025757600080fd5b5061026b6102663660046118b9565b6106b6565b005b34801561027957600080fd5b5061026b6102883660046118b9565b6106d8565b34801561029957600080fd5b5061023d6102a8366004611ad4565b610710565b3480156102b957600080fd5b5061026b610739565b3480156102ce57600080fd5b5061026b6102dd366004611889565b61074b565b61026b6102f0366004611b38565b6107d6565b34801561030157600080fd5b5061023d6107f5565b34801561031657600080fd5b50600161023d565b34801561032a57600080fd5b50600080516020611fb58339815191525460ff16610208565b34801561034f57600080fd5b5061036361035e3660046118b9565b610812565b6040516102149190611be0565b34801561037c57600080fd5b506103b561038b366004611bf3565b6000918252600160209081526040808420928452600490920190529020546001600160a01b031690565b6040516001600160a01b039091168152602001610214565b3480156103d957600080fd5b5061026b6108cc565b3480156103ee57600080fd5b5061026b6103fd366004611c15565b6108de565b34801561040e57600080fd5b5061026b610927565b34801561042357600080fd5b5061026b610974565b34801561043857600080fd5b506103b5610984565b34801561044d57600080fd5b5061026b61045c366004611c52565b6109b9565b34801561046d57600080fd5b5061020861047c3660046118b9565b6109cc565b34801561048d57600080fd5b5061023d600081565b3480156104a257600080fd5b506104b66104b1366004611889565b610a04565b6040516102149493929190611cd9565b3480156104d257600080fd5b50610363604051806040016040528060058152602001640352e302e360dc1b81525081565b34801561050357600080fd5b5061026b610512366004611d10565b610ac0565b34801561052357600080fd5b5061026b610532366004611c52565b610bf0565b34801561054357600080fd5b506105576105523660046118b9565b610c03565b6040516102149190600060c0820190508251151582526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015292915050565b3480156105b157600080fd5b5061026b6105c03660046118b9565b610cb7565b3480156105d157600080fd5b5061023d60005481565b3480156105e757600080fd5b506103b5610cd3565b3480156105fc57600080fd5b5061023d61060b366004611d2b565b610cfc565b34801561061c57600080fd5b5061026b61062b366004611d10565b610d19565b34801561063c57600080fd5b5061065061064b366004611889565b610d9e565b6040516102149190611d68565b60006001600160e01b03198216637965db0b60e01b148061068e57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000908152600080516020611f95833981519152602052604090206001015490565b6106bf82610694565b6106c881610ebb565b6106d28383610ec5565b50505050565b6001600160a01b03811633146107015760405163334bd91960e11b815260040160405180910390fd5b61070b8282610f6a565b505050565b600061071a610fe6565b61072383611017565b61072f600054836110b6565b5060005492915050565b610741611179565b6107496111ab565b565b610753610fe6565b600081815260016020526040812060030180549161077083611dc0565b909155505060008181526001602090815260408083206003810154845260040190915280822080546001600160a01b031916339081179091559051909183917f539186f88413c222585ff95ba62e32a55eb0153d0265293bfe5b2c324935a0a49190a350565b6107de61120b565b6107e7826112b0565b6107f182826112b8565b5050565b60006107ff611375565b50600080516020611f7583398151915290565b60008281526001602090815260408083206001600160a01b0385168452600501909152902080546060919061084690611de7565b80601f016020809104026020016040519081016040528092919081815260200182805461087290611de7565b80156108bf5780601f10610894576101008083540402835291602001916108bf565b820191906000526020600020905b8154815290600101906020018083116108a257829003601f168201915b5050505050905092915050565b6108d4611179565b61074960006113be565b6108e6610fe6565b6000828152600160205260409020546001600160a01b0316331461091d5760405163abea322960e01b815260040160405180910390fd5b6107f182826110b6565b3380610931610cd3565b6001600160a01b0316146109685760405163118cdaa760e01b81526001600160a01b03821660048201526024015b60405180910390fd5b610971816113be565b50565b61097c611179565b6107496113f6565b6000807f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c1993005b546001600160a01b031692915050565b6109c1610fe6565b6107f132838361143f565b6000918252600080516020611f95833981519152602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6001602081905260009182526040909120805491810180546001600160a01b0390931692610a3190611de7565b80601f0160208091040260200160405190810160405280929190818152602001828054610a5d90611de7565b8015610aaa5780601f10610a7f57610100808354040283529160200191610aaa565b820191906000526020600020905b815481529060010190602001808311610a8d57829003601f168201915b5050505050908060020154908060030154905084565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff16600081158015610b065750825b905060008267ffffffffffffffff166001148015610b235750303b155b905081158015610b31575080155b15610b4f5760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff191660011785558315610b7957845460ff60401b1916600160401b1785555b610b8161152b565b610b8961152b565b610b91611533565b610b9961152b565b610ba2866113be565b8315610be857845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050565b610bf8610fe6565b6107f133838361143f565b610c3e6040518060c0016040528060001515815260200160008152602001600081526020016000815260200160008152602001600081525090565b506040805160c0810182526000938452600160208181528386206001600160a01b03959095168087526006909501808252848720805460ff16151585529283015482850152600283015494840194909452600382015460608401526004820154608084015293909452915260059091015460a082015290565b610cc082610694565b610cc981610ebb565b6106d28383610f6a565b6000807f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c006109a9565b6000610d06610fe6565b610d0f82611017565b506000545b919050565b610d21611179565b7f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c0080546001600160a01b0319166001600160a01b0383169081178255610d65610984565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a35050565b610dd96040518060a001604052806000815260200160006001600160a01b031681526020016060815260200160008152602001600081525090565b600082815260016020818152604092839020835160a08101855286815281546001600160a01b03169281019290925291820180549293919291830191610e1e90611de7565b80601f0160208091040260200160405190810160405280929190818152602001828054610e4a90611de7565b8015610e975780601f10610e6c57610100808354040283529160200191610e97565b820191906000526020600020905b815481529060010190602001808311610e7a57829003601f168201915b50505050508152602001826002015481526020018260030154815250915050919050565b6109718133611543565b6000600080516020611f95833981519152610ee084846109cc565b610f60576000848152602082815260408083206001600160a01b03871684529091529020805460ff19166001179055610f163390565b6001600160a01b0316836001600160a01b0316857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4600191505061068e565b600091505061068e565b6000600080516020611f95833981519152610f8584846109cc565b15610f60576000848152602082815260408083206001600160a01b0387168085529252808320805460ff1916905551339287917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a4600191505061068e565b600080516020611fb58339815191525460ff16156107495760405163d93c066560e01b815260040160405180910390fd5b60008054908061102683611dc0565b909155505060008054815260016020819052604080832080546001600160a01b03191633179055825483529091200161105f8282611e69565b506000805481526001602052604080822043600290910155905490513391907f2980b13036c0d9df6b71ea9e9c09536efd24d7dd1868e29aa730f0c3fbd1a0dc906110ab908590611be0565b60405180910390a350565b60005b815181101561070b5760008282815181106110d6576110d6611f29565b602002602001015160000151905060008383815181106110f8576110f8611f29565b60209081029190910181015181015160008781526001835260408082206001600160a01b0387168352600501909352919091209091506111388282611e69565b506040516001600160a01b0383169086907f6e0403ef2b13328247bf9260ad8dd9c18fb5a18b95ea25de817ca991da05929b90600090a350506001016110b9565b33611182610984565b6001600160a01b0316146107495760405163118cdaa760e01b815233600482015260240161095f565b6111b361157c565b600080516020611fb5833981519152805460ff191681557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a150565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061129257507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611286600080516020611f75833981519152546001600160a01b031690565b6001600160a01b031614155b156107495760405163703e46dd60e11b815260040160405180910390fd5b610971611179565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611312575060408051601f3d908101601f1916820190925261130f91810190611f3f565b60015b61133a57604051634c9c8ce360e01b81526001600160a01b038316600482015260240161095f565b600080516020611f75833981519152811461136b57604051632a87526960e21b81526004810182905260240161095f565b61070b83836115ac565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107495760405163703e46dd60e11b815260040160405180910390fd5b7f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c0080546001600160a01b03191681556107f182611602565b6113fe610fe6565b600080516020611fb5833981519152805460ff191660011781557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258336111ed565b60008281526001602090815260408083206001600160a01b03871684526005019091529020805461146f90611de7565b905060000361149157604051630e98031160e21b815260040160405180910390fd5b60008281526001602081815260408084206001600160a01b038816808652600690910183528185208651815460ff19169015151781559286015193830193909355848101516002830155606085015160038301556080850151600483015560a085015160059092019190915551909184917f1f310120c84fb25b6c2653131bfefa18228693a3138d87303ca4a51570f600d29190a3505050565b610749611673565b61153b611673565b6107496116bc565b61154d82826109cc565b6107f15760405163e2517d3f60e01b81526001600160a01b03821660048201526024810183905260440161095f565b600080516020611fb58339815191525460ff1661074957604051638dfc202b60e01b815260040160405180910390fd5b6115b5826116dd565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a28051156115fa5761070b8282611742565b6107f16117b8565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff1661074957604051631afcd79f60e31b815260040160405180910390fd5b6116c4611673565b600080516020611fb5833981519152805460ff19169055565b806001600160a01b03163b60000361171357604051634c9c8ce360e01b81526001600160a01b038216600482015260240161095f565b600080516020611f7583398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b03168460405161175f9190611f58565b600060405180830381855af49150503d806000811461179a576040519150601f19603f3d011682016040523d82523d6000602084013e61179f565b606091505b50915091506117af8583836117d7565b95945050505050565b34156107495760405163b398979f60e01b815260040160405180910390fd5b6060826117ec576117e782611836565b61182f565b815115801561180357506001600160a01b0384163b155b1561182c57604051639996b31560e01b81526001600160a01b038516600482015260240161095f565b50805b9392505050565b8051156118465780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b60006020828403121561187157600080fd5b81356001600160e01b03198116811461182f57600080fd5b60006020828403121561189b57600080fd5b5035919050565b80356001600160a01b0381168114610d1457600080fd5b600080604083850312156118cc57600080fd5b823591506118dc602084016118a2565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561191e5761191e6118e5565b60405290565b60405160c0810167ffffffffffffffff8111828210171561191e5761191e6118e5565b604051601f8201601f1916810167ffffffffffffffff81118282101715611970576119706118e5565b604052919050565b600067ffffffffffffffff831115611992576119926118e5565b6119a5601f8401601f1916602001611947565b90508281528383830111156119b957600080fd5b828260208301376000602084830101529392505050565b600082601f8301126119e157600080fd5b61182f83833560208501611978565b600082601f830112611a0157600080fd5b8135602067ffffffffffffffff80831115611a1e57611a1e6118e5565b8260051b611a2d838201611947565b9384528581018301938381019088861115611a4757600080fd5b84880192505b85831015611ac857823584811115611a655760008081fd5b88016040818b03601f1901811315611a7d5760008081fd5b611a856118fb565b611a908884016118a2565b8152908201359086821115611aa55760008081fd5b611ab38c89848601016119d0565b81890152845250509184019190840190611a4d565b98975050505050505050565b60008060408385031215611ae757600080fd5b823567ffffffffffffffff80821115611aff57600080fd5b611b0b868387016119d0565b93506020850135915080821115611b2157600080fd5b50611b2e858286016119f0565b9150509250929050565b60008060408385031215611b4b57600080fd5b611b54836118a2565b9150602083013567ffffffffffffffff811115611b7057600080fd5b8301601f81018513611b8157600080fd5b611b2e85823560208401611978565b60005b83811015611bab578181015183820152602001611b93565b50506000910152565b60008151808452611bcc816020860160208601611b90565b601f01601f19169290920160200192915050565b60208152600061182f6020830184611bb4565b60008060408385031215611c0657600080fd5b50508035926020909101359150565b60008060408385031215611c2857600080fd5b82359150602083013567ffffffffffffffff811115611c4657600080fd5b611b2e858286016119f0565b60008082840360e0811215611c6657600080fd5b8335925060c0601f1982011215611c7c57600080fd5b50611c85611924565b60208401358015158114611c9857600080fd5b8082525060408401356020820152606084013560408201526080840135606082015260a0840135608082015260c084013560a0820152809150509250929050565b6001600160a01b0385168152608060208201819052600090611cfd90830186611bb4565b6040830194909452506060015292915050565b600060208284031215611d2257600080fd5b61182f826118a2565b600060208284031215611d3d57600080fd5b813567ffffffffffffffff811115611d5457600080fd5b611d60848285016119d0565b949350505050565b602081528151602082015260018060a01b0360208301511660408201526000604083015160a06060840152611da060c0840182611bb4565b905060608401516080840152608084015160a08401528091505092915050565b600060018201611de057634e487b7160e01b600052601160045260246000fd5b5060010190565b600181811c90821680611dfb57607f821691505b602082108103611e1b57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561070b576000816000526020600020601f850160051c81016020861015611e4a5750805b601f850160051c820191505b81811015610be857828155600101611e56565b815167ffffffffffffffff811115611e8357611e836118e5565b611e9781611e918454611de7565b84611e21565b602080601f831160018114611ecc5760008415611eb45750858301515b600019600386901b1c1916600185901b178555610be8565b600085815260208120601f198616915b82811015611efb57888601518255948401946001909101908401611edc565b5085821015611f195787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b600060208284031215611f5157600080fd5b5051919050565b60008251611f6a818460208701611b90565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800cd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300a264697066735822122076bf878f1d536c006076736c1bdd44399982e69b61c253234292fb9fd63579d364736f6c63430008180033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1E3 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8456CB59 GT PUSH2 0x102 JUMPI DUP1 PUSH4 0xC99B6803 GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xE30C3978 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xE30C3978 EQ PUSH2 0x5DB JUMPI DUP1 PUSH4 0xEB9B9B64 EQ PUSH2 0x5F0 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x610 JUMPI DUP1 PUSH4 0xF4C714B4 EQ PUSH2 0x630 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xC99B6803 EQ PUSH2 0x517 JUMPI DUP1 PUSH4 0xCD35364A EQ PUSH2 0x537 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x5A5 JUMPI DUP1 PUSH4 0xDFB5E9BA EQ PUSH2 0x5C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA217FDDF GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x481 JUMPI DUP1 PUSH4 0xAC1ABB68 EQ PUSH2 0x496 JUMPI DUP1 PUSH4 0xAD3CB1CC EQ PUSH2 0x4C6 JUMPI DUP1 PUSH4 0xC4D66DE8 EQ PUSH2 0x4F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x417 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x42C JUMPI DUP1 PUSH4 0x905C2686 EQ PUSH2 0x441 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x461 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x52D1902D GT PUSH2 0x17A JUMPI DUP1 PUSH4 0x67A3F59B GT PUSH2 0x149 JUMPI DUP1 PUSH4 0x67A3F59B EQ PUSH2 0x370 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x3CD JUMPI DUP1 PUSH4 0x7468CD62 EQ PUSH2 0x3E2 JUMPI DUP1 PUSH4 0x79BA5097 EQ PUSH2 0x402 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x52D1902D EQ PUSH2 0x2F5 JUMPI DUP1 PUSH4 0x54FD4D50 EQ PUSH2 0x30A JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x31E JUMPI DUP1 PUSH4 0x60F1C43A EQ PUSH2 0x343 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3BBAF127 GT PUSH2 0x1B6 JUMPI DUP1 PUSH4 0x3BBAF127 EQ PUSH2 0x28D JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x2AD JUMPI DUP1 PUSH4 0x3FF36D65 EQ PUSH2 0x2C2 JUMPI DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0x2E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1E8 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x21D JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x24B JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x26D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x208 PUSH2 0x203 CALLDATASIZE PUSH1 0x4 PUSH2 0x185F JUMP JUMPDEST PUSH2 0x65D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x229 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH2 0x238 CALLDATASIZE PUSH1 0x4 PUSH2 0x1889 JUMP JUMPDEST PUSH2 0x694 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x214 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x257 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26B PUSH2 0x266 CALLDATASIZE PUSH1 0x4 PUSH2 0x18B9 JUMP JUMPDEST PUSH2 0x6B6 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x279 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26B PUSH2 0x288 CALLDATASIZE PUSH1 0x4 PUSH2 0x18B9 JUMP JUMPDEST PUSH2 0x6D8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x299 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH2 0x2A8 CALLDATASIZE PUSH1 0x4 PUSH2 0x1AD4 JUMP JUMPDEST PUSH2 0x710 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26B PUSH2 0x739 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26B PUSH2 0x2DD CALLDATASIZE PUSH1 0x4 PUSH2 0x1889 JUMP JUMPDEST PUSH2 0x74B JUMP JUMPDEST PUSH2 0x26B PUSH2 0x2F0 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B38 JUMP JUMPDEST PUSH2 0x7D6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x301 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH2 0x7F5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x316 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH2 0x23D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x32A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1FB5 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0xFF AND PUSH2 0x208 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x34F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x363 PUSH2 0x35E CALLDATASIZE PUSH1 0x4 PUSH2 0x18B9 JUMP JUMPDEST PUSH2 0x812 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x214 SWAP2 SWAP1 PUSH2 0x1BE0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x37C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3B5 PUSH2 0x38B CALLDATASIZE PUSH1 0x4 PUSH2 0x1BF3 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP3 DUP5 MSTORE PUSH1 0x4 SWAP1 SWAP3 ADD SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x214 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26B PUSH2 0x8CC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26B PUSH2 0x3FD CALLDATASIZE PUSH1 0x4 PUSH2 0x1C15 JUMP JUMPDEST PUSH2 0x8DE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x40E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26B PUSH2 0x927 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x423 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26B PUSH2 0x974 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x438 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3B5 PUSH2 0x984 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x44D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26B PUSH2 0x45C CALLDATASIZE PUSH1 0x4 PUSH2 0x1C52 JUMP JUMPDEST PUSH2 0x9B9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x46D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x208 PUSH2 0x47C CALLDATASIZE PUSH1 0x4 PUSH2 0x18B9 JUMP JUMPDEST PUSH2 0x9CC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x48D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH1 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4B6 PUSH2 0x4B1 CALLDATASIZE PUSH1 0x4 PUSH2 0x1889 JUMP JUMPDEST PUSH2 0xA04 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x214 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1CD9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x363 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH5 0x352E302E3 PUSH1 0xDC SHL DUP2 MSTORE POP DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x503 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26B PUSH2 0x512 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D10 JUMP JUMPDEST PUSH2 0xAC0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x523 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26B PUSH2 0x532 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C52 JUMP JUMPDEST PUSH2 0xBF0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x543 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x557 PUSH2 0x552 CALLDATASIZE PUSH1 0x4 PUSH2 0x18B9 JUMP JUMPDEST PUSH2 0xC03 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x214 SWAP2 SWAP1 PUSH1 0x0 PUSH1 0xC0 DUP3 ADD SWAP1 POP DUP3 MLOAD ISZERO ISZERO DUP3 MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0xA0 DUP4 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26B PUSH2 0x5C0 CALLDATASIZE PUSH1 0x4 PUSH2 0x18B9 JUMP JUMPDEST PUSH2 0xCB7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3B5 PUSH2 0xCD3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH2 0x60B CALLDATASIZE PUSH1 0x4 PUSH2 0x1D2B JUMP JUMPDEST PUSH2 0xCFC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x61C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26B PUSH2 0x62B CALLDATASIZE PUSH1 0x4 PUSH2 0x1D10 JUMP JUMPDEST PUSH2 0xD19 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x63C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x650 PUSH2 0x64B CALLDATASIZE PUSH1 0x4 PUSH2 0x1889 JUMP JUMPDEST PUSH2 0xD9E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x214 SWAP2 SWAP1 PUSH2 0x1D68 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x7965DB0B PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x68E JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1F95 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x6BF DUP3 PUSH2 0x694 JUMP JUMPDEST PUSH2 0x6C8 DUP2 PUSH2 0xEBB JUMP JUMPDEST PUSH2 0x6D2 DUP4 DUP4 PUSH2 0xEC5 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0x701 JUMPI PUSH1 0x40 MLOAD PUSH4 0x334BD919 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x70B DUP3 DUP3 PUSH2 0xF6A JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x71A PUSH2 0xFE6 JUMP JUMPDEST PUSH2 0x723 DUP4 PUSH2 0x1017 JUMP JUMPDEST PUSH2 0x72F PUSH1 0x0 SLOAD DUP4 PUSH2 0x10B6 JUMP JUMPDEST POP PUSH1 0x0 SLOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x741 PUSH2 0x1179 JUMP JUMPDEST PUSH2 0x749 PUSH2 0x11AB JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x753 PUSH2 0xFE6 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x3 ADD DUP1 SLOAD SWAP2 PUSH2 0x770 DUP4 PUSH2 0x1DC0 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x3 DUP2 ADD SLOAD DUP5 MSTORE PUSH1 0x4 ADD SWAP1 SWAP2 MSTORE DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD SWAP1 SWAP2 DUP4 SWAP2 PUSH32 0x539186F88413C222585FF95BA62E32A55EB0153D0265293BFE5B2C324935A0A4 SWAP2 SWAP1 LOG3 POP JUMP JUMPDEST PUSH2 0x7DE PUSH2 0x120B JUMP JUMPDEST PUSH2 0x7E7 DUP3 PUSH2 0x12B0 JUMP JUMPDEST PUSH2 0x7F1 DUP3 DUP3 PUSH2 0x12B8 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7FF PUSH2 0x1375 JUMP JUMPDEST POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1F75 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE PUSH1 0x5 ADD SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x60 SWAP2 SWAP1 PUSH2 0x846 SWAP1 PUSH2 0x1DE7 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x872 SWAP1 PUSH2 0x1DE7 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x8BF JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x894 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x8BF JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x8A2 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x8D4 PUSH2 0x1179 JUMP JUMPDEST PUSH2 0x749 PUSH1 0x0 PUSH2 0x13BE JUMP JUMPDEST PUSH2 0x8E6 PUSH2 0xFE6 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x91D JUMPI PUSH1 0x40 MLOAD PUSH4 0xABEA3229 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x7F1 DUP3 DUP3 PUSH2 0x10B6 JUMP JUMPDEST CALLER DUP1 PUSH2 0x931 PUSH2 0xCD3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x968 JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x971 DUP2 PUSH2 0x13BE JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x97C PUSH2 0x1179 JUMP JUMPDEST PUSH2 0x749 PUSH2 0x13F6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x9016D09D72D40FDAE2FD8CEAC6B6234C7706214FD39C1CD1E609A0528C199300 JUMPDEST SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x9C1 PUSH2 0xFE6 JUMP JUMPDEST PUSH2 0x7F1 ORIGIN DUP4 DUP4 PUSH2 0x143F JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1F95 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD SWAP2 DUP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND SWAP3 PUSH2 0xA31 SWAP1 PUSH2 0x1DE7 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xA5D SWAP1 PUSH2 0x1DE7 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xAAA JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xA7F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xAAA JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xA8D JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 DUP1 PUSH1 0x2 ADD SLOAD SWAP1 DUP1 PUSH1 0x3 ADD SLOAD SWAP1 POP DUP5 JUMP JUMPDEST PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 DUP1 SLOAD PUSH1 0x1 PUSH1 0x40 SHL DUP2 DIV PUSH1 0xFF AND ISZERO SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP2 ISZERO DUP1 ISZERO PUSH2 0xB06 JUMPI POP DUP3 JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x1 EQ DUP1 ISZERO PUSH2 0xB23 JUMPI POP ADDRESS EXTCODESIZE ISZERO JUMPDEST SWAP1 POP DUP2 ISZERO DUP1 ISZERO PUSH2 0xB31 JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0xB4F JUMPI PUSH1 0x40 MLOAD PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 OR DUP6 SSTORE DUP4 ISZERO PUSH2 0xB79 JUMPI DUP5 SLOAD PUSH1 0xFF PUSH1 0x40 SHL NOT AND PUSH1 0x1 PUSH1 0x40 SHL OR DUP6 SSTORE JUMPDEST PUSH2 0xB81 PUSH2 0x152B JUMP JUMPDEST PUSH2 0xB89 PUSH2 0x152B JUMP JUMPDEST PUSH2 0xB91 PUSH2 0x1533 JUMP JUMPDEST PUSH2 0xB99 PUSH2 0x152B JUMP JUMPDEST PUSH2 0xBA2 DUP7 PUSH2 0x13BE JUMP JUMPDEST DUP4 ISZERO PUSH2 0xBE8 JUMPI DUP5 SLOAD PUSH1 0xFF PUSH1 0x40 SHL NOT AND DUP6 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0xC7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xBF8 PUSH2 0xFE6 JUMP JUMPDEST PUSH2 0x7F1 CALLER DUP4 DUP4 PUSH2 0x143F JUMP JUMPDEST PUSH2 0xC3E PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 SWAP4 DUP5 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE DUP4 DUP7 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 SWAP1 SWAP6 AND DUP1 DUP8 MSTORE PUSH1 0x6 SWAP1 SWAP6 ADD DUP1 DUP3 MSTORE DUP5 DUP8 KECCAK256 DUP1 SLOAD PUSH1 0xFF AND ISZERO ISZERO DUP6 MSTORE SWAP3 DUP4 ADD SLOAD DUP3 DUP6 ADD MSTORE PUSH1 0x2 DUP4 ADD SLOAD SWAP5 DUP5 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x3 DUP3 ADD SLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x4 DUP3 ADD SLOAD PUSH1 0x80 DUP5 ADD MSTORE SWAP4 SWAP1 SWAP5 MSTORE SWAP2 MSTORE PUSH1 0x5 SWAP1 SWAP2 ADD SLOAD PUSH1 0xA0 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH2 0xCC0 DUP3 PUSH2 0x694 JUMP JUMPDEST PUSH2 0xCC9 DUP2 PUSH2 0xEBB JUMP JUMPDEST PUSH2 0x6D2 DUP4 DUP4 PUSH2 0xF6A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x237E158222E3E6968B72B9DB0D8043AACF074AD9F650F0D1606B4D82EE432C00 PUSH2 0x9A9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD06 PUSH2 0xFE6 JUMP JUMPDEST PUSH2 0xD0F DUP3 PUSH2 0x1017 JUMP JUMPDEST POP PUSH1 0x0 SLOAD JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xD21 PUSH2 0x1179 JUMP JUMPDEST PUSH32 0x237E158222E3E6968B72B9DB0D8043AACF074AD9F650F0D1606B4D82EE432C00 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 DUP2 OR DUP3 SSTORE PUSH2 0xD65 PUSH2 0x984 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x38D16B8CAC22D99FC7C124B9CD0DE2D3FA1FAEF420BFE791D8C362D765E22700 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0xDD9 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP3 DUP4 SWAP1 KECCAK256 DUP4 MLOAD PUSH1 0xA0 DUP2 ADD DUP6 MSTORE DUP7 DUP2 MSTORE DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP2 DUP3 ADD DUP1 SLOAD SWAP3 SWAP4 SWAP2 SWAP3 SWAP2 DUP4 ADD SWAP2 PUSH2 0xE1E SWAP1 PUSH2 0x1DE7 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xE4A SWAP1 PUSH2 0x1DE7 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xE97 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xE6C JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xE97 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xE7A JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x2 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x3 ADD SLOAD DUP2 MSTORE POP SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x971 DUP2 CALLER PUSH2 0x1543 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1F95 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xEE0 DUP5 DUP5 PUSH2 0x9CC JUMP JUMPDEST PUSH2 0xF60 JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0xF16 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH1 0x1 SWAP2 POP POP PUSH2 0x68E JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP PUSH2 0x68E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1F95 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xF85 DUP5 DUP5 PUSH2 0x9CC JUMP JUMPDEST ISZERO PUSH2 0xF60 JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP8 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 PUSH1 0x1 SWAP2 POP POP PUSH2 0x68E JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1FB5 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x749 JUMPI PUSH1 0x40 MLOAD PUSH4 0xD93C0665 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 DUP1 PUSH2 0x1026 DUP4 PUSH2 0x1DC0 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x0 DUP1 SLOAD DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER OR SWAP1 SSTORE DUP3 SLOAD DUP4 MSTORE SWAP1 SWAP2 KECCAK256 ADD PUSH2 0x105F DUP3 DUP3 PUSH2 0x1E69 JUMP JUMPDEST POP PUSH1 0x0 DUP1 SLOAD DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 NUMBER PUSH1 0x2 SWAP1 SWAP2 ADD SSTORE SWAP1 SLOAD SWAP1 MLOAD CALLER SWAP2 SWAP1 PUSH32 0x2980B13036C0D9DF6B71EA9E9C09536EFD24D7DD1868E29AA730F0C3FBD1A0DC SWAP1 PUSH2 0x10AB SWAP1 DUP6 SWAP1 PUSH2 0x1BE0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x70B JUMPI PUSH1 0x0 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x10D6 JUMPI PUSH2 0x10D6 PUSH2 0x1F29 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD SWAP1 POP PUSH1 0x0 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x10F8 JUMPI PUSH2 0x10F8 PUSH2 0x1F29 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD DUP2 ADD MLOAD PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x1 DUP4 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP4 MSTORE PUSH1 0x5 ADD SWAP1 SWAP4 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SWAP1 SWAP2 POP PUSH2 0x1138 DUP3 DUP3 PUSH2 0x1E69 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 DUP7 SWAP1 PUSH32 0x6E0403EF2B13328247BF9260AD8DD9C18FB5A18B95EA25DE817CA991DA05929B SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP PUSH1 0x1 ADD PUSH2 0x10B9 JUMP JUMPDEST CALLER PUSH2 0x1182 PUSH2 0x984 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x749 JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x95F JUMP JUMPDEST PUSH2 0x11B3 PUSH2 0x157C JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1FB5 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0xFF NOT AND DUP2 SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA CALLER JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ DUP1 PUSH2 0x1292 JUMPI POP PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1286 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1F75 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x749 JUMPI PUSH1 0x40 MLOAD PUSH4 0x703E46DD PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x971 PUSH2 0x1179 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x52D1902D PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1312 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x130F SWAP2 DUP2 ADD SWAP1 PUSH2 0x1F3F JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x133A JUMPI PUSH1 0x40 MLOAD PUSH4 0x4C9C8CE3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x95F JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1F75 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 EQ PUSH2 0x136B JUMPI PUSH1 0x40 MLOAD PUSH4 0x2A875269 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x95F JUMP JUMPDEST PUSH2 0x70B DUP4 DUP4 PUSH2 0x15AC JUMP JUMPDEST ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x749 JUMPI PUSH1 0x40 MLOAD PUSH4 0x703E46DD PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x237E158222E3E6968B72B9DB0D8043AACF074AD9F650F0D1606B4D82EE432C00 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND DUP2 SSTORE PUSH2 0x7F1 DUP3 PUSH2 0x1602 JUMP JUMPDEST PUSH2 0x13FE PUSH2 0xFE6 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1FB5 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR DUP2 SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 CALLER PUSH2 0x11ED JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE PUSH1 0x5 ADD SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH2 0x146F SWAP1 PUSH2 0x1DE7 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 SUB PUSH2 0x1491 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE980311 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND DUP1 DUP7 MSTORE PUSH1 0x6 SWAP1 SWAP2 ADD DUP4 MSTORE DUP2 DUP6 KECCAK256 DUP7 MLOAD DUP2 SLOAD PUSH1 0xFF NOT AND SWAP1 ISZERO ISZERO OR DUP2 SSTORE SWAP3 DUP7 ADD MLOAD SWAP4 DUP4 ADD SWAP4 SWAP1 SWAP4 SSTORE DUP5 DUP2 ADD MLOAD PUSH1 0x2 DUP4 ADD SSTORE PUSH1 0x60 DUP6 ADD MLOAD PUSH1 0x3 DUP4 ADD SSTORE PUSH1 0x80 DUP6 ADD MLOAD PUSH1 0x4 DUP4 ADD SSTORE PUSH1 0xA0 DUP6 ADD MLOAD PUSH1 0x5 SWAP1 SWAP3 ADD SWAP2 SWAP1 SWAP2 SSTORE MLOAD SWAP1 SWAP2 DUP5 SWAP2 PUSH32 0x1F310120C84FB25B6C2653131BFEFA18228693A3138D87303CA4A51570F600D2 SWAP2 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x749 PUSH2 0x1673 JUMP JUMPDEST PUSH2 0x153B PUSH2 0x1673 JUMP JUMPDEST PUSH2 0x749 PUSH2 0x16BC JUMP JUMPDEST PUSH2 0x154D DUP3 DUP3 PUSH2 0x9CC JUMP JUMPDEST PUSH2 0x7F1 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE2517D3F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x95F JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1FB5 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0xFF AND PUSH2 0x749 JUMPI PUSH1 0x40 MLOAD PUSH4 0x8DFC202B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x15B5 DUP3 PUSH2 0x16DD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP1 PUSH1 0x0 SWAP1 LOG2 DUP1 MLOAD ISZERO PUSH2 0x15FA JUMPI PUSH2 0x70B DUP3 DUP3 PUSH2 0x1742 JUMP JUMPDEST PUSH2 0x7F1 PUSH2 0x17B8 JUMP JUMPDEST PUSH32 0x9016D09D72D40FDAE2FD8CEAC6B6234C7706214FD39C1CD1E609A0528C199300 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 DUP3 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP3 AND SWAP2 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 SLOAD PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x749 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1AFCD79F PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x16C4 PUSH2 0x1673 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1FB5 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EXTCODESIZE PUSH1 0x0 SUB PUSH2 0x1713 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4C9C8CE3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x95F JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1F75 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x40 MLOAD PUSH2 0x175F SWAP2 SWAP1 PUSH2 0x1F58 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x179A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x179F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x17AF DUP6 DUP4 DUP4 PUSH2 0x17D7 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x749 JUMPI PUSH1 0x40 MLOAD PUSH4 0xB398979F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x60 DUP3 PUSH2 0x17EC JUMPI PUSH2 0x17E7 DUP3 PUSH2 0x1836 JUMP JUMPDEST PUSH2 0x182F JUMP JUMPDEST DUP2 MLOAD ISZERO DUP1 ISZERO PUSH2 0x1803 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO JUMPDEST ISZERO PUSH2 0x182C JUMPI PUSH1 0x40 MLOAD PUSH4 0x9996B315 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x95F JUMP JUMPDEST POP DUP1 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD ISZERO PUSH2 0x1846 JUMPI DUP1 MLOAD DUP1 DUP3 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA12F521 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1871 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x182F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x189B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xD14 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x18CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x18DC PUSH1 0x20 DUP5 ADD PUSH2 0x18A2 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x191E JUMPI PUSH2 0x191E PUSH2 0x18E5 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xC0 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x191E JUMPI PUSH2 0x191E PUSH2 0x18E5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x1970 JUMPI PUSH2 0x1970 PUSH2 0x18E5 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT ISZERO PUSH2 0x1992 JUMPI PUSH2 0x1992 PUSH2 0x18E5 JUMP JUMPDEST PUSH2 0x19A5 PUSH1 0x1F DUP5 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH2 0x1947 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE DUP4 DUP4 DUP4 ADD GT ISZERO PUSH2 0x19B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP3 PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x19E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x182F DUP4 DUP4 CALLDATALOAD PUSH1 0x20 DUP6 ADD PUSH2 0x1978 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1A01 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP4 GT ISZERO PUSH2 0x1A1E JUMPI PUSH2 0x1A1E PUSH2 0x18E5 JUMP JUMPDEST DUP3 PUSH1 0x5 SHL PUSH2 0x1A2D DUP4 DUP3 ADD PUSH2 0x1947 JUMP JUMPDEST SWAP4 DUP5 MSTORE DUP6 DUP2 ADD DUP4 ADD SWAP4 DUP4 DUP2 ADD SWAP1 DUP9 DUP7 GT ISZERO PUSH2 0x1A47 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 DUP9 ADD SWAP3 POP JUMPDEST DUP6 DUP4 LT ISZERO PUSH2 0x1AC8 JUMPI DUP3 CALLDATALOAD DUP5 DUP2 GT ISZERO PUSH2 0x1A65 JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST DUP9 ADD PUSH1 0x40 DUP2 DUP12 SUB PUSH1 0x1F NOT ADD DUP2 SGT ISZERO PUSH2 0x1A7D JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST PUSH2 0x1A85 PUSH2 0x18FB JUMP JUMPDEST PUSH2 0x1A90 DUP9 DUP5 ADD PUSH2 0x18A2 JUMP JUMPDEST DUP2 MSTORE SWAP1 DUP3 ADD CALLDATALOAD SWAP1 DUP7 DUP3 GT ISZERO PUSH2 0x1AA5 JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST PUSH2 0x1AB3 DUP13 DUP10 DUP5 DUP7 ADD ADD PUSH2 0x19D0 JUMP JUMPDEST DUP2 DUP10 ADD MSTORE DUP5 MSTORE POP POP SWAP2 DUP5 ADD SWAP2 SWAP1 DUP5 ADD SWAP1 PUSH2 0x1A4D JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1AE7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1AFF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1B0B DUP7 DUP4 DUP8 ADD PUSH2 0x19D0 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1B21 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B2E DUP6 DUP3 DUP7 ADD PUSH2 0x19F0 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1B4B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1B54 DUP4 PUSH2 0x18A2 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1B70 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x1B81 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1B2E DUP6 DUP3 CALLDATALOAD PUSH1 0x20 DUP5 ADD PUSH2 0x1978 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1BAB JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1B93 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1BCC DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1B90 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x182F PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1BB4 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1C06 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1C28 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1C46 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1B2E DUP6 DUP3 DUP7 ADD PUSH2 0x19F0 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 SUB PUSH1 0xE0 DUP2 SLT ISZERO PUSH2 0x1C66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0xC0 PUSH1 0x1F NOT DUP3 ADD SLT ISZERO PUSH2 0x1C7C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1C85 PUSH2 0x1924 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1C98 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP3 MSTORE POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 DUP5 ADD CALLDATALOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x80 DUP5 ADD CALLDATALOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0xA0 DUP5 ADD CALLDATALOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xC0 DUP5 ADD CALLDATALOAD PUSH1 0xA0 DUP3 ADD MSTORE DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP2 MSTORE PUSH1 0x80 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x1CFD SWAP1 DUP4 ADD DUP7 PUSH2 0x1BB4 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD SWAP5 SWAP1 SWAP5 MSTORE POP PUSH1 0x60 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1D22 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x182F DUP3 PUSH2 0x18A2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1D3D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1D54 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D60 DUP5 DUP3 DUP6 ADD PUSH2 0x19D0 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE DUP2 MLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x20 DUP4 ADD MLOAD AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0xA0 PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x1DA0 PUSH1 0xC0 DUP5 ADD DUP3 PUSH2 0x1BB4 JUMP JUMPDEST SWAP1 POP PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x80 DUP5 ADD MLOAD PUSH1 0xA0 DUP5 ADD MSTORE DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x1DE0 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1DFB JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1E1B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x70B JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x1E4A JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xBE8 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x1E56 JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1E83 JUMPI PUSH2 0x1E83 PUSH2 0x18E5 JUMP JUMPDEST PUSH2 0x1E97 DUP2 PUSH2 0x1E91 DUP5 SLOAD PUSH2 0x1DE7 JUMP JUMPDEST DUP5 PUSH2 0x1E21 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x1ECC JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x1EB4 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0xBE8 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1EFB JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0x1EDC JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0x1F19 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1F51 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x1F6A DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1B90 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP INVALID CALLDATASIZE ADDMOD SWAP5 LOG1 EXTCODESIZE LOG1 LOG3 0x21 MOD PUSH8 0xC828492DB98DCA3E KECCAK256 PUSH23 0xCC3735A920A3CA505D382BBC02DD7BC7DEC4DCEEDDA775 0xE5 DUP14 0xD5 COINBASE 0xE0 DUP11 GT PUSH13 0x6C53815C0BD028192F7B626800 0xCD MCOPY 0xD1 TLOAD PUSH15 0x187E77E9AEE88184C21F4F2182AB58 0x27 0xCB EXTCODESIZE PUSH31 0x7FBEDCD63F03300A264697066735822122076BF878F1D536C006076736C1B 0xDD PREVRANDAO CODECOPY SWAP10 DUP3 0xE6 SWAP12 PUSH2 0xC253 0x23 TIMESTAMP SWAP3 0xFB SWAP16 0xD6 CALLDATALOAD PUSH26 0xD364736F6C634300081800330000000000000000000000000000 ",
          "sourceMap": "463:9108:17:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3443:202:0;;;;;;;;;;-1:-1:-1;3443:202:0;;;;;:::i;:::-;;:::i;:::-;;;470:14:26;;463:22;445:41;;433:2;418:18;3443:202:0;;;;;;;;4759:191;;;;;;;;;;-1:-1:-1;4759:191:0;;;;;:::i;:::-;;:::i;:::-;;;828:25:26;;;816:2;801:18;4759:191:0;682:177:26;5246:136:0;;;;;;;;;;-1:-1:-1;5246:136:0;;;;;:::i;:::-;;:::i;:::-;;6348:245;;;;;;;;;;-1:-1:-1;6348:245:0;;;;;:::i;:::-;;:::i;6174:266:17:-;;;;;;;;;;-1:-1:-1;6174:266:17;;;;;:::i;:::-;;:::i;3003:74::-;;;;;;;;;;;;;:::i;6580:283::-;;;;;;;;;;-1:-1:-1;6580:283:17;;;;;:::i;:::-;;:::i;4158:214:4:-;;;;;;:::i;:::-;;:::i;3705:134::-;;;;;;;;;;;;;:::i;2730:93:17:-;;;;;;;;;;-1:-1:-1;2815:1:17;2730:93;;2692:145:6;;;;;;;;;;-1:-1:-1;;;;;;;;;;;;2821:9:6;;;2692:145;;4486:170:17;;;;;;;;;;-1:-1:-1;4486:170:17;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;4033:168::-;;;;;;;;;;-1:-1:-1;4033:168:17;;;;;:::i;:::-;4128:7;4154:14;;;:6;:14;;;;;;;;:40;;;:33;;;;:40;;;;;-1:-1:-1;;;;;4154:40:17;;4033:168;;;;-1:-1:-1;;;;;7319:32:26;;;7301:51;;7289:2;7274:18;4033:168:17;7155:203:26;3155:101:2;;;;;;;;;;;;;:::i;7088:264:17:-;;;;;;;;;;-1:-1:-1;7088:264:17;;;;;:::i;:::-;;:::i;2774:229:1:-;;;;;;;;;;;;;:::i;2877:70:17:-;;;;;;;;;;;;;:::i;2441:144:2:-;;;;;;;;;;;;;:::i;7879::17:-;;;;;;;;;;-1:-1:-1;7879:144:17;;;;;:::i;:::-;;:::i;3732:207:0:-;;;;;;;;;;-1:-1:-1;3732:207:0;;;;;:::i;:::-;;:::i;2317:49::-;;;;;;;;;;-1:-1:-1;2317:49:0;2362:4;2317:49;;376:38:18;;;;;;;;;;-1:-1:-1;376:38:18;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;:::i;1819:58:4:-;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1819:58:4;;;;;2128:237:17;;;;;;;;;;-1:-1:-1;2128:237:17;;;;;:::i;:::-;;:::i;7546:139::-;;;;;;;;;;-1:-1:-1;7546:139:17;;;;;:::i;:::-;;:::i;4926:639::-;;;;;;;;;;-1:-1:-1;4926:639:17;;;;;:::i;:::-;;:::i;:::-;;;;;;9493:4:26;9535:3;9524:9;9520:19;9512:27;;9586:6;9580:13;9573:21;9566:29;9555:9;9548:48;9652:4;9644:6;9640:17;9634:24;9627:4;9616:9;9612:20;9605:54;9715:4;9707:6;9703:17;9697:24;9690:4;9679:9;9675:20;9668:54;9778:4;9770:6;9766:17;9760:24;9753:4;9742:9;9738:20;9731:54;9841:4;9833:6;9829:17;9823:24;9816:4;9805:9;9801:20;9794:54;9904:4;9896:6;9892:17;9886:24;9879:4;9868:9;9864:20;9857:54;9355:562;;;;;5662:138:0;;;;;;;;;;-1:-1:-1;5662:138:0;;;;;:::i;:::-;;:::i;336:34:18:-;;;;;;;;;;;;;;;;1680:168:1;;;;;;;;;;;;;:::i;5764:135:17:-;;;;;;;;;;-1:-1:-1;5764:135:17;;;;;:::i;:::-;;:::i;2041:247:1:-;;;;;;;;;;-1:-1:-1;2041:247:1;;;;;:::i;:::-;;:::i;3294:412:17:-;;;;;;;;;;-1:-1:-1;3294:412:17;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;3443:202:0:-;3528:4;-1:-1:-1;;;;;;3551:47:0;;-1:-1:-1;;;3551:47:0;;:87;;-1:-1:-1;;;;;;;;;;1133:40:8;;;3602:36:0;3544:94;3443:202;-1:-1:-1;;3443:202:0:o;4759:191::-;4824:7;4919:14;;;-1:-1:-1;;;;;;;;;;;4919:14:0;;;;;:24;;;;4759:191::o;5246:136::-;5320:18;5333:4;5320:12;:18::i;:::-;3191:16;3202:4;3191:10;:16::i;:::-;5350:25:::1;5361:4;5367:7;5350:10;:25::i;:::-;;5246:136:::0;;;:::o;6348:245::-;-1:-1:-1;;;;;6441:34:0;;966:10:5;6441:34:0;6437:102;;6498:30;;-1:-1:-1;;;6498:30:0;;;;;;;;;;;6437:102;6549:37;6561:4;6567:18;6549:11;:37::i;:::-;;6348:245;;:::o;6174:266:17:-;6325:7;2316:19:6;:17;:19::i;:::-;6344:13:17::1;6353:3;6344:8;:13::i;:::-;6367:38;6378:10;;6390:14;6367:10;:38::i;:::-;-1:-1:-1::0;6423:10:17::1;::::0;6174:266;;;;:::o;3003:74::-;2334:13:2;:11;:13::i;:::-;3060:10:17::1;:8;:10::i;:::-;3003:74::o:0;6580:283::-;2316:19:6;:17;:19::i;:::-;6665:14:17::1;::::0;;;:6:::1;:14;::::0;;;;:38:::1;;:40:::0;;;::::1;::::0;::::1;:::i;:::-;::::0;;;-1:-1:-1;;6715:14:17::1;::::0;;;:6:::1;:14;::::0;;;;;;;6749:38:::1;::::0;::::1;::::0;6715:73;;:33:::1;;:73:::0;;;;;;:86;;-1:-1:-1;;;;;;6715:86:17::1;6791:10;6715:86:::0;;::::1;::::0;;;6817:39;;6791:10;;6722:6;;6817:39:::1;::::0;6715:14;6817:39:::1;6580:283:::0;:::o;4158:214:4:-;2653:13;:11;:13::i;:::-;4273:36:::1;4291:17;4273;:36::i;:::-;4319:46;4341:17;4360:4;4319:21;:46::i;:::-;4158:214:::0;;:::o;3705:134::-;3774:7;2924:20;:18;:20::i;:::-;-1:-1:-1;;;;;;;;;;;;3705:134:4;:::o;4486:170:17:-;4611:14;;;;:6;:14;;;;;;;;-1:-1:-1;;;;;4611:38:17;;;;:26;;:38;;;;;4604:45;;4579:13;;4611:38;4604:45;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4486:170;;;;:::o;3155:101:2:-;2334:13;:11;:13::i;:::-;3219:30:::1;3246:1;3219:18;:30::i;7088:264:17:-:0;2316:19:6;:17;:19::i;:::-;7226:14:17::1;::::0;;;:6:::1;:14;::::0;;;;:27;-1:-1:-1;;;;;7226:27:17::1;7212:10;:41;7208:93;;7276:14;;-1:-1:-1::0;;;7276:14:17::1;;;;;;;;;;;7208:93;7311:34;7322:6;7330:14;7311:10;:34::i;2774:229:1:-:0;966:10:5;;2869:14:1;:12;:14::i;:::-;-1:-1:-1;;;;;2869:24:1;;2865:96;;2916:34;;-1:-1:-1;;;2916:34:1;;-1:-1:-1;;;;;7319:32:26;;2916:34:1;;;7301:51:26;7274:18;;2916:34:1;;;;;;;;2865:96;2970:26;2989:6;2970:18;:26::i;:::-;2816:187;2774:229::o;2877:70:17:-;2334:13:2;:11;:13::i;:::-;2932:8:17::1;:6;:8::i;2441:144:2:-:0;2487:7;;1313:22;2533:20;2570:8;-1:-1:-1;;;;;2570:8:2;;2441:144;-1:-1:-1;;2441:144:2:o;7879::17:-;2316:19:6;:17;:19::i;:::-;7981:35:17::1;7991:9;8002:6;8010:5;7981:9;:35::i;3732:207:0:-:0;3809:4;3901:14;;;-1:-1:-1;;;;;;;;;;;3901:14:0;;;;;;;;-1:-1:-1;;;;;3901:31:0;;;;;;;;;;;;;;;3732:207::o;376:38:18:-;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;376:38:18;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;2128:237:17:-;8870:21:3;4302:15;;-1:-1:-1;;;4302:15:3;;;;4301:16;;4348:14;;4158:30;4726:16;;:34;;;;;4746:14;4726:34;4706:54;;4770:17;4790:11;:16;;4805:1;4790:16;:50;;;;-1:-1:-1;4818:4:3;4810:25;:30;4790:50;4770:70;;4856:12;4855:13;:30;;;;;4873:12;4872:13;4855:30;4851:91;;;4908:23;;-1:-1:-1;;;4908:23:3;;;;;;;;;;;4851:91;4951:18;;-1:-1:-1;;4951:18:3;4968:1;4951:18;;;4979:67;;;;5013:22;;-1:-1:-1;;;;5013:22:3;-1:-1:-1;;;5013:22:3;;;4979:67;2201:21:17::1;:19;:21::i;:::-;2232:24;:22;:24::i;:::-;2266:17;:15;:17::i;:::-;2293:22;:20;:22::i;:::-;2326:32;2345:12;2326:18;:32::i;:::-;5070:14:3::0;5066:101;;;5100:23;;-1:-1:-1;;;;5100:23:3;;;5142:14;;-1:-1:-1;11674:50:26;;5142:14:3;;11662:2:26;11647:18;5142:14:3;;;;;;;5066:101;4092:1081;;;;;2128:237:17;:::o;7546:139::-;2316:19:6;:17;:19::i;:::-;7642:36:17::1;7652:10;7664:6;7672:5;7642:9;:36::i;4926:639::-:0;5014:12;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5014:12:17;-1:-1:-1;5117:441:17;;;;;;;;-1:-1:-1;5148:14:17;;;:6;:14;;;;;;;-1:-1:-1;;;;;5148:33:17;;;;;;;:21;;;;:33;;;;;;:39;;;;5117:441;;;;5212:39;;;;5117:441;;;;5283:46;;;;5117:441;;;;;;;5358:43;;;;5117:441;;;;5428:41;;;;5117:441;;;;5499:33;;;;;;:44;;;;;5117:441;;;;;4926:639::o;5662:138:0:-;5737:18;5750:4;5737:12;:18::i;:::-;3191:16;3202:4;3191:10;:16::i;:::-;5767:26:::1;5779:4;5785:7;5767:11;:26::i;1680:168:1:-:0;1733:7;;1318:27;1784:25;1187:174;5764:135:17;5832:7;2316:19:6;:17;:19::i;:::-;5851:13:17::1;5860:3;5851:8;:13::i;:::-;-1:-1:-1::0;5882:10:17::1;::::0;2345:1:6::1;5764:135:17::0;;;:::o;2041:247:1:-;2334:13:2;:11;:13::i;:::-;1318:27:1;2197:26;;-1:-1:-1;;;;;;2197:26:1::1;-1:-1:-1::0;;;;;2197:26:1;::::1;::::0;;::::1;::::0;;2263:7:::1;:5;:7::i;:::-;-1:-1:-1::0;;;;;2238:43:1::1;;;;;;;;;;;2120:168;2041:247:::0;:::o;3294:412:17:-;3348:19;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3348:19:17;3379:17;3399:14;;;:6;:14;;;;;;;;;3443:256;;;;;;;;;;3547:17;;-1:-1:-1;;;;;3547:17:17;3443:256;;;;;;;3507:8;;;3443:256;;3399:14;;3443:256;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3596:4;:17;;;3443:256;;;;3656:4;:28;;;3443:256;;;3424:275;;;3294:412;;;:::o;4148:103:0:-;4214:30;4225:4;966:10:5;4214::0;:30::i;7270:387::-;7347:4;-1:-1:-1;;;;;;;;;;;7437:22:0;7445:4;7451:7;7437;:22::i;:::-;7432:219;;7475:8;:14;;;;;;;;;;;-1:-1:-1;;;;;7475:31:0;;;;;;;;;:38;;-1:-1:-1;;7475:38:0;7509:4;7475:38;;;7559:12;966:10:5;;887:96;7559:12:0;-1:-1:-1;;;;;7532:40:0;7550:7;-1:-1:-1;;;;;7532:40:0;7544:4;7532:40;;;;;;;;;;7593:4;7586:11;;;;;7432:219;7635:5;7628:12;;;;;7892:388;7970:4;-1:-1:-1;;;;;;;;;;;8059:22:0;8067:4;8073:7;8059;:22::i;:::-;8055:219;;;8131:5;8097:14;;;;;;;;;;;-1:-1:-1;;;;;8097:31:0;;;;;;;;;;:39;;-1:-1:-1;;8097:39:0;;;8155:40;966:10:5;;8097:14:0;;8155:40;;8131:5;8155:40;8216:4;8209:11;;;;;2905:128:6;-1:-1:-1;;;;;;;;;;;2821:9:6;;;2966:61;;;3001:15;;-1:-1:-1;;;3001:15:6;;;;;;;;;;;9291:278:17;9347:10;:12;;;:10;:12;;;:::i;:::-;;;;-1:-1:-1;;9370:18:17;9377:10;;9370:18;;:6;:18;;;;;;;;:44;;-1:-1:-1;;;;;;9370:44:17;9404:10;9370:44;;;9431:10;;9424:18;;;;;:22;:28;9449:3;9424:22;:28;:::i;:::-;-1:-1:-1;9462:18:17;9469:10;;9462:18;;:6;:18;;;;;;9496:12;9462:31;;;;:46;9534:10;;9524:38;;9546:10;;9534;9524:38;;;;9558:3;;9524:38;:::i;:::-;;;;;;;;9291:278;:::o;8754:401::-;8857:9;8852:297;8876:14;:21;8872:1;:25;8852:297;;;8918:18;8939:14;8954:1;8939:17;;;;;;;;:::i;:::-;;;;;;;:28;;;8918:49;;8981:17;9001:14;9016:1;9001:17;;;;;;;;:::i;:::-;;;;;;;;;;;;:21;;;9037:14;;;;:6;:14;;;;;;-1:-1:-1;;;;;9037:38:17;;;;:26;;:38;;;;;;;9001:21;;-1:-1:-1;9037:44:17;9001:21;9037:38;:44;:::i;:::-;-1:-1:-1;9101:37:17;;-1:-1:-1;;;;;9101:37:17;;;9119:6;;9101:37;;;;;-1:-1:-1;;8899:3:17;;8852:297;;2658:162:2;966:10:5;2717:7:2;:5;:7::i;:::-;-1:-1:-1;;;;;2717:23:2;;2713:101;;2763:40;;-1:-1:-1;;;2763:40:2;;966:10:5;2763:40:2;;;7301:51:26;7274:18;;2763:40:2;7155:203:26;3674:178:6;2563:16;:14;:16::i;:::-;-1:-1:-1;;;;;;;;;;;3791:17:6;;-1:-1:-1;;3791:17:6::1;::::0;;3823:22:::1;966:10:5::0;3832:12:6::1;3823:22;::::0;-1:-1:-1;;;;;7319:32:26;;;7301:51;;7289:2;7274:18;3823:22:6::1;;;;;;;3722:130;3674:178::o:0;4599:312:4:-;4679:4;-1:-1:-1;;;;;4688:6:4;4671:23;;;:120;;;4785:6;-1:-1:-1;;;;;4749:42:4;:32;-1:-1:-1;;;;;;;;;;;2035:53:11;-1:-1:-1;;;;;2035:53:11;;1957:138;4749:32:4;-1:-1:-1;;;;;4749:42:4;;;4671:120;4654:251;;;4865:29;;-1:-1:-1;;;4865:29:4;;;;;;;;;;;2565:92:17;2334:13:2;:11;:13::i;6052:538:4:-;6169:17;-1:-1:-1;;;;;6151:50:4;;:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6151:52:4;;;;;;;;-1:-1:-1;;6151:52:4;;;;;;;;;;;;:::i;:::-;;;6147:437;;6513:60;;-1:-1:-1;;;6513:60:4;;-1:-1:-1;;;;;7319:32:26;;6513:60:4;;;7301:51:26;7274:18;;6513:60:4;7155:203:26;6147:437:4;-1:-1:-1;;;;;;;;;;;6245:40:4;;6241:120;;6312:34;;-1:-1:-1;;;6312:34:4;;;;;828:25:26;;;801:18;;6312:34:4;682:177:26;6241:120:4;6374:54;6404:17;6423:4;6374:29;:54::i;5028:213::-;5102:4;-1:-1:-1;;;;;5111:6:4;5094:23;;5090:145;;5195:29;;-1:-1:-1;;;5195:29:4;;;;;;;;;;;2472:222:1;1318:27;2621:22;;-1:-1:-1;;;;;;2621:22:1;;;2653:34;2678:8;2653:24;:34::i;3366:176:6:-;2316:19;:17;:19::i;:::-;-1:-1:-1;;;;;;;;;;;3484:16:6;;-1:-1:-1;;3484:16:6::1;3496:4;3484:16;::::0;;3515:20:::1;966:10:5::0;3522:12:6::1;887:96:5::0;8217:312:17;8321:14;;;;:6;:14;;;;;;;;-1:-1:-1;;;;;8321:38:17;;;;:26;;:38;;;;;8315:52;;;;;:::i;:::-;;;8371:1;8315:57;8311:114;;8395:19;;-1:-1:-1;;;8395:19:17;;;;;;;;;;;8311:114;8435:14;;;;:6;:14;;;;;;;;-1:-1:-1;;;;;8435:33:17;;;;;:21;;;;:33;;;;;:41;;;;-1:-1:-1;;8435:41:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8492:30;8435:33;;:14;;8492:30;;8435:14;8492:30;8217:312;;;:::o;1461:64:1:-;6931:20:3;:18;:20::i;1836:97:6:-;6931:20:3;:18;:20::i;:::-;1899:27:6::1;:25;:27::i;4381:197:0:-:0;4469:22;4477:4;4483:7;4469;:22::i;:::-;4464:108;;4514:47;;-1:-1:-1;;;4514:47:0;;-1:-1:-1;;;;;14443:32:26;;4514:47:0;;;14425:51:26;14492:18;;;14485:34;;;14398:18;;4514:47:0;14251:274:26;3105:126:6;-1:-1:-1;;;;;;;;;;;2821:9:6;;;3163:62;;3199:15;;-1:-1:-1;;;3199:15:6;;;;;;;;;;;2779:335:11;2870:37;2889:17;2870:18;:37::i;:::-;2922:27;;-1:-1:-1;;;;;2922:27:11;;;;;;;;2964:11;;:15;2960:148;;2995:53;3024:17;3043:4;2995:28;:53::i;2960:148::-;3079:18;:16;:18::i;3774:248:2:-;1313:22;3923:8;;-1:-1:-1;;;;;;3941:19:2;;-1:-1:-1;;;;;3941:19:2;;;;;;;;3975:40;;3923:8;;;;;3975:40;;3847:24;;3975:40;3837:185;;3774:248;:::o;7084:141:3:-;8870:21;8560:40;-1:-1:-1;;;8560:40:3;;;;7146:73;;7191:17;;-1:-1:-1;;;7191:17:3;;;;;;;;;;;1939:156:6;6931:20:3;:18;:20::i;:::-;-1:-1:-1;;;;;;;;;;;2071:17:6;;-1:-1:-1;;2071:17:6::1;::::0;;1939:156::o;2186:281:11:-;2263:17;-1:-1:-1;;;;;2263:29:11;;2296:1;2263:34;2259:119;;2320:47;;-1:-1:-1;;;2320:47:11;;-1:-1:-1;;;;;7319:32:26;;2320:47:11;;;7301:51:26;7274:18;;2320:47:11;7155:203:26;2259:119:11;-1:-1:-1;;;;;;;;;;;2387:73:11;;-1:-1:-1;;;;;;2387:73:11;-1:-1:-1;;;;;2387:73:11;;;;;;;;;;2186:281::o;4106:253:13:-;4189:12;4214;4228:23;4255:6;-1:-1:-1;;;;;4255:19:13;4275:4;4255:25;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4213:67;;;;4297:55;4324:6;4332:7;4341:10;4297:26;:55::i;:::-;4290:62;4106:253;-1:-1:-1;;;;;4106:253:13:o;6598:122:11:-;6648:9;:13;6644:70;;6684:19;;-1:-1:-1;;;6684:19:11;;;;;;;;;;;4625:582:13;4769:12;4798:7;4793:408;;4821:19;4829:10;4821:7;:19::i;:::-;4793:408;;;5045:17;;:22;:49;;;;-1:-1:-1;;;;;;5071:18:13;;;:23;5045:49;5041:119;;;5121:24;;-1:-1:-1;;;5121:24:13;;-1:-1:-1;;;;;7319:32:26;;5121:24:13;;;7301:51:26;7274:18;;5121:24:13;7155:203:26;5041:119:13;-1:-1:-1;5180:10:13;4793:408;4625:582;;;;;:::o;5743:516::-;5874:17;;:21;5870:383;;6102:10;6096:17;6158:15;6145:10;6141:2;6137:19;6130:44;5870:383;6225:17;;-1:-1:-1;;;6225:17:13;;;;;;;;;;;14:286:26;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;167:23;;-1:-1:-1;;;;;;219:32:26;;209:43;;199:71;;266:1;263;256:12;497:180;556:6;609:2;597:9;588:7;584:23;580:32;577:52;;;625:1;622;615:12;577:52;-1:-1:-1;648:23:26;;497:180;-1:-1:-1;497:180:26:o;864:173::-;932:20;;-1:-1:-1;;;;;981:31:26;;971:42;;961:70;;1027:1;1024;1017:12;1042:254;1110:6;1118;1171:2;1159:9;1150:7;1146:23;1142:32;1139:52;;;1187:1;1184;1177:12;1139:52;1223:9;1210:23;1200:33;;1252:38;1286:2;1275:9;1271:18;1252:38;:::i;:::-;1242:48;;1042:254;;;;;:::o;1301:127::-;1362:10;1357:3;1353:20;1350:1;1343:31;1393:4;1390:1;1383:15;1417:4;1414:1;1407:15;1433:257;1505:4;1499:11;;;1537:17;;1584:18;1569:34;;1605:22;;;1566:62;1563:88;;;1631:18;;:::i;:::-;1667:4;1660:24;1433:257;:::o;1695:253::-;1767:2;1761:9;1809:4;1797:17;;1844:18;1829:34;;1865:22;;;1826:62;1823:88;;;1891:18;;:::i;1953:275::-;2024:2;2018:9;2089:2;2070:13;;-1:-1:-1;;2066:27:26;2054:40;;2124:18;2109:34;;2145:22;;;2106:62;2103:88;;;2171:18;;:::i;:::-;2207:2;2200:22;1953:275;;-1:-1:-1;1953:275:26:o;2233:407::-;2298:5;2332:18;2324:6;2321:30;2318:56;;;2354:18;;:::i;:::-;2392:57;2437:2;2416:15;;-1:-1:-1;;2412:29:26;2443:4;2408:40;2392:57;:::i;:::-;2383:66;;2472:6;2465:5;2458:21;2512:3;2503:6;2498:3;2494:16;2491:25;2488:45;;;2529:1;2526;2519:12;2488:45;2578:6;2573:3;2566:4;2559:5;2555:16;2542:43;2632:1;2625:4;2616:6;2609:5;2605:18;2601:29;2594:40;2233:407;;;;;:::o;2645:222::-;2688:5;2741:3;2734:4;2726:6;2722:17;2718:27;2708:55;;2759:1;2756;2749:12;2708:55;2781:80;2857:3;2848:6;2835:20;2828:4;2820:6;2816:17;2781:80;:::i;2872:1488::-;2943:5;2996:3;2989:4;2981:6;2977:17;2973:27;2963:55;;3014:1;3011;3004:12;2963:55;3050:6;3037:20;3076:4;3099:18;3136:2;3132;3129:10;3126:36;;;3142:18;;:::i;:::-;3188:2;3185:1;3181:10;3211:28;3235:2;3231;3227:11;3211:28;:::i;:::-;3273:15;;;3343;;;3339:24;;;3304:12;;;;3375:15;;;3372:35;;;3403:1;3400;3393:12;3372:35;3439:2;3431:6;3427:15;3416:26;;3451:880;3467:6;3462:3;3459:15;3451:880;;;3553:3;3540:17;3589:2;3576:11;3573:19;3570:109;;;3633:1;3662:2;3658;3651:14;3570:109;3702:24;;3749:4;3777:12;;;-1:-1:-1;;3773:26:26;3769:35;-1:-1:-1;3766:125:26;;;3845:1;3874:2;3870;3863:14;3766:125;3917:22;;:::i;:::-;3966:31;3993:2;3989;3985:11;3966:31;:::i;:::-;3952:46;;4040:11;;;4027:25;;4068:16;;;4065:106;;;4125:1;4154:2;4150;4143:14;4065:106;4207:50;4253:3;4248:2;4237:8;4233:2;4229:17;4225:26;4207:50;:::i;:::-;4191:14;;;4184:74;4271:18;;-1:-1:-1;;3484:12:26;;;;4309;;;;3451:880;;;4349:5;2872:1488;-1:-1:-1;;;;;;;;2872:1488:26:o;4365:621::-;4503:6;4511;4564:2;4552:9;4543:7;4539:23;4535:32;4532:52;;;4580:1;4577;4570:12;4532:52;4620:9;4607:23;4649:18;4690:2;4682:6;4679:14;4676:34;;;4706:1;4703;4696:12;4676:34;4729:50;4771:7;4762:6;4751:9;4747:22;4729:50;:::i;:::-;4719:60;;4832:2;4821:9;4817:18;4804:32;4788:48;;4861:2;4851:8;4848:16;4845:36;;;4877:1;4874;4867:12;4845:36;;4900:80;4972:7;4961:8;4950:9;4946:24;4900:80;:::i;:::-;4890:90;;;4365:621;;;;;:::o;5358:524::-;5435:6;5443;5496:2;5484:9;5475:7;5471:23;5467:32;5464:52;;;5512:1;5509;5502:12;5464:52;5535:29;5554:9;5535:29;:::i;:::-;5525:39;;5615:2;5604:9;5600:18;5587:32;5642:18;5634:6;5631:30;5628:50;;;5674:1;5671;5664:12;5628:50;5697:22;;5750:4;5742:13;;5738:27;-1:-1:-1;5728:55:26;;5779:1;5776;5769:12;5728:55;5802:74;5868:7;5863:2;5850:16;5845:2;5841;5837:11;5802:74;:::i;6146:250::-;6231:1;6241:113;6255:6;6252:1;6249:13;6241:113;;;6331:11;;;6325:18;6312:11;;;6305:39;6277:2;6270:10;6241:113;;;-1:-1:-1;;6388:1:26;6370:16;;6363:27;6146:250::o;6401:271::-;6443:3;6481:5;6475:12;6508:6;6503:3;6496:19;6524:76;6593:6;6586:4;6581:3;6577:14;6570:4;6563:5;6559:16;6524:76;:::i;:::-;6654:2;6633:15;-1:-1:-1;;6629:29:26;6620:39;;;;6661:4;6616:50;;6401:271;-1:-1:-1;;6401:271:26:o;6677:220::-;6826:2;6815:9;6808:21;6789:4;6846:45;6887:2;6876:9;6872:18;6864:6;6846:45;:::i;6902:248::-;6970:6;6978;7031:2;7019:9;7010:7;7006:23;7002:32;6999:52;;;7047:1;7044;7037:12;6999:52;-1:-1:-1;;7070:23:26;;;7140:2;7125:18;;;7112:32;;-1:-1:-1;6902:248:26:o;7363:468::-;7491:6;7499;7552:2;7540:9;7531:7;7527:23;7523:32;7520:52;;;7568:1;7565;7558:12;7520:52;7604:9;7591:23;7581:33;;7665:2;7654:9;7650:18;7637:32;7692:18;7684:6;7681:30;7678:50;;;7724:1;7721;7714:12;7678:50;7747:78;7817:7;7808:6;7797:9;7793:22;7747:78;:::i;7836:857::-;7927:6;7935;7979:9;7970:7;7966:23;8009:3;8005:2;8001:12;7998:32;;;8026:1;8023;8016:12;7998:32;8049:23;;;-1:-1:-1;8106:4:26;-1:-1:-1;;8088:16:26;;8084:27;8081:47;;;8124:1;8121;8114:12;8081:47;;8150:22;;:::i;:::-;8224:2;8213:9;8209:18;8196:32;8273:7;8266:15;8259:23;8250:7;8247:36;8237:64;;8297:1;8294;8287:12;8237:64;8324:7;8317:5;8310:22;;8392:2;8381:9;8377:18;8364:32;8359:2;8352:5;8348:14;8341:56;8457:2;8446:9;8442:18;8429:32;8424:2;8417:5;8413:14;8406:56;8522:3;8511:9;8507:19;8494:33;8489:2;8482:5;8478:14;8471:57;8589:3;8578:9;8574:19;8561:33;8555:3;8548:5;8544:15;8537:58;8656:4;8645:9;8641:20;8628:34;8622:3;8615:5;8611:15;8604:59;8682:5;8672:15;;;7836:857;;;;;:::o;8698:461::-;-1:-1:-1;;;;;8931:32:26;;8913:51;;9000:3;8995:2;8980:18;;8973:31;;;-1:-1:-1;;9021:46:26;;9047:19;;9039:6;9021:46;:::i;:::-;9098:2;9083:18;;9076:34;;;;-1:-1:-1;9141:2:26;9126:18;9119:34;9013:54;8698:461;-1:-1:-1;;8698:461:26:o;9164:186::-;9223:6;9276:2;9264:9;9255:7;9251:23;9247:32;9244:52;;;9292:1;9289;9282:12;9244:52;9315:29;9334:9;9315:29;:::i;9922:322::-;9991:6;10044:2;10032:9;10023:7;10019:23;10015:32;10012:52;;;10060:1;10057;10050:12;10012:52;10100:9;10087:23;10133:18;10125:6;10122:30;10119:50;;;10165:1;10162;10155:12;10119:50;10188;10230:7;10221:6;10210:9;10206:22;10188:50;:::i;:::-;10178:60;9922:322;-1:-1:-1;;;;9922:322:26:o;10249:645::-;10438:2;10427:9;10420:21;10483:6;10477:13;10472:2;10461:9;10457:18;10450:41;10572:1;10568;10563:3;10559:11;10555:19;10549:2;10541:6;10537:15;10531:22;10527:48;10522:2;10511:9;10507:18;10500:76;10401:4;10623:2;10615:6;10611:15;10605:22;10663:4;10658:2;10647:9;10643:18;10636:32;10691:52;10738:3;10727:9;10723:19;10709:12;10691:52;:::i;:::-;10677:66;;10798:2;10790:6;10786:15;10780:22;10774:3;10763:9;10759:19;10752:51;10859:3;10851:6;10847:16;10841:23;10834:4;10823:9;10819:20;10812:53;10882:6;10874:14;;;10249:645;;;;:::o;10899:232::-;10938:3;10959:17;;;10956:140;;11018:10;11013:3;11009:20;11006:1;10999:31;11053:4;11050:1;11043:15;11081:4;11078:1;11071:15;10956:140;-1:-1:-1;11123:1:26;11112:13;;10899:232::o;11136:380::-;11215:1;11211:12;;;;11258;;;11279:61;;11333:4;11325:6;11321:17;11311:27;;11279:61;11386:2;11378:6;11375:14;11355:18;11352:38;11349:161;;11432:10;11427:3;11423:20;11420:1;11413:31;11467:4;11464:1;11457:15;11495:4;11492:1;11485:15;11349:161;;11136:380;;;:::o;11861:543::-;11963:2;11958:3;11955:11;11952:446;;;11999:1;12023:5;12020:1;12013:16;12067:4;12064:1;12054:18;12137:2;12125:10;12121:19;12118:1;12114:27;12108:4;12104:38;12173:4;12161:10;12158:20;12155:47;;;-1:-1:-1;12196:4:26;12155:47;12251:2;12246:3;12242:12;12239:1;12235:20;12229:4;12225:31;12215:41;;12306:82;12324:2;12317:5;12314:13;12306:82;;;12369:17;;;12350:1;12339:13;12306:82;;12580:1345;12706:3;12700:10;12733:18;12725:6;12722:30;12719:56;;;12755:18;;:::i;:::-;12784:97;12874:6;12834:38;12866:4;12860:11;12834:38;:::i;:::-;12828:4;12784:97;:::i;:::-;12936:4;;12993:2;12982:14;;13010:1;13005:663;;;;13712:1;13729:6;13726:89;;;-1:-1:-1;13781:19:26;;;13775:26;13726:89;-1:-1:-1;;12537:1:26;12533:11;;;12529:24;12525:29;12515:40;12561:1;12557:11;;;12512:57;13828:81;;12975:944;;13005:663;11808:1;11801:14;;;11845:4;11832:18;;-1:-1:-1;;13041:20:26;;;13159:236;13173:7;13170:1;13167:14;13159:236;;;13262:19;;;13256:26;13241:42;;13354:27;;;;13322:1;13310:14;;;;13189:19;;13159:236;;;13163:3;13423:6;13414:7;13411:19;13408:201;;;13484:19;;;13478:26;-1:-1:-1;;13567:1:26;13563:14;;;13579:3;13559:24;13555:37;13551:42;13536:58;13521:74;;13408:201;-1:-1:-1;;;;;13655:1:26;13639:14;;;13635:22;13622:36;;-1:-1:-1;12580:1345:26:o;13930:127::-;13991:10;13986:3;13982:20;13979:1;13972:31;14022:4;14019:1;14012:15;14046:4;14043:1;14036:15;14062:184;14132:6;14185:2;14173:9;14164:7;14160:23;14156:32;14153:52;;;14201:1;14198;14191:12;14153:52;-1:-1:-1;14224:16:26;;14062:184;-1:-1:-1;14062:184:26:o;14530:287::-;14659:3;14697:6;14691:13;14713:66;14772:6;14767:3;14760:4;14752:6;14748:17;14713:66;:::i;:::-;14795:16;;;;;14530:287;-1:-1:-1;;14530:287:26:o"
        },
        "gasEstimates": {
          "creation": {
            "codeDepositCost": "1640400",
            "executionCost": "infinite",
            "totalCost": "infinite"
          },
          "external": {
            "DEFAULT_ADMIN_ROLE()": "240",
            "UPGRADE_INTERFACE_VERSION()": "infinite",
            "_files(uint256)": "infinite",
            "acceptOwnership()": "52563",
            "addFile(string)": "infinite",
            "addFileWithPermissions(string,(address,string)[])": "infinite",
            "addProof(uint256,(bool,uint256,uint256,uint256,uint256,uint256))": "infinite",
            "addProofOrigin(uint256,(bool,uint256,uint256,uint256,uint256,uint256))": "infinite",
            "authorize(uint256,(address,string)[])": "infinite",
            "filePermissionRequests(uint256,uint256)": "2626",
            "filePermissions(uint256,address)": "infinite",
            "fileProofs(uint256,address)": "13755",
            "files(uint256)": "infinite",
            "filesCount()": "2406",
            "getRoleAdmin(bytes32)": "infinite",
            "grantRole(bytes32,address)": "infinite",
            "hasRole(bytes32,address)": "infinite",
            "initialize(address)": "infinite",
            "owner()": "2428",
            "pause()": "infinite",
            "paused()": "infinite",
            "pendingOwner()": "2415",
            "proxiableUUID()": "infinite",
            "renounceOwnership()": "infinite",
            "renounceRole(bytes32,address)": "29213",
            "requestPermission(uint256)": "infinite",
            "revokeRole(bytes32,address)": "infinite",
            "supportsInterface(bytes4)": "473",
            "transferOwnership(address)": "infinite",
            "unpause()": "infinite",
            "upgradeToAndCall(address,bytes)": "infinite",
            "version()": "260"
          },
          "internal": {
            "_addFile(string memory)": "infinite",
            "_addProof(address,uint256,struct IFileRegistry.Proof memory)": "infinite",
            "_authorize(uint256,struct IFileRegistry.FilePermissions memory[] memory)": "infinite",
            "_authorizeUpgrade(address)": "infinite"
          }
        },
        "methodIdentifiers": {
          "DEFAULT_ADMIN_ROLE()": "a217fddf",
          "UPGRADE_INTERFACE_VERSION()": "ad3cb1cc",
          "_files(uint256)": "ac1abb68",
          "acceptOwnership()": "79ba5097",
          "addFile(string)": "eb9b9b64",
          "addFileWithPermissions(string,(address,string)[])": "3bbaf127",
          "addProof(uint256,(bool,uint256,uint256,uint256,uint256,uint256))": "c99b6803",
          "addProofOrigin(uint256,(bool,uint256,uint256,uint256,uint256,uint256))": "905c2686",
          "authorize(uint256,(address,string)[])": "7468cd62",
          "filePermissionRequests(uint256,uint256)": "67a3f59b",
          "filePermissions(uint256,address)": "60f1c43a",
          "fileProofs(uint256,address)": "cd35364a",
          "files(uint256)": "f4c714b4",
          "filesCount()": "dfb5e9ba",
          "getRoleAdmin(bytes32)": "248a9ca3",
          "grantRole(bytes32,address)": "2f2ff15d",
          "hasRole(bytes32,address)": "91d14854",
          "initialize(address)": "c4d66de8",
          "owner()": "8da5cb5b",
          "pause()": "8456cb59",
          "paused()": "5c975abb",
          "pendingOwner()": "e30c3978",
          "proxiableUUID()": "52d1902d",
          "renounceOwnership()": "715018a6",
          "renounceRole(bytes32,address)": "36568abe",
          "requestPermission(uint256)": "3ff36d65",
          "revokeRole(bytes32,address)": "d547741f",
          "supportsInterface(bytes4)": "01ffc9a7",
          "transferOwnership(address)": "f2fde38b",
          "unpause()": "3f4ba83a",
          "upgradeToAndCall(address,bytes)": "4f1ef286",
          "version()": "54fd4d50"
        }
      },
      "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotFileAttestator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotFileOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fileId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"name\":\"FileAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fileId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"entity\",\"type\":\"address\"}],\"name\":\"PermissionGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fileId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"entity\",\"type\":\"address\"}],\"name\":\"PermissionRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fileId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"entity\",\"type\":\"address\"}],\"name\":\"ProofAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_files\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"addedAtBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"permissionRequestsCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"name\":\"addFile\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"entity\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"internalType\":\"struct IFileRegistry.FilePermissions[]\",\"name\":\"permissions\",\"type\":\"tuple[]\"}],\"name\":\"addFileWithPermissions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fileId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"authenticity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ownership\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quality\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uniqueness\",\"type\":\"uint256\"}],\"internalType\":\"struct IFileRegistry.Proof\",\"name\":\"proof\",\"type\":\"tuple\"}],\"name\":\"addProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fileId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"authenticity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ownership\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quality\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uniqueness\",\"type\":\"uint256\"}],\"internalType\":\"struct IFileRegistry.Proof\",\"name\":\"proof\",\"type\":\"tuple\"}],\"name\":\"addProofOrigin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fileId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"entity\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"internalType\":\"struct IFileRegistry.FilePermissions[]\",\"name\":\"permissions\",\"type\":\"tuple[]\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fileId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"filePermissionRequests\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fileId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"entity\",\"type\":\"address\"}],\"name\":\"filePermissions\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fileId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"entity\",\"type\":\"address\"}],\"name\":\"fileProofs\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"authenticity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ownership\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quality\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uniqueness\",\"type\":\"uint256\"}],\"internalType\":\"struct IFileRegistry.Proof\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fileId\",\"type\":\"uint256\"}],\"name\":\"files\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"addedAtBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"permissionRequestsCount\",\"type\":\"uint256\"}],\"internalType\":\"struct IFileRegistry.FileResponse\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"filesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fileId\",\"type\":\"uint256\"}],\"name\":\"requestPermission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"UUPSUnauthorizedCallContext()\":[{\"details\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"details\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"FileAdded(uint256,address,string)\":{\"params\":{\"fileId\":\"id of the file\",\"ownerAddress\":\"address of the owner\",\"url\":\"url of the file\"}},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"PermissionGranted(uint256,address)\":{\"params\":{\"entity\":\"address of the entity\",\"fileId\":\"id of the file\"}},\"PermissionRequested(uint256,address)\":{\"params\":{\"entity\":\"address of the entity\",\"fileId\":\"id of the file\"}},\"ProofAdded(uint256,address)\":{\"params\":{\"entity\":\"address of the entity\",\"fileId\":\"id of the file\"}},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"addFile(string)\":{\"params\":{\"url\":\"url of the file\"},\"returns\":{\"_0\":\"uint256                          id of the file\"}},\"addFileWithPermissions(string,(address,string)[])\":{\"params\":{\"permissions\":\"permissions for the file\",\"url\":\"url of the file\"},\"returns\":{\"_0\":\"uint256                          id of the file\"}},\"addProof(uint256,(bool,uint256,uint256,uint256,uint256,uint256))\":{\"params\":{\"fileId\":\"id of the file\",\"proof\":\"proof for the file\"}},\"addProofOrigin(uint256,(bool,uint256,uint256,uint256,uint256,uint256))\":{\"params\":{\"fileId\":\"id of the file\",\"proof\":\"proof for the file\"}},\"authorize(uint256,(address,string)[])\":{\"params\":{\"permissions\":\"permissions for the file\",\"fileId\":\"id of the file\"}},\"filePermissionRequests(uint256,uint256)\":{\"params\":{\"fileId\":\"id of the file\",\"index\":\"index of the permission request\"},\"returns\":{\"_0\":\"address                          address of the entity who requested permission\"}},\"filePermissions(uint256,address)\":{\"params\":{\"entity\":\"address of the entity\",\"fileId\":\"id of the file\"},\"returns\":{\"_0\":\"string                           key for the entity\"}},\"fileProofs(uint256,address)\":{\"params\":{\"entity\":\"address of the entity\",\"fileId\":\"id of the file\"},\"returns\":{\"_0\":\"Proof                      proof for the file\"}},\"files(uint256)\":{\"params\":{\"fileId\":\"id of the file\"},\"returns\":{\"_0\":\"FileResponse                     information about the file\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address)\":{\"params\":{\"ownerAddress\":\"address of the owner\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"Pauses the contract\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"requestPermission(uint256)\":{\"params\":{\"fileId\":\"id of the file\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"Unpauses the contract\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"events\":{\"FileAdded(uint256,address,string)\":{\"notice\":\"Triggered when a file has been added\"},\"PermissionGranted(uint256,address)\":{\"notice\":\"Triggered when user has authorized an entity to access the file\"},\"PermissionRequested(uint256,address)\":{\"notice\":\"Triggered when user has requested permission for a file\"},\"ProofAdded(uint256,address)\":{\"notice\":\"Triggered when user has added an proof to the file\"}},\"kind\":\"user\",\"methods\":{\"addFile(string)\":{\"notice\":\"Adds a file to the registry\"},\"addFileWithPermissions(string,(address,string)[])\":{\"notice\":\"Adds a file to the registry\"},\"addProof(uint256,(bool,uint256,uint256,uint256,uint256,uint256))\":{\"notice\":\"Adds an proof to the file\"},\"addProofOrigin(uint256,(bool,uint256,uint256,uint256,uint256,uint256))\":{\"notice\":\"Adds an proof to the file\"},\"authorize(uint256,(address,string)[])\":{\"notice\":\"Authorizes entities to access the file\"},\"filePermissionRequests(uint256,uint256)\":{\"notice\":\"Returns permission requests for the file\"},\"filePermissions(uint256,address)\":{\"notice\":\"Returns permissions for the file\"},\"fileProofs(uint256,address)\":{\"notice\":\"Returns proofs for the file\"},\"files(uint256)\":{\"notice\":\"Returns information about the file\"},\"initialize(address)\":{\"notice\":\"Initialize the contract\"},\"requestPermission(uint256)\":{\"notice\":\"Requests permission for the file\"},\"version()\":{\"notice\":\"Returns the version of the contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/fileRegistry/FileRegistryImplementation.sol\":\"FileRegistryImplementation\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\\n    struct AccessControlStorage {\\n        mapping(bytes32 role => RoleData) _roles;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.AccessControl\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\\n\\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\\n        assembly {\\n            $.slot := AccessControlStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        $._roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (!hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6662ec4e5cefca03eeadd073e9469df8d2944bb2ee8ec8f7622c2c46aab5f225\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {OwnableUpgradeable} from \\\"./OwnableUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is specified at deployment time in the constructor for `Ownable`. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable2Step\\n    struct Ownable2StepStorage {\\n        address _pendingOwner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable2Step\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant Ownable2StepStorageLocation = 0x237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c00;\\n\\n    function _getOwnable2StepStorage() private pure returns (Ownable2StepStorage storage $) {\\n        assembly {\\n            $.slot := Ownable2StepStorageLocation\\n        }\\n    }\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    function __Ownable2Step_init() internal onlyInitializing {\\n    }\\n\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        Ownable2StepStorage storage $ = _getOwnable2StepStorage();\\n        return $._pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        Ownable2StepStorage storage $ = _getOwnable2StepStorage();\\n        $._pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        Ownable2StepStorage storage $ = _getOwnable2StepStorage();\\n        delete $._pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        if (pendingOwner() != sender) {\\n            revert OwnableUnauthorizedAccount(sender);\\n        }\\n        _transferOwnership(sender);\\n    }\\n}\\n\",\"keccak256\":\"0xbca4a4f66d98028293dba695851d1b20d3e0ba2fff7453fb241f192fa3fc6b6f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC1967-compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f13b947637c4969c0644cab4ef399cdc4b67f101463b8775c5a43b118558e53\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Pausable\\n    struct PausableStorage {\\n        bool _paused;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Pausable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant PausableStorageLocation = 0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300;\\n\\n    function _getPausableStorage() private pure returns (PausableStorage storage $) {\\n        assembly {\\n            $.slot := PausableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        PausableStorage storage $ = _getPausableStorage();\\n        return $._paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x92915b7f7f642c6be3f65bfd1522feb5d5b6ef25f755f4dbb51df32c868f2f97\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xdaba3f7c42c55b2896353f32bd27d4d5f8bae741b3b05d4c53f67abc4dc47ce8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x2a1f9944df2015c081d89cd41ba22ffaf10aa6285969f0dc612b235cc448999c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x06a78f9b3ee3e6d0eb4e4cd635ba49960bea34cac1db8c0a27c75f2319f1fd65\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/fileRegistry/FileRegistryImplementation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.24;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\nimport \\\"./interfaces/FileRegistryStorageV1.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract FileRegistryImplementation is\\n    UUPSUpgradeable,\\n    PausableUpgradeable,\\n    Ownable2StepUpgradeable,\\n    AccessControlUpgradeable,\\n    FileRegistryStorageV1\\n{\\n    /**\\n     * @notice Triggered when a file has been added\\n     *\\n     * @param fileId                            id of the file\\n     * @param ownerAddress                      address of the owner\\n     * @param url                               url of the file\\n     */\\n    event FileAdded(uint256 indexed fileId, address indexed ownerAddress, string url);\\n\\n    /**\\n     * @notice Triggered when user has requested permission for a file\\n     *\\n     * @param fileId                            id of the file\\n     * @param entity                        address of the entity\\n     */\\n    event PermissionRequested(uint256 indexed fileId, address indexed entity);\\n\\n    /**\\n     * @notice Triggered when user has authorized an entity to access the file\\n     *\\n     * @param fileId                            id of the file\\n     * @param entity                        address of the entity\\n     */\\n    event PermissionGranted(uint256 indexed fileId, address indexed entity);\\n\\n    /**\\n     * @notice Triggered when user has added an proof to the file\\n     *\\n     * @param fileId                            id of the file\\n     * @param entity                        address of the entity\\n     */\\n    event ProofAdded(uint256 indexed fileId, address indexed entity);\\n\\n    error NotFileOwner();\\n    error NotFileAttestator();\\n\\n    /**\\n     * @notice Initialize the contract\\n     *\\n     * @param ownerAddress                      address of the owner\\n     */\\n    function initialize(address ownerAddress) external initializer {\\n        __Ownable2Step_init();\\n        __UUPSUpgradeable_init();\\n        __Pausable_init();\\n        __AccessControl_init();\\n\\n        _transferOwnership(ownerAddress);\\n    }\\n\\n    /**\\n     * @notice Upgrade the contract\\n     * This function is required by OpenZeppelin's UUPSUpgradeable\\n     *\\n     * @param newImplementation                  new implementation\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual override onlyOwner {}\\n\\n    /**\\n     * @notice Returns the version of the contract\\n     */\\n    function version() external pure virtual override returns (uint256) {\\n        return 1;\\n    }\\n\\n    /**\\n     * @dev Pauses the contract\\n     */\\n    function pause() external override onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpauses the contract\\n     */\\n    function unpause() external override onlyOwner {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @notice Returns information about the file\\n     *\\n     * @param fileId                            id of the file\\n     * @return FileResponse                     information about the file\\n     */\\n    function files(uint256 fileId) external view returns (FileResponse memory) {\\n        File storage file = _files[fileId];\\n\\n        return\\n            FileResponse({\\n                id: fileId,\\n                url: file.url,\\n                ownerAddress: file.ownerAddress,\\n                addedAtBlock: file.addedAtBlock,\\n                permissionRequestsCount: file.permissionRequestsCount\\n            });\\n    }\\n\\n    /**\\n     * @notice Returns permission requests for the file\\n     *\\n     * @param fileId                            id of the file\\n     * @param index                             index of the permission request\\n     * @return address                          address of the entity who requested permission\\n     */\\n    function filePermissionRequests(uint256 fileId, uint256 index) external view override returns (address) {\\n        return _files[fileId].permissionRequests[index];\\n    }\\n\\n    /**\\n     * @notice Returns permissions for the file\\n     *\\n     * @param fileId                            id of the file\\n     * @param entity                        address of the entity\\n     * @return string                           key for the entity\\n     */\\n    function filePermissions(uint256 fileId, address entity) external view override returns (string memory) {\\n        return _files[fileId].permissions[entity];\\n    }\\n\\n    /**\\n     * @notice Returns proofs for the file\\n     *\\n     * @param fileId                            id of the file\\n     * @param entity                        address of the entity\\n     * @return Proof                      proof for the file\\n     */\\n    function fileProofs(uint256 fileId, address entity) external view override returns (Proof memory) {\\n        //        return _files[fileId].proofs[entity];\\n        return\\n            Proof({\\n                valid: _files[fileId].proofs[entity].valid,\\n                score: _files[fileId].proofs[entity].score,\\n                authenticity: _files[fileId].proofs[entity].authenticity,\\n                ownership: _files[fileId].proofs[entity].ownership,\\n                quality: _files[fileId].proofs[entity].quality,\\n                uniqueness: _files[fileId].proofs[entity].uniqueness\\n            });\\n    }\\n\\n    /**\\n     * @notice Adds a file to the registry\\n     *\\n     * @param url                               url of the file\\n     * @return uint256                          id of the file\\n     */\\n    function addFile(string memory url) external whenNotPaused returns (uint256) {\\n        _addFile(url);\\n\\n        return filesCount;\\n    }\\n\\n    /**\\n     * @notice Adds a file to the registry\\n     *\\n     * @param url                               url of the file\\n     * @param permissions                    permissions for the file\\n     * @return uint256                          id of the file\\n     */\\n    function addFileWithPermissions(\\n        string memory url,\\n        FilePermissions[] memory permissions\\n    ) external whenNotPaused returns (uint256) {\\n        _addFile(url);\\n        _authorize(filesCount, permissions);\\n\\n        return filesCount;\\n    }\\n\\n    /**\\n     * @notice Requests permission for the file\\n     *\\n     * @param fileId                            id of the file\\n     */\\n    function requestPermission(uint256 fileId) external override whenNotPaused {\\n        _files[fileId].permissionRequestsCount++;\\n        _files[fileId].permissionRequests[_files[fileId].permissionRequestsCount] = msg.sender;\\n\\n        emit PermissionRequested(fileId, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Authorizes entities to access the file\\n     *\\n     * @param fileId                            id of the file\\n     * @param permissions                    permissions for the file\\n     */\\n    function authorize(uint256 fileId, FilePermissions[] memory permissions) external override whenNotPaused {\\n        if (msg.sender != _files[fileId].ownerAddress) {\\n            revert NotFileOwner();\\n        }\\n\\n        _authorize(fileId, permissions);\\n    }\\n\\n    /**\\n     * @notice Adds an proof to the file\\n     *\\n     * @param fileId                            id of the file\\n     * @param proof                       proof for the file\\n     */\\n    function addProof(uint256 fileId, Proof memory proof) external override whenNotPaused {\\n        _addProof(msg.sender, fileId, proof);\\n    }\\n\\n    /**\\n     * @notice Adds an proof to the file\\n     *\\n     * @param fileId                            id of the file\\n     * @param proof                       proof for the file\\n     */\\n    function addProofOrigin(uint256 fileId, Proof memory proof) external override whenNotPaused {\\n        _addProof(tx.origin, fileId, proof);\\n    }\\n\\n    /**\\n     * @notice Adds an proof to the file\\n     *\\n     * @param fileId                            id of the file\\n     * @param proof                       proof for the file\\n     */\\n    function _addProof(address entity, uint256 fileId, Proof memory proof) internal {\\n        if (bytes(_files[fileId].permissions[entity]).length == 0) {\\n            revert NotFileAttestator();\\n        }\\n\\n        _files[fileId].proofs[entity] = proof;\\n\\n        emit ProofAdded(fileId, entity);\\n    }\\n\\n    /**\\n     * @notice Authorizes entities to access the file\\n     *\\n     * @param fileId                            id of the file\\n     * @param permissions                    permissions for the file\\n     */\\n    function _authorize(uint256 fileId, FilePermissions[] memory permissions) internal {\\n        for (uint256 i = 0; i < permissions.length; i++) {\\n            address entity = permissions[i].entity;\\n            string memory key = permissions[i].key;\\n\\n            _files[fileId].permissions[entity] = key;\\n\\n            emit PermissionGranted(fileId, entity);\\n        }\\n    }\\n\\n    /**\\n     * @notice Adds a file to the registry\\n     *\\n     * @param url                               url of the file\\n     */\\n    function _addFile(string memory url) internal {\\n        filesCount++;\\n\\n        _files[filesCount].ownerAddress = msg.sender;\\n        _files[filesCount].url = url;\\n        _files[filesCount].addedAtBlock = block.number;\\n\\n        emit FileAdded(filesCount, msg.sender, url);\\n    }\\n}\\n\",\"keccak256\":\"0x24fbf8711841810a6d71787760abc140f5e93d950b6029f78294afdf38f07a07\",\"license\":\"Apache-2.0\"},\"contracts/fileRegistry/interfaces/FileRegistryStorageV1.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.24;\\n\\nimport \\\"./IFileRegistry.sol\\\";\\n\\n/**`\\n * @title Storage for FileRegistry\\n * @notice For future upgrades, do not change FileRegistryStorageV1. Create a new\\n * contract which implements FileRegistryStorageV1\\n */\\nabstract contract FileRegistryStorageV1 is IFileRegistry {\\n    uint256 public override filesCount;\\n    mapping(uint256 => File) public _files;\\n}\\n\",\"keccak256\":\"0x08c4fe8324c7237a0633a560f0195e9d1e928070676e4351f2e9b78e284e4658\",\"license\":\"Apache-2.0\"},\"contracts/fileRegistry/interfaces/IFileRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\ninterface IFileRegistry is IAccessControl {\\n    struct Proof {\\n        bool valid;\\n        uint256 score;\\n        uint256 authenticity;\\n        uint256 ownership;\\n        uint256 quality;\\n        uint256 uniqueness;\\n    }\\n\\n    struct File {\\n        address ownerAddress;\\n        string url;\\n        uint256 addedAtBlock;\\n        uint256 permissionRequestsCount;\\n        mapping(uint256 => address) permissionRequests;\\n        mapping(address => string) permissions;\\n        mapping(address => Proof) proofs;\\n    }\\n\\n    struct FileResponse {\\n        uint256 id;\\n        address ownerAddress;\\n        string url;\\n        uint256 addedAtBlock;\\n        uint256 permissionRequestsCount;\\n    }\\n\\n    struct FilePermissions {\\n        address entity;\\n        string key;\\n    }\\n\\n    function version() external pure returns (uint256);\\n    function filesCount() external view returns (uint256);\\n    function files(uint256 index) external view returns (FileResponse memory);\\n    function filePermissionRequests(uint256 fileId, uint256 index) external view returns (address);\\n    function filePermissions(uint256 fileId, address entity) external view returns (string memory);\\n    function fileProofs(uint256 fileId, address entity) external view returns (Proof memory);\\n    function pause() external;\\n    function unpause() external;\\n    function addFile(string memory url) external returns (uint256);\\n    function requestPermission(uint256 fileId) external;\\n    function authorize(uint256 fileId, FilePermissions[] memory permissions) external;\\n    function addProof(uint256 fileId, Proof memory proof) external;\\n    function addProofOrigin(uint256 fileId, Proof memory proof) external;\\n}\\n\",\"keccak256\":\"0x26ffac9f7e70154cc368c32a62a4f9f0639964b503e2853551e1bab42c522579\",\"license\":\"Apache-2.0\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"}},\"version\":1}",
      "storageLayout": {
        "storage": [
          {
            "astId": 3453,
            "contract": "contracts/fileRegistry/FileRegistryImplementation.sol:FileRegistryImplementation",
            "label": "filesCount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3458,
            "contract": "contracts/fileRegistry/FileRegistryImplementation.sol:FileRegistryImplementation",
            "label": "_files",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_struct(File)3499_storage)"
          }
        ],
        "types": {
          "t_address": {
            "encoding": "inplace",
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "encoding": "inplace",
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_string_storage)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => string)",
            "numberOfBytes": "32",
            "value": "t_string_storage"
          },
          "t_mapping(t_address,t_struct(Proof)3477_storage)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => struct IFileRegistry.Proof)",
            "numberOfBytes": "32",
            "value": "t_struct(Proof)3477_storage"
          },
          "t_mapping(t_uint256,t_address)": {
            "encoding": "mapping",
            "key": "t_uint256",
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32",
            "value": "t_address"
          },
          "t_mapping(t_uint256,t_struct(File)3499_storage)": {
            "encoding": "mapping",
            "key": "t_uint256",
            "label": "mapping(uint256 => struct IFileRegistry.File)",
            "numberOfBytes": "32",
            "value": "t_struct(File)3499_storage"
          },
          "t_string_storage": {
            "encoding": "bytes",
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(File)3499_storage": {
            "encoding": "inplace",
            "label": "struct IFileRegistry.File",
            "members": [
              {
                "astId": 3479,
                "contract": "contracts/fileRegistry/FileRegistryImplementation.sol:FileRegistryImplementation",
                "label": "ownerAddress",
                "offset": 0,
                "slot": "0",
                "type": "t_address"
              },
              {
                "astId": 3481,
                "contract": "contracts/fileRegistry/FileRegistryImplementation.sol:FileRegistryImplementation",
                "label": "url",
                "offset": 0,
                "slot": "1",
                "type": "t_string_storage"
              },
              {
                "astId": 3483,
                "contract": "contracts/fileRegistry/FileRegistryImplementation.sol:FileRegistryImplementation",
                "label": "addedAtBlock",
                "offset": 0,
                "slot": "2",
                "type": "t_uint256"
              },
              {
                "astId": 3485,
                "contract": "contracts/fileRegistry/FileRegistryImplementation.sol:FileRegistryImplementation",
                "label": "permissionRequestsCount",
                "offset": 0,
                "slot": "3",
                "type": "t_uint256"
              },
              {
                "astId": 3489,
                "contract": "contracts/fileRegistry/FileRegistryImplementation.sol:FileRegistryImplementation",
                "label": "permissionRequests",
                "offset": 0,
                "slot": "4",
                "type": "t_mapping(t_uint256,t_address)"
              },
              {
                "astId": 3493,
                "contract": "contracts/fileRegistry/FileRegistryImplementation.sol:FileRegistryImplementation",
                "label": "permissions",
                "offset": 0,
                "slot": "5",
                "type": "t_mapping(t_address,t_string_storage)"
              },
              {
                "astId": 3498,
                "contract": "contracts/fileRegistry/FileRegistryImplementation.sol:FileRegistryImplementation",
                "label": "proofs",
                "offset": 0,
                "slot": "6",
                "type": "t_mapping(t_address,t_struct(Proof)3477_storage)"
              }
            ],
            "numberOfBytes": "224"
          },
          "t_struct(Proof)3477_storage": {
            "encoding": "inplace",
            "label": "struct IFileRegistry.Proof",
            "members": [
              {
                "astId": 3466,
                "contract": "contracts/fileRegistry/FileRegistryImplementation.sol:FileRegistryImplementation",
                "label": "valid",
                "offset": 0,
                "slot": "0",
                "type": "t_bool"
              },
              {
                "astId": 3468,
                "contract": "contracts/fileRegistry/FileRegistryImplementation.sol:FileRegistryImplementation",
                "label": "score",
                "offset": 0,
                "slot": "1",
                "type": "t_uint256"
              },
              {
                "astId": 3470,
                "contract": "contracts/fileRegistry/FileRegistryImplementation.sol:FileRegistryImplementation",
                "label": "authenticity",
                "offset": 0,
                "slot": "2",
                "type": "t_uint256"
              },
              {
                "astId": 3472,
                "contract": "contracts/fileRegistry/FileRegistryImplementation.sol:FileRegistryImplementation",
                "label": "ownership",
                "offset": 0,
                "slot": "3",
                "type": "t_uint256"
              },
              {
                "astId": 3474,
                "contract": "contracts/fileRegistry/FileRegistryImplementation.sol:FileRegistryImplementation",
                "label": "quality",
                "offset": 0,
                "slot": "4",
                "type": "t_uint256"
              },
              {
                "astId": 3476,
                "contract": "contracts/fileRegistry/FileRegistryImplementation.sol:FileRegistryImplementation",
                "label": "uniqueness",
                "offset": 0,
                "slot": "5",
                "type": "t_uint256"
              }
            ],
            "numberOfBytes": "192"
          },
          "t_uint256": {
            "encoding": "inplace",
            "label": "uint256",
            "numberOfBytes": "32"
          }
        }
      },
      "userdoc": {
        "events": {
          "FileAdded(uint256,address,string)": {
            "notice": "Triggered when a file has been added"
          },
          "PermissionGranted(uint256,address)": {
            "notice": "Triggered when user has authorized an entity to access the file"
          },
          "PermissionRequested(uint256,address)": {
            "notice": "Triggered when user has requested permission for a file"
          },
          "ProofAdded(uint256,address)": {
            "notice": "Triggered when user has added an proof to the file"
          }
        },
        "kind": "user",
        "methods": {
          "addFile(string)": {
            "notice": "Adds a file to the registry"
          },
          "addFileWithPermissions(string,(address,string)[])": {
            "notice": "Adds a file to the registry"
          },
          "addProof(uint256,(bool,uint256,uint256,uint256,uint256,uint256))": {
            "notice": "Adds an proof to the file"
          },
          "addProofOrigin(uint256,(bool,uint256,uint256,uint256,uint256,uint256))": {
            "notice": "Adds an proof to the file"
          },
          "authorize(uint256,(address,string)[])": {
            "notice": "Authorizes entities to access the file"
          },
          "filePermissionRequests(uint256,uint256)": {
            "notice": "Returns permission requests for the file"
          },
          "filePermissions(uint256,address)": {
            "notice": "Returns permissions for the file"
          },
          "fileProofs(uint256,address)": {
            "notice": "Returns proofs for the file"
          },
          "files(uint256)": {
            "notice": "Returns information about the file"
          },
          "initialize(address)": {
            "notice": "Initialize the contract"
          },
          "requestPermission(uint256)": {
            "notice": "Requests permission for the file"
          },
          "version()": {
            "notice": "Returns the version of the contract"
          }
        },
        "version": 1
      },
      "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\\n    struct AccessControlStorage {\\n        mapping(bytes32 role => RoleData) _roles;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.AccessControl\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\\n\\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\\n        assembly {\\n            $.slot := AccessControlStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        $._roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (!hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {OwnableUpgradeable} from \\\"./OwnableUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is specified at deployment time in the constructor for `Ownable`. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable2Step\\n    struct Ownable2StepStorage {\\n        address _pendingOwner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable2Step\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant Ownable2StepStorageLocation = 0x237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c00;\\n\\n    function _getOwnable2StepStorage() private pure returns (Ownable2StepStorage storage $) {\\n        assembly {\\n            $.slot := Ownable2StepStorageLocation\\n        }\\n    }\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    function __Ownable2Step_init() internal onlyInitializing {\\n    }\\n\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        Ownable2StepStorage storage $ = _getOwnable2StepStorage();\\n        return $._pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        Ownable2StepStorage storage $ = _getOwnable2StepStorage();\\n        $._pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        Ownable2StepStorage storage $ = _getOwnable2StepStorage();\\n        delete $._pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        if (pendingOwner() != sender) {\\n            revert OwnableUnauthorizedAccount(sender);\\n        }\\n        _transferOwnership(sender);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC1967-compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Pausable\\n    struct PausableStorage {\\n        bool _paused;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Pausable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant PausableStorageLocation = 0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300;\\n\\n    function _getPausableStorage() private pure returns (PausableStorage storage $) {\\n        assembly {\\n            $.slot := PausableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        PausableStorage storage $ = _getPausableStorage();\\n        return $._paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Address.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/StorageSlot.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\n    },\n    \"contracts/fileRegistry/FileRegistryImplementation.sol\": {\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.24;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\nimport \\\"./interfaces/FileRegistryStorageV1.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract FileRegistryImplementation is\\n    UUPSUpgradeable,\\n    PausableUpgradeable,\\n    Ownable2StepUpgradeable,\\n    AccessControlUpgradeable,\\n    FileRegistryStorageV1\\n{\\n    /**\\n     * @notice Triggered when a file has been added\\n     *\\n     * @param fileId                            id of the file\\n     * @param ownerAddress                      address of the owner\\n     * @param url                               url of the file\\n     */\\n    event FileAdded(uint256 indexed fileId, address indexed ownerAddress, string url);\\n\\n    /**\\n     * @notice Triggered when user has requested permission for a file\\n     *\\n     * @param fileId                            id of the file\\n     * @param entity                        address of the entity\\n     */\\n    event PermissionRequested(uint256 indexed fileId, address indexed entity);\\n\\n    /**\\n     * @notice Triggered when user has authorized an entity to access the file\\n     *\\n     * @param fileId                            id of the file\\n     * @param entity                        address of the entity\\n     */\\n    event PermissionGranted(uint256 indexed fileId, address indexed entity);\\n\\n    /**\\n     * @notice Triggered when user has added an proof to the file\\n     *\\n     * @param fileId                            id of the file\\n     * @param entity                        address of the entity\\n     */\\n    event ProofAdded(uint256 indexed fileId, address indexed entity);\\n\\n    error NotFileOwner();\\n    error NotFileAttestator();\\n\\n    /**\\n     * @notice Initialize the contract\\n     *\\n     * @param ownerAddress                      address of the owner\\n     */\\n    function initialize(address ownerAddress) external initializer {\\n        __Ownable2Step_init();\\n        __UUPSUpgradeable_init();\\n        __Pausable_init();\\n        __AccessControl_init();\\n\\n        _transferOwnership(ownerAddress);\\n    }\\n\\n    /**\\n     * @notice Upgrade the contract\\n     * This function is required by OpenZeppelin's UUPSUpgradeable\\n     *\\n     * @param newImplementation                  new implementation\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual override onlyOwner {}\\n\\n    /**\\n     * @notice Returns the version of the contract\\n     */\\n    function version() external pure virtual override returns (uint256) {\\n        return 1;\\n    }\\n\\n    /**\\n     * @dev Pauses the contract\\n     */\\n    function pause() external override onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpauses the contract\\n     */\\n    function unpause() external override onlyOwner {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @notice Returns information about the file\\n     *\\n     * @param fileId                            id of the file\\n     * @return FileResponse                     information about the file\\n     */\\n    function files(uint256 fileId) external view returns (FileResponse memory) {\\n        File storage file = _files[fileId];\\n\\n        return\\n            FileResponse({\\n                id: fileId,\\n                url: file.url,\\n                ownerAddress: file.ownerAddress,\\n                addedAtBlock: file.addedAtBlock,\\n                permissionRequestsCount: file.permissionRequestsCount\\n            });\\n    }\\n\\n    /**\\n     * @notice Returns permission requests for the file\\n     *\\n     * @param fileId                            id of the file\\n     * @param index                             index of the permission request\\n     * @return address                          address of the entity who requested permission\\n     */\\n    function filePermissionRequests(uint256 fileId, uint256 index) external view override returns (address) {\\n        return _files[fileId].permissionRequests[index];\\n    }\\n\\n    /**\\n     * @notice Returns permissions for the file\\n     *\\n     * @param fileId                            id of the file\\n     * @param entity                        address of the entity\\n     * @return string                           key for the entity\\n     */\\n    function filePermissions(uint256 fileId, address entity) external view override returns (string memory) {\\n        return _files[fileId].permissions[entity];\\n    }\\n\\n    /**\\n     * @notice Returns proofs for the file\\n     *\\n     * @param fileId                            id of the file\\n     * @param entity                        address of the entity\\n     * @return Proof                      proof for the file\\n     */\\n    function fileProofs(uint256 fileId, address entity) external view override returns (Proof memory) {\\n        //        return _files[fileId].proofs[entity];\\n        return\\n            Proof({\\n                valid: _files[fileId].proofs[entity].valid,\\n                score: _files[fileId].proofs[entity].score,\\n                authenticity: _files[fileId].proofs[entity].authenticity,\\n                ownership: _files[fileId].proofs[entity].ownership,\\n                quality: _files[fileId].proofs[entity].quality,\\n                uniqueness: _files[fileId].proofs[entity].uniqueness\\n            });\\n    }\\n\\n    /**\\n     * @notice Adds a file to the registry\\n     *\\n     * @param url                               url of the file\\n     * @return uint256                          id of the file\\n     */\\n    function addFile(string memory url) external whenNotPaused returns (uint256) {\\n        _addFile(url);\\n\\n        return filesCount;\\n    }\\n\\n    /**\\n     * @notice Adds a file to the registry\\n     *\\n     * @param url                               url of the file\\n     * @param permissions                    permissions for the file\\n     * @return uint256                          id of the file\\n     */\\n    function addFileWithPermissions(\\n        string memory url,\\n        FilePermissions[] memory permissions\\n    ) external whenNotPaused returns (uint256) {\\n        _addFile(url);\\n        _authorize(filesCount, permissions);\\n\\n        return filesCount;\\n    }\\n\\n    /**\\n     * @notice Requests permission for the file\\n     *\\n     * @param fileId                            id of the file\\n     */\\n    function requestPermission(uint256 fileId) external override whenNotPaused {\\n        _files[fileId].permissionRequestsCount++;\\n        _files[fileId].permissionRequests[_files[fileId].permissionRequestsCount] = msg.sender;\\n\\n        emit PermissionRequested(fileId, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Authorizes entities to access the file\\n     *\\n     * @param fileId                            id of the file\\n     * @param permissions                    permissions for the file\\n     */\\n    function authorize(uint256 fileId, FilePermissions[] memory permissions) external override whenNotPaused {\\n        if (msg.sender != _files[fileId].ownerAddress) {\\n            revert NotFileOwner();\\n        }\\n\\n        _authorize(fileId, permissions);\\n    }\\n\\n    /**\\n     * @notice Adds an proof to the file\\n     *\\n     * @param fileId                            id of the file\\n     * @param proof                       proof for the file\\n     */\\n    function addProof(uint256 fileId, Proof memory proof) external override whenNotPaused {\\n        _addProof(msg.sender, fileId, proof);\\n    }\\n\\n    /**\\n     * @notice Adds an proof to the file\\n     *\\n     * @param fileId                            id of the file\\n     * @param proof                       proof for the file\\n     */\\n    function addProofOrigin(uint256 fileId, Proof memory proof) external override whenNotPaused {\\n        _addProof(tx.origin, fileId, proof);\\n    }\\n\\n    /**\\n     * @notice Adds an proof to the file\\n     *\\n     * @param fileId                            id of the file\\n     * @param proof                       proof for the file\\n     */\\n    function _addProof(address entity, uint256 fileId, Proof memory proof) internal {\\n        if (bytes(_files[fileId].permissions[entity]).length == 0) {\\n            revert NotFileAttestator();\\n        }\\n\\n        _files[fileId].proofs[entity] = proof;\\n\\n        emit ProofAdded(fileId, entity);\\n    }\\n\\n    /**\\n     * @notice Authorizes entities to access the file\\n     *\\n     * @param fileId                            id of the file\\n     * @param permissions                    permissions for the file\\n     */\\n    function _authorize(uint256 fileId, FilePermissions[] memory permissions) internal {\\n        for (uint256 i = 0; i < permissions.length; i++) {\\n            address entity = permissions[i].entity;\\n            string memory key = permissions[i].key;\\n\\n            _files[fileId].permissions[entity] = key;\\n\\n            emit PermissionGranted(fileId, entity);\\n        }\\n    }\\n\\n    /**\\n     * @notice Adds a file to the registry\\n     *\\n     * @param url                               url of the file\\n     */\\n    function _addFile(string memory url) internal {\\n        filesCount++;\\n\\n        _files[filesCount].ownerAddress = msg.sender;\\n        _files[filesCount].url = url;\\n        _files[filesCount].addedAtBlock = block.number;\\n\\n        emit FileAdded(filesCount, msg.sender, url);\\n    }\\n}\\n\"\n    },\n    \"contracts/fileRegistry/interfaces/FileRegistryStorageV1.sol\": {\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.24;\\n\\nimport \\\"./IFileRegistry.sol\\\";\\n\\n/**`\\n * @title Storage for FileRegistry\\n * @notice For future upgrades, do not change FileRegistryStorageV1. Create a new\\n * contract which implements FileRegistryStorageV1\\n */\\nabstract contract FileRegistryStorageV1 is IFileRegistry {\\n    uint256 public override filesCount;\\n    mapping(uint256 => File) public _files;\\n}\\n\"\n    },\n    \"contracts/fileRegistry/interfaces/IFileRegistry.sol\": {\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\ninterface IFileRegistry is IAccessControl {\\n    struct Proof {\\n        bool valid;\\n        uint256 score;\\n        uint256 authenticity;\\n        uint256 ownership;\\n        uint256 quality;\\n        uint256 uniqueness;\\n    }\\n\\n    struct File {\\n        address ownerAddress;\\n        string url;\\n        uint256 addedAtBlock;\\n        uint256 permissionRequestsCount;\\n        mapping(uint256 => address) permissionRequests;\\n        mapping(address => string) permissions;\\n        mapping(address => Proof) proofs;\\n    }\\n\\n    struct FileResponse {\\n        uint256 id;\\n        address ownerAddress;\\n        string url;\\n        uint256 addedAtBlock;\\n        uint256 permissionRequestsCount;\\n    }\\n\\n    struct FilePermissions {\\n        address entity;\\n        string key;\\n    }\\n\\n    function version() external pure returns (uint256);\\n    function filesCount() external view returns (uint256);\\n    function files(uint256 index) external view returns (FileResponse memory);\\n    function filePermissionRequests(uint256 fileId, uint256 index) external view returns (address);\\n    function filePermissions(uint256 fileId, address entity) external view returns (string memory);\\n    function fileProofs(uint256 fileId, address entity) external view returns (Proof memory);\\n    function pause() external;\\n    function unpause() external;\\n    function addFile(string memory url) external returns (uint256);\\n    function requestPermission(uint256 fileId) external;\\n    function authorize(uint256 fileId, FilePermissions[] memory permissions) external;\\n    function addProof(uint256 fileId, Proof memory proof) external;\\n    function addProofOrigin(uint256 fileId, Proof memory proof) external;\\n}\\n\"\n    },\n    \"contracts/mocks/fileRegistry/FileRegistryImplementationV2Mock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.24;\\n\\nimport {FileRegistryImplementation} from \\\"../../fileRegistry/FileRegistryImplementation.sol\\\";\\n\\ncontract FileRegistryImplementationV2Mock is FileRegistryImplementation {\\n    /**\\n     * @notice Upgrade the contract\\n     * This function is required by OpenZeppelin's UUPSUpgradeable\\n     *\\n     * @param newImplementation                  new implementation\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual override onlyOwner {}\\n\\n    /**\\n     * return the version of the contract\\n     */\\n    function version() external pure virtual override returns (uint256) {\\n        return 2;\\n    }\\n\\n    /**\\n     * @notice Tests the contract upgradeability\\n     */\\n    function test() external pure returns (string memory) {\\n        return \\\"test\\\";\\n    }\\n}\\n\"\n    },\n    \"contracts/mocks/teePool/TeePoolImplementationV2Mock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.24;\\n\\nimport {TeePoolImplementation} from \\\"../../teePool/TeePoolImplementation.sol\\\";\\n\\ncontract TeePoolImplementationV2Mock is TeePoolImplementation {\\n    /**\\n     * @notice Upgrade the contract\\n     * This function is required by OpenZeppelin's UUPSUpgradeable\\n     *\\n     * @param newImplementation                  new implementation\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual override onlyOwner {}\\n\\n    /**\\n     * return the version of the contract\\n     */\\n    function version() external pure virtual override returns (uint256) {\\n        return 2;\\n    }\\n\\n    /**\\n     * @notice Tests the contract upgradeability\\n     */\\n    function test() external pure returns (string memory) {\\n        return \\\"test\\\";\\n    }\\n}\\n\"\n    },\n    \"contracts/teePool/interfaces/ITeePool.sol\": {\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.24;\\n\\nimport {IFileRegistry} from \\\"../../fileRegistry/interfaces/IFileRegistry.sol\\\";\\n\\ninterface ITeePool {\\n    enum TeeStatus {\\n        None,\\n        Active,\\n        Removed\\n    }\\n\\n    enum JobStatus {\\n        None,\\n        Completed\\n    }\\n\\n    struct Job {\\n        uint256 fileId;\\n        uint256 bidAmount;\\n        JobStatus status;\\n    }\\n\\n    struct Tee {\\n        TeeStatus status;\\n        uint256 amount;\\n        uint256 withdrawnAmount;\\n    }\\n\\n    struct TeeInfo {\\n        address teeAddress;\\n        TeeStatus status;\\n        uint256 amount;\\n        uint256 withdrawnAmount;\\n    }\\n\\n    function version() external pure returns (uint256);\\n    function fileRegistry() external view returns (IFileRegistry);\\n    function jobsCount() external view returns (uint256);\\n    function jobs(uint256 jobId) external view returns (Job memory);\\n    //    function jobProofs(uint256 jobId, address entity) external view returns (Proof memory);\\n    function tees(address teeAddress) external view returns (TeeInfo memory);\\n    function teesCount() external view returns (uint256);\\n    function teeList() external view returns (address[] memory);\\n    function teeListAt(uint256 index) external view returns (TeeInfo memory);\\n    function activeTeesCount() external view returns (uint256);\\n    function activeTeeList() external view returns (address[] memory);\\n    function activeTeeListAt(uint256 index) external view returns (TeeInfo memory);\\n    function pause() external;\\n    function unpause() external;\\n    function updateFileRegistry(IFileRegistry fileRegistry) external;\\n    function addTee(address teeAddress) external;\\n    function removeTee(address teeAddress) external;\\n    function submitValidationJob(uint256 fileId) external payable;\\n    function submitProof(uint256 fileId, IFileRegistry.Proof memory proof) external payable;\\n}\\n\"\n    },\n    \"contracts/teePool/interfaces/TeePoolStorageV1.sol\": {\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.24;\\n\\nimport \\\"./ITeePool.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n/**`\\n * @title Storage for TeePool\\n * @notice For future upgrades, do not change TeePoolStorageV1. Create a new\\n * contract which implements TeePoolStorageV1\\n */\\nabstract contract TeePoolStorageV1 is ITeePool {\\n    IFileRegistry public override fileRegistry;\\n\\n    uint256 public override jobsCount;\\n    mapping(uint256 => Job) internal _jobs;\\n\\n    EnumerableSet.AddressSet internal _teeList;\\n    EnumerableSet.AddressSet internal _activeTeeList;\\n    mapping(address => Tee) internal _tees;\\n}\\n\"\n    },\n    \"contracts/teePool/TeePoolImplementation.sol\": {\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.24;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"./interfaces/TeePoolStorageV1.sol\\\";\\n\\ncontract TeePoolImplementation is\\n    UUPSUpgradeable,\\n    PausableUpgradeable,\\n    Ownable2StepUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    TeePoolStorageV1\\n{\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /**\\n     * @notice Triggered when a job has been submitted\\n     *\\n     * @param jobId                             id of the job\\n     * @param fileId                            id of the file\\n     * @param bidAmount                         bid amount\\n     */\\n    event JobSubmitted(uint256 indexed jobId, uint256 indexed fileId, uint256 bidAmount);\\n    event ProofAdded(address indexed atestator, uint256 indexed jobId, uint256 indexed fileId);\\n\\n    event TeeAdded(address indexed teeAddress);\\n    event TeeRemoved(address indexed teeAddress);\\n    event Claimed(address indexed teeAddress, uint256 amount);\\n\\n    error TeeAlreadyAdded();\\n    error TeeNotActive();\\n    error JobCompleted();\\n    error NothingToClaim();\\n\\n    modifier onlyActiveTee() {\\n        if (!(_tees[msg.sender].status == TeeStatus.Active)) {\\n            revert TeeNotActive();\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initialize the contract\\n     *\\n     * @param ownerAddress                      address of the owner\\n     */\\n    function initialize(address ownerAddress, address fileRegistryAddress) external initializer {\\n        __Ownable2Step_init();\\n        __UUPSUpgradeable_init();\\n        __Pausable_init();\\n        __ReentrancyGuard_init();\\n\\n        fileRegistry = IFileRegistry(fileRegistryAddress);\\n\\n        _transferOwnership(ownerAddress);\\n    }\\n\\n    /**\\n     * @notice Upgrade the contract\\n     * This function is required by OpenZeppelin's UUPSUpgradeable\\n     *\\n     * @param newImplementation                  new implementation\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual override onlyOwner {}\\n\\n    /**\\n     * @notice Returns the version of the contract\\n     */\\n    function version() external pure virtual override returns (uint256) {\\n        return 1;\\n    }\\n\\n    function jobs(uint256 jobId) external view override returns (Job memory) {\\n        return _jobs[jobId];\\n        //        return JobResponse({\\n        //            fileId: _jobs[jobId].fileId,\\n        //            bidAmount: _jobs[jobId].bidAmount,\\n        //            teeAddress: _jobs[jobId].teeAddress,\\n        //            proofsCount: 0\\n        //        });\\n    }\\n\\n    function tees(address teeAddress) public view override returns (TeeInfo memory) {\\n        return\\n            TeeInfo({\\n                teeAddress: teeAddress,\\n                status: _tees[teeAddress].status,\\n                amount: _tees[teeAddress].amount,\\n                withdrawnAmount: _tees[teeAddress].withdrawnAmount\\n            });\\n    }\\n\\n    function teesCount() external view override returns (uint256) {\\n        return _teeList.length();\\n    }\\n\\n    function teeList() external view override returns (address[] memory) {\\n        return _teeList.values();\\n    }\\n\\n    function teeListAt(uint256 index) external view override returns (TeeInfo memory) {\\n        return tees(_teeList.at(index));\\n    }\\n\\n    function activeTeesCount() external view override returns (uint256) {\\n        return _activeTeeList.length();\\n    }\\n\\n    function activeTeeList() external view override returns (address[] memory) {\\n        return _activeTeeList.values();\\n    }\\n\\n    function activeTeeListAt(uint256 index) external view override returns (TeeInfo memory) {\\n        return tees(_activeTeeList.at(index));\\n    }\\n\\n    /**\\n     * @dev Pauses the contract\\n     */\\n    function pause() external override onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpauses the contract\\n     */\\n    function unpause() external override onlyOwner {\\n        _unpause();\\n    }\\n\\n    function updateFileRegistry(IFileRegistry newFileRegistry) external override onlyOwner {\\n        fileRegistry = newFileRegistry;\\n    }\\n\\n    function addTee(address teeAddress) external override onlyOwner {\\n        if (_activeTeeList.contains(teeAddress)) {\\n            revert TeeAlreadyAdded();\\n        }\\n        _teeList.add(teeAddress);\\n        _activeTeeList.add(teeAddress);\\n        _tees[teeAddress].status = TeeStatus.Active;\\n\\n        emit TeeAdded(teeAddress);\\n    }\\n\\n    function removeTee(address teeAddress) external override onlyOwner {\\n        if (!_activeTeeList.contains(teeAddress)) {\\n            revert TeeNotActive();\\n        }\\n\\n        _tees[teeAddress].status = TeeStatus.Removed;\\n        _activeTeeList.remove(teeAddress);\\n\\n        emit TeeRemoved(teeAddress);\\n    }\\n\\n    function submitValidationJob(uint256 fileId) external payable override {\\n        jobsCount++;\\n        _jobs[jobsCount].fileId = fileId;\\n        _jobs[jobsCount].bidAmount = msg.value;\\n\\n        emit JobSubmitted(jobsCount, fileId, msg.value);\\n    }\\n\\n    function submitProof(uint256 jobId, IFileRegistry.Proof memory proof) external payable override onlyActiveTee {\\n        Job storage job = _jobs[jobId];\\n\\n        if (job.status != JobStatus.None) {\\n            revert JobCompleted();\\n        }\\n\\n        fileRegistry.addProofOrigin(job.fileId, proof);\\n\\n        _tees[msg.sender].amount += job.bidAmount;\\n        job.status = JobStatus.Completed;\\n\\n        emit ProofAdded(msg.sender, jobId, job.fileId);\\n    }\\n\\n    function claim() external nonReentrant {\\n        uint256 amount = _tees[msg.sender].amount - _tees[msg.sender].withdrawnAmount;\\n\\n        if (amount == 0) {\\n            revert NothingToClaim();\\n        }\\n\\n        _tees[msg.sender].withdrawnAmount = _tees[msg.sender].amount;\\n\\n        payable(msg.sender).transfer(amount);\\n\\n        emit Claimed(msg.sender, amount);\\n    }\\n}\\n\"\n    },\n    \"hardhat/console.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\"\n    }\n  },\n  \"settings\": {\n    \"optimizer\": {\n      \"enabled\": true,\n      \"runs\": 200\n    },\n    \"evmVersion\": \"paris\",\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"storageLayout\",\n          \"devdoc\",\n          \"userdoc\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    },\n    \"metadata\": {\n      \"useLiteralContent\": true\n    }\n  }\n}",
      "solcInputHash": "098de8f369c6d15fd52666e5ea09852d",
      "transactionHash": "0x4e348bd547ee71741a7ba661cb73bef5662bc34f9be89f8ad9cb34cdafe47411",
      "args": []
    },
    "decoded": {
      "from": "0x34529235dAF0B317D30F8e3120Ef04Dff59aB411",
      "gasPrice": "1000000000",
      "gasLimit": "1839335",
      "to": null,
      "value": "0",
      "nonce": 441,
      "data": "",
      "r": "0x5a9196e8ed290e50ac515d5ddee00b36f12a5c51680b687b946c5ebdb90dc162",
      "s": "0x16eefd567c80a0ef3fabd7a85f1db7b54ceee752620b3bc0ed96c547bb69fcee",
      "v": 29638,
      "chainId": 14801
    }
  }
}