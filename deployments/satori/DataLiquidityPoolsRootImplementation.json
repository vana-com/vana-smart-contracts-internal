{
  "address": "0xe2f9f4C758A265F792762Bc7e5FB699c5f63B5FD",
  "abi": [
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ArityMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CurrentEpochNotInitialized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "ERC1967InvalidImplementation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1967NonPayable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EpochPerformancesAlreadySet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidDlpStatus",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPerformances",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidStakeAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidUnstakeAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotDlpOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NothingToClaim",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TooManyDlps",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UUPSUnauthorizedCallContext",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "slot",
          "type": "bytes32"
        }
      ],
      "name": "UUPSUnsupportedProxiableUUID",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WithdrawNotAllowed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        }
      ],
      "name": "DlpDeregistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unstakedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "penaltyAmount",
          "type": "uint256"
        }
      ],
      "name": "DlpDeregisteredByOwner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "dlpAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        }
      ],
      "name": "DlpRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "epochId",
          "type": "uint256"
        }
      ],
      "name": "EpochCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "epochId",
          "type": "uint256"
        }
      ],
      "name": "EpochPerformancesSaved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newEpochRewardAmount",
          "type": "uint256"
        }
      ],
      "name": "EpochRewardAmountUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "epochId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimAmount",
          "type": "uint256"
        }
      ],
      "name": "EpochRewardClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newEpochSize",
          "type": "uint256"
        }
      ],
      "name": "EpochSizeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxNumberOfDlps",
          "type": "uint256"
        }
      ],
      "name": "MaxNumberOfDlpsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMinDlpStakeAmount",
          "type": "uint256"
        }
      ],
      "name": "MinDlpStakeAmountUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "dlpIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "scores",
          "type": "uint256[]"
        }
      ],
      "name": "ScoresUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Unstaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPGRADE_INTERFACE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addRewardForDlps",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epochNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        }
      ],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createEpochs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "createEpochsUntilBlockNumber",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        }
      ],
      "name": "deregisterDlp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unstakeAmount",
          "type": "uint256"
        }
      ],
      "name": "deregisterDlpByOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "dlpIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        }
      ],
      "name": "dlps",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "dlpAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "ownerAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "stakeAmount",
              "type": "uint256"
            },
            {
              "internalType": "enum IDataLiquidityPoolsRoot.DlpStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "registrationBlockNumber",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "grantedAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IDataLiquidityPoolsRoot.DlpResponse",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dlpAddress",
          "type": "address"
        }
      ],
      "name": "dlpsByAddress",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "dlpAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "ownerAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "stakeAmount",
              "type": "uint256"
            },
            {
              "internalType": "enum IDataLiquidityPoolsRoot.DlpStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "registrationBlockNumber",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "grantedAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IDataLiquidityPoolsRoot.DlpResponse",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dlpsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epochId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        }
      ],
      "name": "epochDlps",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "ttf",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tfc",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "vdu",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "uw",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakedAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IDataLiquidityPoolsRoot.EpochDlp",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochRewardAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epochId",
          "type": "uint256"
        }
      ],
      "name": "epochs",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "startBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reward",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "dlpIds",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct IDataLiquidityPoolsRoot.EpochResponse",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numberOfDlps",
          "type": "uint256"
        }
      ],
      "name": "getTopDlpsIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "ownerAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "newMaxNumberOfDlps",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "newMinDlpStakeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "newEpochSize",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "newEpochRewardAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataLiquidityPoolsRootImplementation.InitParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxNumberOfDlps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minDlpStakeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dlpAddress",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "dlpOwnerAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "granted",
          "type": "bool"
        }
      ],
      "name": "registerDlp",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registeredDlps",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epochId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "dlpId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ttf",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tfc",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "vdu",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "uw",
              "type": "uint256"
            }
          ],
          "internalType": "struct IDataLiquidityPoolsRoot.DlpPerformance[]",
          "name": "dlpPerformances",
          "type": "tuple[]"
        }
      ],
      "name": "saveEpochPerformances",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "epochId",
          "type": "uint256"
        }
      ],
      "name": "stakerDlpEpochs",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "stakedAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "withdrawnReward",
              "type": "uint256"
            }
          ],
          "internalType": "struct IDataLiquidityPoolsRoot.StakerDlpEpoch",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        }
      ],
      "name": "stakerDlps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "stakers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDlpsRewardAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newEpochRewardAmount",
          "type": "uint256"
        }
      ],
      "name": "updateEpochRewardAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newEpochSize",
          "type": "uint256"
        }
      ],
      "name": "updateEpochSize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMaxNumberOfDlps",
          "type": "uint256"
        }
      ],
      "name": "updateMaxNumberOfDlps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMinDlpStakeAmount",
          "type": "uint256"
        }
      ],
      "name": "updateMinDlpStakeAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1cc206676d783ab9fc7aa896e91d4ebcda3baa7652c8497f7f4964e012cb1fed",
  "receipt": {
    "to": null,
    "from": "0x34529235dAF0B317D30F8e3120Ef04Dff59aB411",
    "contractAddress": "0xe2f9f4C758A265F792762Bc7e5FB699c5f63B5FD",
    "transactionIndex": 0,
    "gasUsed": "3271579",
    "logsBloom": "0x
    "blockHash": "0x30e9e324921c9f7201f801464d247d3f45b3ddcc7d3201db976b8548d11c1925",
    "transactionHash": "0x1cc206676d783ab9fc7aa896e91d4ebcda3baa7652c8497f7f4964e012cb1fed",
    "logs": [],
    "blockNumber": 774910,
    "cumulativeGasUsed": "3271579",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6386c50b05ab32115f0a06c22f22f29f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ArityMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CurrentEpochNotInitialized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EpochPerformancesAlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDlpStatus\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPerformances\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStakeAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidUnstakeAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotDlpOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NothingToClaim\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManyDlps\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"}],\"name\":\"DlpDeregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unstakedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"penaltyAmount\",\"type\":\"uint256\"}],\"name\":\"DlpDeregisteredByOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dlpAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"DlpRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"}],\"name\":\"EpochCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"}],\"name\":\"EpochPerformancesSaved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newEpochRewardAmount\",\"type\":\"uint256\"}],\"name\":\"EpochRewardAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimAmount\",\"type\":\"uint256\"}],\"name\":\"EpochRewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newEpochSize\",\"type\":\"uint256\"}],\"name\":\"EpochSizeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxNumberOfDlps\",\"type\":\"uint256\"}],\"name\":\"MaxNumberOfDlpsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinDlpStakeAmount\",\"type\":\"uint256\"}],\"name\":\"MinDlpStakeAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"dlpIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"scores\",\"type\":\"uint256[]\"}],\"name\":\"ScoresUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addRewardForDlps\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createEpochs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"createEpochsUntilBlockNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"}],\"name\":\"deregisterDlp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeAmount\",\"type\":\"uint256\"}],\"name\":\"deregisterDlpByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"dlpIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"}],\"name\":\"dlps\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dlpAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum IDataLiquidityPoolsRoot.DlpStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"registrationBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"grantedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IDataLiquidityPoolsRoot.DlpResponse\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dlpAddress\",\"type\":\"address\"}],\"name\":\"dlpsByAddress\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dlpAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum IDataLiquidityPoolsRoot.DlpStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"registrationBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"grantedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IDataLiquidityPoolsRoot.DlpResponse\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dlpsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"}],\"name\":\"epochDlps\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ttf\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tfc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vdu\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IDataLiquidityPoolsRoot.EpochDlp\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"}],\"name\":\"epochs\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"dlpIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IDataLiquidityPoolsRoot.EpochResponse\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfDlps\",\"type\":\"uint256\"}],\"name\":\"getTopDlpsIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newMaxNumberOfDlps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMinDlpStakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newEpochSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newEpochRewardAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct DataLiquidityPoolsRootImplementation.InitParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxNumberOfDlps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDlpStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dlpAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"dlpOwnerAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"granted\",\"type\":\"bool\"}],\"name\":\"registerDlp\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registeredDlps\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ttf\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tfc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vdu\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uw\",\"type\":\"uint256\"}],\"internalType\":\"struct IDataLiquidityPoolsRoot.DlpPerformance[]\",\"name\":\"dlpPerformances\",\"type\":\"tuple[]\"}],\"name\":\"saveEpochPerformances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"}],\"name\":\"stakerDlpEpochs\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnReward\",\"type\":\"uint256\"}],\"internalType\":\"struct IDataLiquidityPoolsRoot.StakerDlpEpoch\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"}],\"name\":\"stakerDlps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDlpsRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newEpochRewardAmount\",\"type\":\"uint256\"}],\"name\":\"updateEpochRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newEpochSize\",\"type\":\"uint256\"}],\"name\":\"updateEpochSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxNumberOfDlps\",\"type\":\"uint256\"}],\"name\":\"updateMaxNumberOfDlps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinDlpStakeAmount\",\"type\":\"uint256\"}],\"name\":\"updateMinDlpStakeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}],\"UUPSUnauthorizedCallContext()\":[{\"details\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"details\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"DlpDeregistered(uint256)\":{\"params\":{\"dlpId\":\"id of the dlp\"}},\"DlpDeregisteredByOwner(uint256,uint256,uint256)\":{\"params\":{\"dlpId\":\"id of the dlp\",\"penaltyAmount\":\"penalty amount\",\"unstakedAmount\":\"amount unstaked\"}},\"DlpRegistered(uint256,address,address)\":{\"params\":{\"dlpAddress\":\"address of the dlp\",\"dlpId\":\"id of the dlp\",\"ownerAddress\":\"owner of the dlp\"}},\"EpochCreated(uint256)\":{\"params\":{\"epochId\":\"reward epoch id\"}},\"EpochPerformancesSaved(uint256)\":{\"params\":{\"epochId\":\"epoch id\"}},\"EpochRewardAmountUpdated(uint256)\":{\"params\":{\"newEpochRewardAmount\":\"new epoch reward amount\"}},\"EpochRewardClaimed(address,uint256,uint256,uint256)\":{\"params\":{\"claimAmount\":\"amount claimed\",\"dlpId\":\"id of the dlp\",\"epochId\":\"epoch id\",\"staker\":\"address of the staker\"}},\"EpochSizeUpdated(uint256)\":{\"params\":{\"newEpochSize\":\"new epoch size\"}},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"MaxNumberOfDlpsUpdated(uint256)\":{\"params\":{\"newMaxNumberOfDlps\":\"new max number of dlps\"}},\"MinDlpStakeAmountUpdated(uint256)\":{\"params\":{\"newMinDlpStakeAmount\":\"new minDlpStakeAmount\"}},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"ScoresUpdated(uint256[],uint256[])\":{\"params\":{\"dlpIds\":\"dlp ids\",\"scores\":\"dlp scores\"}},\"Staked(address,uint256,uint256)\":{\"params\":{\"amount\":\"amount staked\",\"dlpId\":\"id of the dlp\",\"staker\":\"address of the staker\"}},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"},\"Unstaked(address,uint256,uint256)\":{\"params\":{\"amount\":\"amount unstaked\",\"dlpId\":\"id of the dlp\",\"staker\":\"address of the staker\"}},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"claimReward(uint256,uint256)\":{\"params\":{\"dlpId\":\"dlp id\",\"epochNumber\":\"epoch number\"}},\"deregisterDlp(uint256)\":{\"params\":{\"dlpId\":\"dlp id\"}},\"deregisterDlpByOwner(uint256,uint256)\":{\"params\":{\"dlpId\":\"dlp id\",\"unstakeAmount\":\"amount to sent to dlp owner\"}},\"dlps(uint256)\":{\"params\":{\"dlpId\":\"id of the dlp\"}},\"dlpsByAddress(address)\":{\"params\":{\"dlpAddress\":\"address of the dlp\"}},\"epochDlps(uint256,uint256)\":{\"params\":{\"dlpId\":\"id of the dlp\",\"epochId\":\"epoch id\"}},\"epochs(uint256)\":{\"params\":{\"epochId\":\"epoch id\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize((address,uint256,uint256,uint256,uint256,uint256))\":{\"params\":{\"params\":\"initialization parameters\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"Pauses the contract\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"registerDlp(address,address,bool)\":{\"params\":{\"dlpAddress\":\"address of the dlp\",\"dlpOwnerAddress\":\"owner of the dlp\",\"granted\":\"if the dlp is granted\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"saveEpochPerformances(uint256,(uint256,uint256,uint256,uint256,uint256)[])\":{\"params\":{\"dlpPerformances\":\"An array of DLPPerformance structs containing the performance metrics of the DLPs\",\"epochId\":\"The ID of the epoch\"}},\"stakerDlpEpochs(address,uint256,uint256)\":{\"params\":{\"dlpId\":\"id of the dlp\",\"epochId\":\"epoch id\",\"staker\":\"address of the staker\"}},\"stakerDlps(address,uint256)\":{\"params\":{\"dlpId\":\"id of the dlp\",\"staker\":\"address of the staker\"}},\"stakers(address)\":{\"params\":{\"staker\":\"address of the staker\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"Unpauses the contract\"},\"updateEpochRewardAmount(uint256)\":{\"params\":{\"newEpochRewardAmount\":\"new epoch size\"}},\"updateEpochSize(uint256)\":{\"params\":{\"newEpochSize\":\"new epoch size\"}},\"updateMaxNumberOfDlps(uint256)\":{\"params\":{\"newMaxNumberOfDlps\":\"new maximum number of dlps\"}},\"updateMinDlpStakeAmount(uint256)\":{\"params\":{\"newMinDlpStakeAmount\":\"new minDlpStakeAmount\"}},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"withdraw(address,address,uint256)\":{\"params\":{\"_amount\":\"amount to withdraw\",\"_to\":\"address where the token will be send\",\"_token\":\"address of the token to withdraw use address(0) for VANA\"}}},\"version\":1},\"userdoc\":{\"events\":{\"DlpDeregistered(uint256)\":{\"notice\":\"Triggered when a dlp has been deregistered\"},\"DlpDeregisteredByOwner(uint256,uint256,uint256)\":{\"notice\":\"Triggered when a dlp has been deregistered by the dlp owner\"},\"DlpRegistered(uint256,address,address)\":{\"notice\":\"Triggered when a dlp has registered\"},\"EpochCreated(uint256)\":{\"notice\":\"Triggered when a epoch has been created\"},\"EpochPerformancesSaved(uint256)\":{\"notice\":\"Triggered when epoch performances have been saved\"},\"EpochRewardAmountUpdated(uint256)\":{\"notice\":\"Triggered when the epoch reward amount has been updated\"},\"EpochRewardClaimed(address,uint256,uint256,uint256)\":{\"notice\":\"Triggered when a dlp has claimed un unsent reward\"},\"EpochSizeUpdated(uint256)\":{\"notice\":\"Triggered when the epoch size has been updated\"},\"MaxNumberOfDlpsUpdated(uint256)\":{\"notice\":\"Triggered when the max number of dlps has been updated\"},\"MinDlpStakeAmountUpdated(uint256)\":{\"notice\":\"Triggered when the minDlpStakeAmount has been updated\"},\"ScoresUpdated(uint256[],uint256[])\":{\"notice\":\"Triggered when owner has updated its scores\"},\"Staked(address,uint256,uint256)\":{\"notice\":\"Triggered when user has staked some DAT for a DLP\"},\"Unstaked(address,uint256,uint256)\":{\"notice\":\"Triggered when user has unstaked some DAT from a DLP\"}},\"kind\":\"user\",\"methods\":{\"addRewardForDlps()\":{\"notice\":\"Add rewards for dlps\"},\"claimReward(uint256,uint256)\":{\"notice\":\"Staker claim reward for a dlp in an epoch\"},\"createEpochs()\":{\"notice\":\"Create epochs used when the last epoch has ended\"},\"createEpochsUntilBlockNumber(uint256)\":{\"notice\":\"Create epochs used when the last epoch has ended\"},\"deregisterDlp(uint256)\":{\"notice\":\"Deregister dlp\"},\"deregisterDlpByOwner(uint256,uint256)\":{\"notice\":\"Deregister dlp and withdraw stake amount\"},\"dlps(uint256)\":{\"notice\":\"Get the dlp information\"},\"dlpsByAddress(address)\":{\"notice\":\"Get the dlp information\"},\"epochDlps(uint256,uint256)\":{\"notice\":\"Get epoch dlp information\"},\"epochs(uint256)\":{\"notice\":\"Get epoch information\"},\"initialize((address,uint256,uint256,uint256,uint256,uint256))\":{\"notice\":\"Initialize the contract\"},\"registerDlp(address,address,bool)\":{\"notice\":\"Register a dlp\"},\"registeredDlps()\":{\"notice\":\"Get registered dlps list\"},\"saveEpochPerformances(uint256,(uint256,uint256,uint256,uint256,uint256)[])\":{\"notice\":\"Saves the performances of DLPs for a specific epoch\"},\"stakerDlpEpochs(address,uint256,uint256)\":{\"notice\":\"Get the staker epoch dlp\"},\"stakerDlps(address,uint256)\":{\"notice\":\"Get the dlp stakers\"},\"stakers(address)\":{\"notice\":\"Get the staker information\"},\"updateEpochRewardAmount(uint256)\":{\"notice\":\"Update the epochRewardAmount\"},\"updateEpochSize(uint256)\":{\"notice\":\"Update the epoch size\"},\"updateMaxNumberOfDlps(uint256)\":{\"notice\":\"Update the maximum number of dlps\"},\"updateMinDlpStakeAmount(uint256)\":{\"notice\":\"Update the minDlpStakeAmount\"},\"version()\":{\"notice\":\"return the version of the contract\"},\"withdraw(address,address,uint256)\":{\"notice\":\"Allows the owner to withdraw tokens from the contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/root/DataLiquidityPoolsRootImplementation.sol\":\"DataLiquidityPoolsRootImplementation\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\\n    struct AccessControlStorage {\\n        mapping(bytes32 role => RoleData) _roles;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.AccessControl\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\\n\\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\\n        assembly {\\n            $.slot := AccessControlStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        $._roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (!hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6662ec4e5cefca03eeadd073e9469df8d2944bb2ee8ec8f7622c2c46aab5f225\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {OwnableUpgradeable} from \\\"./OwnableUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is specified at deployment time in the constructor for `Ownable`. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable2Step\\n    struct Ownable2StepStorage {\\n        address _pendingOwner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable2Step\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant Ownable2StepStorageLocation = 0x237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c00;\\n\\n    function _getOwnable2StepStorage() private pure returns (Ownable2StepStorage storage $) {\\n        assembly {\\n            $.slot := Ownable2StepStorageLocation\\n        }\\n    }\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    function __Ownable2Step_init() internal onlyInitializing {\\n    }\\n\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        Ownable2StepStorage storage $ = _getOwnable2StepStorage();\\n        return $._pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        Ownable2StepStorage storage $ = _getOwnable2StepStorage();\\n        $._pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        Ownable2StepStorage storage $ = _getOwnable2StepStorage();\\n        delete $._pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        if (pendingOwner() != sender) {\\n            revert OwnableUnauthorizedAccount(sender);\\n        }\\n        _transferOwnership(sender);\\n    }\\n}\\n\",\"keccak256\":\"0xbca4a4f66d98028293dba695851d1b20d3e0ba2fff7453fb241f192fa3fc6b6f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC1967-compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f13b947637c4969c0644cab4ef399cdc4b67f101463b8775c5a43b118558e53\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Pausable\\n    struct PausableStorage {\\n        bool _paused;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Pausable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant PausableStorageLocation = 0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300;\\n\\n    function _getPausableStorage() private pure returns (PausableStorage storage $) {\\n        assembly {\\n            $.slot := PausableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        PausableStorage storage $ = _getPausableStorage();\\n        return $._paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x92915b7f7f642c6be3f65bfd1522feb5d5b6ef25f755f4dbb51df32c868f2f97\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xb44e086e941292cdc7f440de51478493894ef0b1aeccb0c4047445919f667f74\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xdaba3f7c42c55b2896353f32bd27d4d5f8bae741b3b05d4c53f67abc4dc47ce8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x2a1f9944df2015c081d89cd41ba22ffaf10aa6285969f0dc612b235cc448999c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x06a78f9b3ee3e6d0eb4e4cd635ba49960bea34cac1db8c0a27c75f2319f1fd65\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"},\"contracts/root/DataLiquidityPoolsRootImplementation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.24;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interfaces/DataLiquidityPoolsRootStorageV1.sol\\\";\\n\\ncontract DataLiquidityPoolsRootImplementation is\\n    UUPSUpgradeable,\\n    PausableUpgradeable,\\n    Ownable2StepUpgradeable,\\n    AccessControlUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    DataLiquidityPoolsRootStorageV1\\n{\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @notice Triggered when a dlp has registered\\n     *\\n     * @param dlpId                        id of the dlp\\n     * @param dlpAddress                   address of the dlp\\n     * @param ownerAddress                 owner of the dlp\\n     */\\n    event DlpRegistered(uint256 indexed dlpId, address indexed dlpAddress, address indexed ownerAddress);\\n\\n    /**\\n     * @notice Triggered when a dlp has been deregistered\\n     *\\n     * @param dlpId                   id of the dlp\\n     */\\n    event DlpDeregistered(uint256 indexed dlpId);\\n\\n    /**\\n     * @notice Triggered when a dlp has been deregistered by the dlp owner\\n     *\\n     * @param dlpId                              id of the dlp\\n     * @param unstakedAmount                     amount unstaked\\n     * @param penaltyAmount                      penalty amount\\n     */\\n    event DlpDeregisteredByOwner(uint256 indexed dlpId, uint256 unstakedAmount, uint256 penaltyAmount);\\n\\n    /**\\n     * @notice Triggered when a epoch has been created\\n     *\\n     * @param epochId                  reward epoch id\\n     */\\n    event EpochCreated(uint256 epochId);\\n\\n    /**\\n     * @notice Triggered when owner has updated its scores\\n     *\\n     * @param dlpIds                       dlp ids\\n     * @param scores                       dlp scores\\n     */\\n    event ScoresUpdated(uint256[] dlpIds, uint256[] scores);\\n\\n    /**\\n     * @notice Triggered when the max number of dlps has been updated\\n     *\\n     * @param newMaxNumberOfDlps           new max number of dlps\\n     */\\n    event MaxNumberOfDlpsUpdated(uint256 newMaxNumberOfDlps);\\n\\n    /**\\n     * @notice Triggered when the epoch size has been updated\\n     *\\n     * @param newEpochSize                new epoch size\\n     */\\n    event EpochSizeUpdated(uint256 newEpochSize);\\n\\n    /**\\n     * @notice Triggered when the epoch reward amount has been updated\\n     *\\n     * @param newEpochRewardAmount                new epoch reward amount\\n     */\\n    event EpochRewardAmountUpdated(uint256 newEpochRewardAmount);\\n\\n    /**\\n     * @notice Triggered when the minDlpStakeAmount has been updated\\n     *\\n     * @param newMinDlpStakeAmount                new minDlpStakeAmount\\n     */\\n    event MinDlpStakeAmountUpdated(uint256 newMinDlpStakeAmount);\\n\\n    /**\\n     * @notice Triggered when a dlp has claimed un unsent reward\\n     *\\n     * @param staker                              address of the staker\\n     * @param epochId                             epoch id\\n     * @param dlpId                               id of the dlp\\n     * @param claimAmount                         amount claimed\\n     */\\n    event EpochRewardClaimed(address staker, uint256 epochId, uint256 dlpId, uint256 claimAmount);\\n\\n    /**\\n     * @notice Triggered when user has staked some DAT for a DLP\\n     *\\n     * @param staker                            address of the staker\\n     * @param dlpId                             id of the dlp\\n     * @param amount                            amount staked\\n     */\\n    event Staked(address indexed staker, uint256 indexed dlpId, uint256 amount);\\n\\n    /**\\n     * @notice Triggered when user has unstaked some DAT from a DLP\\n     *\\n     * @param staker                            address of the staker\\n     * @param dlpId                             id of the dlp\\n     * @param amount                            amount unstaked\\n     */\\n    event Unstaked(address indexed staker, uint256 indexed dlpId, uint256 amount);\\n\\n    /**\\n     * @notice Triggered when epoch performances have been saved\\n     *\\n     * @param epochId                         epoch id\\n     */\\n    event EpochPerformancesSaved(uint256 epochId);\\n\\n    error InvalidStakeAmount();\\n    error InvalidUnstakeAmount();\\n    error InvalidDlpStatus();\\n    error TooManyDlps();\\n    error NotDlpOwner();\\n    error WithdrawNotAllowed();\\n    error ArityMismatch();\\n    error NotAllowed();\\n    error InvalidPerformances();\\n    error NothingToClaim();\\n    error CurrentEpochNotInitialized();\\n    error EpochPerformancesAlreadySet();\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the caller is the owner of the dlp\\n     *\\n     * @param dlpId                         id of the dlp\\n     */\\n    modifier onlyDlpOwner(uint256 dlpId) {\\n        if (_dlps[dlpId].ownerAddress != msg.sender) {\\n            revert NotDlpOwner();\\n        }\\n        _;\\n    }\\n\\n    modifier whenActiveCurrentEpoch() {\\n        if (_epochs[epochsCount].endBlock < block.number) {\\n            revert CurrentEpochNotInitialized();\\n        }\\n        _;\\n    }\\n\\n    struct InitParams {\\n        address payable ownerAddress;\\n        uint256 newMaxNumberOfDlps;\\n        uint256 newMinDlpStakeAmount;\\n        uint256 startBlock;\\n        uint256 newEpochSize;\\n        uint256 newEpochRewardAmount;\\n    }\\n\\n    /**\\n     * @notice Initialize the contract\\n     *\\n     * @param params                             initialization parameters\\n     */\\n    function initialize(InitParams memory params) external initializer {\\n        __Ownable2Step_init();\\n        __UUPSUpgradeable_init();\\n        __ReentrancyGuard_init();\\n        __Pausable_init();\\n        __AccessControl_init();\\n\\n        maxNumberOfDlps = params.newMaxNumberOfDlps;\\n        minDlpStakeAmount = params.newMinDlpStakeAmount;\\n        epochSize = params.newEpochSize;\\n        epochRewardAmount = params.newEpochRewardAmount;\\n\\n        Epoch storage epoch0 = _epochs[0];\\n        epoch0.startBlock = Math.min(params.startBlock - 1, block.number);\\n        epoch0.endBlock = params.startBlock - 1;\\n\\n        _transferOwnership(params.ownerAddress);\\n    }\\n\\n    /**\\n     * @notice Upgrade the contract\\n     * This function is required by OpenZeppelin's UUPSUpgradeable\\n     *\\n     * @param newImplementation                  new implementation\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual override onlyOwner {}\\n\\n    /**\\n     * return the version of the contract\\n     */\\n    function version() external pure virtual override returns (uint256) {\\n        return 1;\\n    }\\n\\n    /**\\n     * @notice Get the dlp information\\n     *\\n     * @param dlpId                         id of the dlp\\n     */\\n    function dlps(uint256 dlpId) public view override returns (DlpResponse memory) {\\n        Dlp memory dlp = _dlps[dlpId];\\n\\n        return\\n            DlpResponse({\\n                id: dlp.id,\\n                dlpAddress: dlp.dlpAddress,\\n                ownerAddress: dlp.ownerAddress,\\n                stakeAmount: dlp.stakeAmount,\\n                status: dlp.status,\\n                registrationBlockNumber: dlp.registrationBlockNumber,\\n                grantedAmount: dlp.grantedAmount\\n            });\\n    }\\n\\n    /**\\n     * @notice Get the dlp information\\n     *\\n     * @param dlpAddress                         address of the dlp\\n     */\\n    function dlpsByAddress(address dlpAddress) external view override returns (DlpResponse memory) {\\n        return dlps(dlpIds[dlpAddress]);\\n    }\\n\\n    /**\\n     * @notice Get registered dlps list\\n     */\\n    function registeredDlps() external view override returns (uint256[] memory) {\\n        return _registeredDlps.values();\\n    }\\n\\n    /**\\n     * @notice Get epoch information\\n     *\\n     * @param epochId                         epoch id\\n     */\\n    function epochs(uint256 epochId) external view override returns (EpochResponse memory) {\\n        return\\n            EpochResponse({\\n                startBlock: _epochs[epochId].startBlock,\\n                endBlock: _epochs[epochId].endBlock,\\n                reward: _epochs[epochId].reward,\\n                dlpIds: _epochs[epochId].dlpIds.values()\\n            });\\n    }\\n\\n    /**\\n     * @notice Get epoch dlp information\\n     *\\n     * @param epochId                         epoch id\\n     * @param dlpId                           id of the dlp\\n     */\\n    function epochDlps(uint256 epochId, uint256 dlpId) external view override returns (EpochDlp memory) {\\n        return _epochs[epochId].dlps[dlpId];\\n    }\\n\\n    /**\\n     * @notice Get the staker information\\n     *\\n     * @param staker                         address of the staker\\n     */\\n    function stakers(address staker) external view override returns (uint256) {\\n        return _stakers[staker].totalStaked;\\n    }\\n\\n    /**\\n     * @notice Get the dlp stakers\\n     *\\n     * @param staker                        address of the staker\\n     * @param dlpId                         id of the dlp\\n     */\\n    function stakerDlps(address staker, uint256 dlpId) external view override returns (uint256) {\\n        return _stakers[staker].dlps[dlpId].stakedAmount;\\n    }\\n\\n    /**\\n     * @notice Get the staker epoch dlp\\n     *\\n     * @param staker                          address of the staker\\n     * @param epochId                         epoch id\\n     * @param dlpId                           id of the dlp\\n     */\\n    function stakerDlpEpochs(\\n        address staker,\\n        uint256 dlpId,\\n        uint256 epochId\\n    ) external view override returns (StakerDlpEpoch memory) {\\n        return _stakers[staker].dlps[dlpId].epochs[epochId];\\n    }\\n\\n    /**\\n     * @dev Pauses the contract\\n     */\\n    function pause() external override onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpauses the contract\\n     */\\n    function unpause() external override onlyOwner {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @notice Update the maximum number of dlps\\n     *\\n     * @param newMaxNumberOfDlps           new maximum number of dlps\\n     */\\n    function updateMaxNumberOfDlps(uint256 newMaxNumberOfDlps) external override onlyOwner {\\n        maxNumberOfDlps = newMaxNumberOfDlps;\\n\\n        emit MaxNumberOfDlpsUpdated(newMaxNumberOfDlps);\\n    }\\n\\n    /**\\n     * @notice Update the epoch size\\n     *\\n     * @param newEpochSize                new epoch size\\n     */\\n    function updateEpochSize(uint256 newEpochSize) external override onlyOwner {\\n        epochSize = newEpochSize;\\n\\n        emit EpochSizeUpdated(newEpochSize);\\n    }\\n\\n    /**\\n     * @notice Update the epochRewardAmount\\n     *\\n     * @param newEpochRewardAmount                new epoch size\\n     */\\n    function updateEpochRewardAmount(uint256 newEpochRewardAmount) external override onlyOwner {\\n        createEpochs();\\n        epochRewardAmount = newEpochRewardAmount;\\n\\n        emit EpochRewardAmountUpdated(newEpochRewardAmount);\\n    }\\n\\n    /**\\n     * @notice Update the minDlpStakeAmount\\n     *\\n     * @param newMinDlpStakeAmount                new minDlpStakeAmount\\n     */\\n    function updateMinDlpStakeAmount(uint256 newMinDlpStakeAmount) external override onlyOwner {\\n        minDlpStakeAmount = newMinDlpStakeAmount;\\n\\n        emit MinDlpStakeAmountUpdated(newMinDlpStakeAmount);\\n    }\\n\\n    /**\\n     * @notice Register a dlp\\n     *\\n     * @param dlpAddress                   address of the dlp\\n     * @param dlpOwnerAddress              owner of the dlp\\n     * @param granted                      if the dlp is granted\\n     */\\n    function registerDlp(\\n        address dlpAddress,\\n        address payable dlpOwnerAddress,\\n        bool granted\\n    ) external payable override whenNotPaused nonReentrant whenActiveCurrentEpoch {\\n        if (dlpIds[dlpAddress] != 0) {\\n            revert InvalidDlpStatus();\\n        }\\n\\n        dlpsCount++;\\n        Dlp storage dlp = _dlps[dlpsCount];\\n\\n        if (msg.value < minDlpStakeAmount) {\\n            revert InvalidStakeAmount();\\n        }\\n\\n        if (granted) {\\n            dlp.grantedAmount = msg.value;\\n        }\\n\\n        dlp.id = dlpsCount;\\n        dlp.ownerAddress = dlpOwnerAddress;\\n        dlp.dlpAddress = dlpAddress;\\n        dlp.status = DlpStatus.Registered;\\n\\n        dlpIds[dlpAddress] = dlpsCount;\\n\\n        _addStake(dlpOwnerAddress, dlpsCount, msg.value);\\n\\n        _registeredDlps.add(dlpsCount);\\n\\n        emit DlpRegistered(dlpsCount, dlpAddress, dlpOwnerAddress);\\n    }\\n\\n    /**\\n     * @notice Deregister dlp\\n     *\\n     * @param dlpId                        dlp id\\n     */\\n    function deregisterDlp(uint256 dlpId) external override onlyDlpOwner(dlpId) nonReentrant whenActiveCurrentEpoch {\\n        Dlp storage dlp = _dlps[dlpId];\\n\\n        _deregisterDlp(dlpId);\\n\\n        if (dlp.grantedAmount == 0) {\\n            _unstake(dlp.ownerAddress, dlp.id, _stakers[dlp.ownerAddress].dlps[dlpId].stakedAmount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Deregister dlp and withdraw stake amount\\n     *\\n     * @param dlpId                             dlp id\\n     * @param unstakeAmount                     amount to sent to dlp owner\\n     */\\n    function deregisterDlpByOwner(uint256 dlpId, uint256 unstakeAmount) external override onlyOwner nonReentrant {\\n        createEpochs();\\n        Dlp storage dlp = _dlps[dlpId];\\n\\n        if (unstakeAmount > dlp.stakeAmount) {\\n            revert InvalidStakeAmount();\\n        }\\n\\n        if (dlp.status == DlpStatus.Registered) {\\n            _deregisterDlp(dlpId);\\n        }\\n\\n        if (dlp.status != DlpStatus.Deregistered) {\\n            revert InvalidDlpStatus();\\n        }\\n\\n        uint256 penaltyAmount = dlp.stakeAmount - unstakeAmount;\\n\\n        Staker storage staker = _stakers[dlp.ownerAddress];\\n\\n        uint256 ownerStakeAmount = staker.dlps[dlpId].stakedAmount;\\n        dlp.stakeAmount -= ownerStakeAmount;\\n\\n        staker.totalStaked -= ownerStakeAmount;\\n        staker.dlps[dlp.id].stakedAmount = 0;\\n        staker.dlps[dlp.id].epochs[epochsCount].stakedAmount = 0;\\n\\n        if (penaltyAmount > 0) {\\n            payable(owner()).transfer(penaltyAmount);\\n        }\\n\\n        if (unstakeAmount > 0) {\\n            payable(dlp.ownerAddress).transfer(unstakeAmount);\\n        }\\n\\n        emit Unstaked(dlp.ownerAddress, dlp.id, unstakeAmount);\\n        emit DlpDeregisteredByOwner(dlpId, unstakeAmount, penaltyAmount);\\n    }\\n\\n    /**\\n     * @notice Create epochs\\n     * used when the last epoch has ended\\n     */\\n    function createEpochs() public override {\\n        createEpochsUntilBlockNumber(block.number);\\n    }\\n\\n    /**\\n     * @notice Create epochs\\n     * used when the last epoch has ended\\n     */\\n    function createEpochsUntilBlockNumber(uint256 blockNumber) public override {\\n        Epoch storage lastEpoch = _epochs[epochsCount];\\n\\n        if (lastEpoch.endBlock >= blockNumber) {\\n            return;\\n        }\\n\\n        uint256 epochCountTemp = epochsCount;\\n\\n        while (lastEpoch.endBlock < blockNumber) {\\n            epochCountTemp++;\\n            Epoch storage newEpoch = _epochs[epochCountTemp];\\n\\n            newEpoch.startBlock = lastEpoch.endBlock + 1;\\n            newEpoch.endBlock = newEpoch.startBlock + epochSize - 1;\\n            newEpoch.reward = epochRewardAmount;\\n\\n            lastEpoch = newEpoch;\\n\\n            uint256 index;\\n            uint256[] memory topDlps = getTopDlpsIds(maxNumberOfDlps);\\n            for (index = 0; index < topDlps.length; index++) {\\n                newEpoch.dlpIds.add(topDlps[index]);\\n                newEpoch.dlps[topDlps[index]].stakedAmount = _dlps[topDlps[index]].stakeAmount;\\n            }\\n\\n            emit EpochCreated(epochCountTemp);\\n        }\\n\\n        epochsCount = epochCountTemp;\\n    }\\n\\n    /**\\n     * @notice Saves the performances of DLPs for a specific epoch\\n     *\\n     * @param epochId             The ID of the epoch\\n     * @param dlpPerformances     An array of DLPPerformance structs containing the performance metrics of the DLPs\\n     */\\n    function saveEpochPerformances(\\n        uint256 epochId,\\n        DlpPerformance[] memory dlpPerformances\\n    ) external override onlyOwner {\\n        EnumerableSet.UintSet storage epochDlpIds = _epochs[epochId].dlpIds;\\n        uint256 epochDlpsCount = epochDlpIds.length();\\n\\n        if (epochDlpsCount != dlpPerformances.length) {\\n            revert ArityMismatch();\\n        }\\n\\n        uint256 i;\\n        Epoch storage epoch = _epochs[epochId];\\n        EpochDlp storage epochDlp;\\n\\n        uint256 totalScore;\\n        for (i = 0; i < epochDlpsCount; i++) {\\n            epochDlp = epoch.dlps[dlpPerformances[i].dlpId];\\n\\n            if (!epochDlpIds.contains(dlpPerformances[i].dlpId)) {\\n                revert InvalidPerformances();\\n            }\\n\\n            epochDlp.ttf = dlpPerformances[i].ttf;\\n            epochDlp.tfc = dlpPerformances[i].tfc;\\n            epochDlp.vdu = dlpPerformances[i].vdu;\\n            epochDlp.uw = dlpPerformances[i].uw;\\n\\n            totalScore +=\\n                dlpPerformances[i].ttf *\\n                15 +\\n                dlpPerformances[i].tfc *\\n                15 +\\n                dlpPerformances[i].vdu *\\n                50 +\\n                dlpPerformances[i].uw *\\n                20;\\n        }\\n\\n        if (totalScore == 0) {\\n            return;\\n        }\\n\\n        for (i = 0; i < epochDlpsCount; i++) {\\n            epochDlp = epoch.dlps[dlpPerformances[i].dlpId];\\n\\n            if (epochDlp.rewardAmount > 0) {\\n                revert EpochPerformancesAlreadySet();\\n            }\\n\\n            epochDlp.rewardAmount =\\n                ((dlpPerformances[i].ttf *\\n                    15 +\\n                    dlpPerformances[i].tfc *\\n                    15 +\\n                    dlpPerformances[i].vdu *\\n                    50 +\\n                    dlpPerformances[i].uw *\\n                    20) * epoch.reward) /\\n                totalScore;\\n        }\\n\\n        emit EpochPerformancesSaved(epochId);\\n    }\\n\\n    /**\\n     * @notice Add rewards for dlps\\n     */\\n    function addRewardForDlps() external payable override nonReentrant {\\n        totalDlpsRewardAmount += msg.value;\\n    }\\n\\n    /**\\n     * @notice Staker claim reward for a dlp in an epoch\\n     *\\n     * @param epochNumber                         epoch number\\n     * @param dlpId                               dlp id\\n     */\\n    function claimReward(uint256 epochNumber, uint256 dlpId) external nonReentrant {\\n        uint256 epochDlpReward = _epochs[epochNumber].dlps[dlpId].rewardAmount;\\n\\n        StakerDlp storage stakerDlp = _stakers[msg.sender].dlps[dlpId];\\n        StakerDlpEpoch storage stakerDlpEpoch = stakerDlp.epochs[epochNumber];\\n\\n        uint256 stakedAmountBeforeCurrentEpoch = stakerDlp.stakedAmount - stakerDlpEpoch.stakedAmount;\\n\\n        if (stakedAmountBeforeCurrentEpoch == 0 || stakerDlpEpoch.withdrawnReward > 0 || epochDlpReward == 0) {\\n            revert NothingToClaim();\\n        }\\n\\n        Epoch storage epoch = _epochs[epochNumber];\\n        EpochDlp storage epochDlp = epoch.dlps[dlpId];\\n\\n        uint256 rewardAmount = (stakedAmountBeforeCurrentEpoch * epochDlpReward) / epochDlp.stakedAmount;\\n\\n        stakerDlpEpoch.withdrawnReward = rewardAmount;\\n\\n        payable(msg.sender).transfer(rewardAmount);\\n\\n        emit EpochRewardClaimed(msg.sender, epochNumber, dlpId, rewardAmount);\\n    }\\n\\n    function stake(uint256 dlpId) external payable override whenActiveCurrentEpoch {\\n        _addStake(msg.sender, dlpId, msg.value);\\n    }\\n\\n    function unstake(uint256 dlpId, uint256 amount) external override whenActiveCurrentEpoch {\\n        if (amount > _stakers[msg.sender].dlps[dlpId].stakedAmount) {\\n            revert InvalidUnstakeAmount();\\n        }\\n\\n        _unstake(msg.sender, dlpId, amount);\\n    }\\n\\n    /**\\n     * @notice Allows the owner to withdraw tokens from the contract\\n     *\\n     * @param _token    address of the token to withdraw use address(0) for VANA\\n     * @param _to       address where the token will be send\\n     * @param _amount   amount to withdraw\\n     */\\n    function withdraw(\\n        address _token,\\n        address _to,\\n        uint256 _amount\\n    ) external override onlyOwner nonReentrant returns (bool success) {\\n        if (_token == address(0)) {\\n            (success, ) = _to.call{value: _amount}(\\\"\\\");\\n            return success;\\n        } else {\\n            IERC20(_token).safeTransfer(_to, _amount);\\n            success = true;\\n        }\\n    }\\n\\n    function _deregisterDlp(uint256 dlpId) internal {\\n        createEpochs();\\n\\n        Dlp storage dlp = _dlps[dlpId];\\n\\n        if (dlp.status != DlpStatus.Registered) {\\n            revert InvalidDlpStatus();\\n        }\\n\\n        dlp.status = DlpStatus.Deregistered;\\n\\n        _registeredDlps.remove(dlpId);\\n\\n        emit DlpDeregistered(dlpId);\\n    }\\n\\n    function _addStake(address stakerAddress, uint256 dlpId, uint256 amount) internal {\\n        Dlp storage dlp = _dlps[dlpId];\\n\\n        if (dlp.status != DlpStatus.Registered) {\\n            revert InvalidDlpStatus();\\n        }\\n        dlp.stakeAmount += amount;\\n\\n        Staker storage staker = _stakers[stakerAddress];\\n\\n        staker.totalStaked += amount;\\n        staker.dlps[dlpId].stakedAmount += amount;\\n        staker.dlps[dlpId].epochs[epochsCount].stakedAmount += amount;\\n\\n        emit Staked(stakerAddress, dlpId, amount);\\n    }\\n\\n    function _unstake(address stakerAddress, uint256 dlpId, uint256 amount) internal {\\n        Staker storage staker = _stakers[stakerAddress];\\n\\n        staker.totalStaked -= amount;\\n        staker.dlps[dlpId].stakedAmount -= amount;\\n        if (staker.dlps[dlpId].epochs[epochsCount].stakedAmount > amount) {\\n            staker.dlps[dlpId].epochs[epochsCount].stakedAmount -= amount;\\n        } else {\\n            staker.dlps[dlpId].epochs[epochsCount].stakedAmount = 0;\\n        }\\n\\n        _dlps[dlpId].stakeAmount -= amount;\\n\\n        payable(stakerAddress).transfer(amount);\\n\\n        emit Unstaked(stakerAddress, dlpId, amount);\\n    }\\n\\n    function getTopDlpsIds(uint256 numberOfDlps) public view override returns (uint256[] memory) {\\n        uint256[] memory registeredDlpIds = _registeredDlps.values();\\n        uint256 dlpsCount = registeredDlpIds.length;\\n\\n        numberOfDlps = Math.min(numberOfDlps, dlpsCount);\\n\\n        uint256[] memory topDlpIds = new uint256[](numberOfDlps);\\n\\n        if (numberOfDlps == 0) {\\n            return topDlpIds;\\n        }\\n\\n        uint256 index;\\n        uint256 position;\\n\\n        topDlpIds[0] = registeredDlpIds[0];\\n\\n        Dlp storage currentDlp;\\n        Dlp storage previousDlp;\\n\\n        for (index = 1; index < numberOfDlps; index++) {\\n            position = index;\\n\\n            currentDlp = _dlps[registeredDlpIds[index]];\\n            previousDlp = _dlps[topDlpIds[position - 1]];\\n\\n            while (\\n                previousDlp.stakeAmount < currentDlp.stakeAmount ||\\n                (previousDlp.stakeAmount == currentDlp.stakeAmount && previousDlp.id > currentDlp.id)\\n            ) {\\n                topDlpIds[position] = topDlpIds[position - 1];\\n                position--;\\n\\n                if (position == 0) {\\n                    break;\\n                } else {\\n                    previousDlp = _dlps[topDlpIds[position - 1]];\\n                }\\n            }\\n\\n            topDlpIds[position] = registeredDlpIds[index];\\n        }\\n\\n        for (index = numberOfDlps; index < dlpsCount; index++) {\\n            position = numberOfDlps - 1;\\n\\n            currentDlp = _dlps[registeredDlpIds[index]];\\n            previousDlp = _dlps[topDlpIds[position]];\\n\\n            if (\\n                previousDlp.stakeAmount > currentDlp.stakeAmount ||\\n                (previousDlp.stakeAmount == currentDlp.stakeAmount && previousDlp.id < currentDlp.id)\\n            ) {\\n                continue;\\n            }\\n\\n            previousDlp = _dlps[topDlpIds[position - 1]];\\n\\n            while (\\n                previousDlp.stakeAmount < currentDlp.stakeAmount ||\\n                (previousDlp.stakeAmount == currentDlp.stakeAmount && previousDlp.id > currentDlp.id)\\n            ) {\\n                topDlpIds[position] = topDlpIds[position - 1];\\n                position--;\\n\\n                if (position == 0) {\\n                    break;\\n                } else {\\n                    previousDlp = _dlps[topDlpIds[position - 1]];\\n                }\\n            }\\n\\n            topDlpIds[position] = registeredDlpIds[index];\\n        }\\n\\n        return topDlpIds;\\n    }\\n}\\n\",\"keccak256\":\"0x29acd883dda0cc4213b0f882b29618134d85c360cc0f220e9a678e50a6fa219c\",\"license\":\"Apache-2.0\"},\"contracts/root/interfaces/DataLiquidityPoolsRootStorageV1.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.24;\\n\\nimport \\\"./IDataLiquidityPoolsRoot.sol\\\";\\n\\n/**`\\n * @title Storage for DataLiquidityPoolsRoot\\n * @notice For future upgrades, do not change DataLiquidityPoolsRootStorageV1. Create a new\\n * contract which implements DataLiquidityPoolsRootStorageV1\\n */\\nabstract contract DataLiquidityPoolsRootStorageV1 is IDataLiquidityPoolsRoot {\\n    uint256 public override maxNumberOfDlps;\\n    uint256 public override minDlpStakeAmount;\\n    uint256 public override totalDlpsRewardAmount;\\n    uint256 public override epochRewardAmount;\\n    uint256 public override epochSize;\\n\\n    uint256 public override dlpsCount;\\n    mapping(uint256 => Dlp) internal _dlps;\\n    mapping(address => uint256) public override dlpIds;\\n\\n    EnumerableSet.UintSet internal _registeredDlps;\\n\\n    uint256 public override epochsCount;\\n    mapping(uint256 => Epoch) internal _epochs;\\n\\n    mapping(address => Staker) internal _stakers;\\n}\\n\",\"keccak256\":\"0xaecddc7cd3da38097f170c4641095f277ecb576e90646cc61edf689e4c4b8605\",\"license\":\"Apache-2.0\"},\"contracts/root/interfaces/IDataLiquidityPoolsRoot.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\ninterface IDataLiquidityPoolsRoot is IAccessControl {\\n    enum DlpStatus {\\n        None,\\n        Registered,\\n        Deregistered\\n    }\\n\\n    struct Epoch {\\n        uint256 startBlock;\\n        uint256 endBlock;\\n        uint256 reward;\\n        EnumerableSet.UintSet dlpIds;\\n        mapping(uint256 => EpochDlp) dlps;\\n    }\\n\\n    struct Dlp {\\n        uint256 id;\\n        address dlpAddress;\\n        address payable ownerAddress;\\n        uint256 stakeAmount;\\n        DlpStatus status;\\n        uint256 registrationBlockNumber;\\n        uint256 grantedAmount;\\n    }\\n\\n    struct EpochDlp {\\n        uint256 ttf;\\n        uint256 tfc;\\n        uint256 vdu;\\n        uint256 uw;\\n        uint256 stakedAmount;\\n        uint256 rewardAmount;\\n    }\\n\\n    struct StakerDlpEpoch {\\n        uint256 stakedAmount;\\n        uint256 withdrawnReward;\\n    }\\n\\n    struct StakerDlp {\\n        uint256 stakedAmount;\\n        mapping(uint256 => StakerDlpEpoch) epochs;\\n    }\\n\\n    struct Staker {\\n        uint256 totalStaked;\\n        mapping(uint256 => StakerDlp) dlps;\\n    }\\n\\n    struct DlpPerformance {\\n        uint256 dlpId;\\n        uint256 ttf;\\n        uint256 tfc;\\n        uint256 vdu;\\n        uint256 uw;\\n    }\\n\\n    function version() external pure returns (uint256);\\n    function maxNumberOfDlps() external view returns (uint256);\\n    function epochSize() external view returns (uint256);\\n    function registeredDlps() external view returns (uint256[] memory);\\n    function epochsCount() external view returns (uint256);\\n    struct EpochResponse {\\n        uint256 startBlock;\\n        uint256 endBlock;\\n        uint256 reward;\\n        uint256[] dlpIds;\\n    }\\n    function epochs(uint256 epochId) external view returns (EpochResponse memory);\\n    function epochDlps(uint256 epochId, uint256 dlpId) external view returns (EpochDlp memory);\\n    function minDlpStakeAmount() external view returns (uint256);\\n    function totalDlpsRewardAmount() external view returns (uint256);\\n    function epochRewardAmount() external view returns (uint256);\\n    function dlpsCount() external view returns (uint256);\\n    struct DlpResponse {\\n        uint256 id;\\n        address dlpAddress;\\n        address ownerAddress;\\n        uint256 stakeAmount;\\n        DlpStatus status;\\n        uint256 registrationBlockNumber;\\n        uint256 grantedAmount;\\n    }\\n    function dlps(uint256 index) external view returns (DlpResponse memory);\\n    function dlpsByAddress(address dlpAddress) external view returns (DlpResponse memory);\\n    function dlpIds(address dlpAddress) external view returns (uint256);\\n    function stakers(address staker) external view returns (uint256);\\n    function stakerDlps(address staker, uint256 dlpId) external view returns (uint256);\\n    function stakerDlpEpochs(\\n        address staker,\\n        uint256 dlpId,\\n        uint256 epochId\\n    ) external view returns (StakerDlpEpoch memory);\\n    function getTopDlpsIds(uint256 numberOfDlps) external returns (uint256[] memory);\\n    function pause() external;\\n    function unpause() external;\\n    function updateMaxNumberOfDlps(uint256 newMaxNumberOfDlps) external;\\n    function updateEpochSize(uint256 newEpochSize) external;\\n    function updateEpochRewardAmount(uint256 newEpochRewardAmount) external;\\n    function updateMinDlpStakeAmount(uint256 newMinStakeAmount) external;\\n    function createEpochs() external;\\n    function createEpochsUntilBlockNumber(uint256 blockNumber) external;\\n    function registerDlp(address dlpAddress, address payable ownerAddress, bool granted) external payable;\\n    function deregisterDlp(uint256 dlpId) external;\\n    function deregisterDlpByOwner(uint256 dlpId, uint256 unstakeAmount) external;\\n    function addRewardForDlps() external payable;\\n    function claimReward(uint256 epochNumber, uint256 dlpId) external;\\n    function stake(uint256 dlpId) external payable;\\n    function unstake(uint256 dlpId, uint256 amount) external;\\n    function saveEpochPerformances(uint256 epochId, DlpPerformance[] memory dlpPerformances) external;\\n    function withdraw(address _token, address _to, uint256 _amount) external returns (bool success);\\n}\\n\",\"keccak256\":\"0x47ea539d64d4e1e237674c8f4a69acdeac08e4a2813a68a2eb5671d0a7c26caf\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60a06040523060805234801561001457600080fd5b50608051613a3a61003e6000396000818161274e0152818161277701526128b80152613a3a6000f3fe6080604052600436106102ff5760003560e01c806379ba509711610190578063b3a7b9da116100dc578063d547741f11610095578063e7a622761161006f578063e7a6227614610922578063ea83e47b146109b3578063eaeb2ec8146109d3578063f2fde38b146109f357600080fd5b8063d547741f146108cd578063d9caed12146108ed578063e30c39781461090d57600080fd5b8063b3a7b9da146107b1578063b4fcea1d1461081d578063c06020b01461083d578063c6b61e4c1461086a578063ca4ab3a214610897578063d4e01872146108ad57600080fd5b806391d1485411610149578063a4e9196a11610123578063a4e9196a1461072d578063a694fc3a1461074d578063aca456be14610760578063ad3cb1cc1461077357600080fd5b806391d14854146106d85780639e2c8a5b146106f8578063a217fddf1461071857600080fd5b806379ba5097146106155780638456cb591461062a57806386bb8f371461063f5780638da5cb5b1461065f5780639168ae721461068c578063916e1c57146106c257600080fd5b80634f1ef2861161024f5780635c975abb11610208578063715018a6116101e2578063715018a6146105ab57806373824a0e146105c0578063765bdea0146105e057806376bc98691461060057600080fd5b80635c975abb1461055057806368ed41ed146105755780636b289f5b1461058b57600080fd5b80634f1ef286146104c857806351c144a4146104db578063526fda59146104f157806352d1902d1461051157806354fd4d5014610526578063572d356e1461053a57600080fd5b80632523ca7f116102bc5780633f2f924f116102965780633f2f924f146104445780633f4ba83a14610466578063439b37561461047b57806349175e76146104a857600080fd5b80632523ca7f146103ee5780632f2ff15d1461040457806336568abe1461042457600080fd5b806301ffc9a71461030457806307813e061461033957806308a3002b1461038e578063132c58e9146103b05780631430091c146103c6578063248a9ca3146103ce575b600080fd5b34801561031057600080fd5b5061032461031f366004613273565b610a13565b60405190151581526020015b60405180910390f35b34801561034557600080fd5b506103806103543660046132b2565b6001600160a01b03919091166000908152600c6020908152604080832093835260019093019052205490565b604051908152602001610330565b34801561039a57600080fd5b506103ae6103a936600461334e565b610a4a565b005b3480156103bc57600080fd5b5061038060035481565b6103ae610c05565b3480156103da57600080fd5b506103806103e93660046133d1565b610c3a565b3480156103fa57600080fd5b5061038060005481565b34801561041057600080fd5b506103ae61041f3660046133ea565b610c5c565b34801561043057600080fd5b506103ae61043f3660046133ea565b610c7e565b34801561045057600080fd5b50610459610cb6565b604051610330919061341a565b34801561047257600080fd5b506103ae610cc7565b34801561048757600080fd5b5061049b61049636600461345e565b610cd7565b6040516103309190613491565b3480156104b457600080fd5b506103ae6104c336600461350d565b610d39565b6103ae6104d636600461352f565b610fb6565b3480156104e757600080fd5b5061038060015481565b3480156104fd57600080fd5b506103ae61050c3660046133d1565b610fd1565b34801561051d57600080fd5b50610380611015565b34801561053257600080fd5b506001610380565b34801561054657600080fd5b5061038060045481565b34801561055c57600080fd5b506000805160206139c58339815191525460ff16610324565b34801561058157600080fd5b5061038060055481565b34801561059757600080fd5b506103ae6105a63660046133d1565b611032565b3480156105b757600080fd5b506103ae611077565b3480156105cc57600080fd5b506104596105db3660046133d1565b611089565b3480156105ec57600080fd5b506103ae6105fb3660046135d7565b6114a4565b34801561060c57600080fd5b506103ae61189f565b34801561062157600080fd5b506103ae6118a8565b34801561063657600080fd5b506103ae6118f5565b34801561064b57600080fd5b506103ae61065a36600461350d565b611905565b34801561066b57600080fd5b50610674611a74565b6040516001600160a01b039091168152602001610330565b34801561069857600080fd5b506103806106a736600461345e565b6001600160a01b03166000908152600c602052604090205490565b3480156106ce57600080fd5b50610380600a5481565b3480156106e457600080fd5b506103246106f33660046133ea565b611aa9565b34801561070457600080fd5b506103ae61071336600461350d565b611ae1565b34801561072457600080fd5b50610380600081565b34801561073957600080fd5b506103ae6107483660046133d1565b611b5f565b6103ae61075b3660046133d1565b611b9c565b6103ae61076e3660046136d9565b611bdc565b34801561077f57600080fd5b506107a4604051806040016040528060058152602001640352e302e360dc1b81525081565b6040516103309190613748565b3480156107bd57600080fd5b506107d16107cc36600461350d565b611d82565b6040516103309190600060c082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015292915050565b34801561082957600080fd5b506103ae6108383660046133d1565b611e1e565b34801561084957600080fd5b5061038061085836600461345e565b60076020526000908152604090205481565b34801561087657600080fd5b5061088a6108853660046133d1565b611f0b565b604051610330919061377b565b3480156108a357600080fd5b5061038060025481565b3480156108b957600080fd5b506103ae6108c83660046133d1565b611f88565b3480156108d957600080fd5b506103ae6108e83660046133ea565b611fc5565b3480156108f957600080fd5b506103246109083660046137eb565b611fe1565b34801561091957600080fd5b50610674612090565b34801561092e57600080fd5b5061099861093d36600461382c565b604080518082018252600080825260209182018190526001600160a01b03959095168552600c815281852093855260019384018152818520928552918301825292839020835180850190945280548452909101549082015290565b60408051825181526020928301519281019290925201610330565b3480156109bf57600080fd5b5061049b6109ce3660046133d1565b6120b9565b3480156109df57600080fd5b506103ae6109ee3660046133d1565b61220f565b3480156109ff57600080fd5b506103ae610a0e36600461345e565b61239f565b60006001600160e01b03198216637965db0b60e01b1480610a4457506301ffc9a760e01b6001600160e01b03198316145b92915050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff16600081158015610a905750825b905060008267ffffffffffffffff166001148015610aad5750303b155b905081158015610abb575080155b15610ad95760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff191660011785558315610b0357845460ff60401b1916600160401b1785555b610b0b612424565b610b13612424565b610b1b61242c565b610b2361243c565b610b2b612424565b602080870151600090815560408801516001908155608089015160045560a0890151600355908052600b90915260608701517fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7691610b9391610b8d9190613877565b4361244c565b81556060870151610ba690600190613877565b60018201558651610bb690612462565b508315610bfd57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050565b610c0d61249a565b3460026000828254610c1f919061388a565b909155505060016000805160206139e583398151915255565b565b60009081526000805160206139a5833981519152602052604090206001015490565b610c6582610c3a565b610c6e816124e6565b610c7883836124f0565b50505050565b6001600160a01b0381163314610ca75760405163334bd91960e11b815260040160405180910390fd5b610cb18282612595565b505050565b6060610cc26008612611565b905090565b610ccf61261e565b610c38612650565b610d176040805160e08101825260008082526020820181905291810182905260608101829052906080820190815260200160008152602001600081525090565b6001600160a01b038216600090815260076020526040902054610a44906120b9565b610d4161261e565b610d4961249a565b610d5161189f565b60008281526006602052604090206003810154821115610d8457604051630103be3b60e21b815260040160405180910390fd5b6001600482015460ff166002811115610d9f57610d9f61347b565b03610dad57610dad836126aa565b6002600482015460ff166002811115610dc857610dc861347b565b14610de657604051636e1ed6c560e11b815260040160405180910390fd5b6000828260030154610df89190613877565b60028301546001600160a01b03166000908152600c602090815260408083208884526001810190925282205460038601805494955091939092839291610e3f908490613877565b9091555050815481908390600090610e58908490613877565b90915550508354600090815260018084016020908152604080842084905587548452808420600a54855290920190528120558215610ed257610e98611a74565b6001600160a01b03166108fc849081150290604051600060405180830381858888f19350505050158015610ed0573d6000803e3d6000fd5b505b8415610f165760028401546040516001600160a01b039091169086156108fc029087906000818181858888f19350505050158015610f14573d6000803e3d6000fd5b505b835460028501546040518781526001600160a01b03909116907f7fc4727e062e336010f2c282598ef5f14facb3de68cf8195c2f23e1454b2b74e9060200160405180910390a3604080518681526020810185905287917f682386a255f3de85d6d6f2b2dfd88a7cd2e198e99702f6d590d199d5353a1017910160405180910390a250505050610fb260016000805160206139e583398151915255565b5050565b610fbe612743565b610fc7826127e8565b610fb282826127f0565b610fd961261e565b60008190556040518181527fad333ea03ce4e657f8ef5f2f2480d4165184eb4c94bc6011e3bab314bf7791b7906020015b60405180910390a150565b600061101f6128ad565b5060008051602061398583398151915290565b61103a61261e565b61104261189f565b60038190556040518181527f2fe8cb48ce95af273ee232223c3a0fbda25a65208753e99801ce508751f2b7fb9060200161100a565b61107f61261e565b610c386000612462565b606060006110976008612611565b80519091506110a6848261244c565b935060008467ffffffffffffffff8111156110c3576110c36132de565b6040519080825280602002602001820160405280156110ec578160200160208202803683370190505b509050846000036110ff57949350505050565b600080846000815181106111155761111561389d565b6020026020010151836000815181106111305761113061389d565b602002602001018181525050600080600193505b888410156112b957839250600660008886815181106111655761116561389d565b602002602001015181526020019081526020016000209150600660008660018661118f9190613877565b8151811061119f5761119f61389d565b6020026020010151815260200190815260200160002090505b8160030154816003015410806111e15750816003015481600301541480156111e1575081548154115b1561127757846111f2600185613877565b815181106112025761120261389d565b602002602001015185848151811061121c5761121c61389d565b602090810291909101015282611231816138b3565b935050821561127757600660008661124a600187613877565b8151811061125a5761125a61389d565b6020026020010151815260200190815260200160002090506111b8565b8684815181106112895761128961389d565b60200260200101518584815181106112a3576112a361389d565b6020908102919091010152600190930192611144565b8893505b85841015611497576112d060018a613877565b9250600660008886815181106112e8576112e861389d565b602002602001015181526020019081526020016000209150600660008685815181106113165761131661389d565b602002602001015181526020019081526020016000209050816003015481600301541180611357575081600301548160030154148015611357575081548154105b61148c57600660008661136b600187613877565b8151811061137b5761137b61389d565b6020026020010151815260200190815260200160002090505b8160030154816003015410806113bd5750816003015481600301541480156113bd575081548154115b1561145357846113ce600185613877565b815181106113de576113de61389d565b60200260200101518584815181106113f8576113f861389d565b60209081029190910101528261140d816138b3565b9350508215611453576006600086611426600187613877565b815181106114365761143661389d565b602002602001015181526020019081526020016000209050611394565b8684815181106114655761146561389d565b602002602001015185848151811061147f5761147f61389d565b6020026020010181815250505b6001909301926112bd565b5092979650505050505050565b6114ac61261e565b6000828152600b60205260408120600301906114c7826128f6565b9050825181146114ea5760405163c21fe6bf60e01b815260040160405180910390fd5b6000848152600b6020526040812081805b848410156116f95782600501600088868151811061151b5761151b61389d565b6020026020010151600001518152602001908152602001600020915061156787858151811061154c5761154c61389d565b6020026020010151600001518761290090919063ffffffff16565b611584576040516309ffae9760e01b815260040160405180910390fd5b8684815181106115965761159661389d565b60200260200101516020015182600001819055508684815181106115bc576115bc61389d565b60200260200101516040015182600101819055508684815181106115e2576115e261389d565b60200260200101516060015182600201819055508684815181106116085761160861389d565b602002602001015160800151826003018190555086848151811061162e5761162e61389d565b602002602001015160800151601461164691906138ca565b8785815181106116585761165861389d565b602002602001015160600151603261167091906138ca565b8886815181106116825761168261389d565b602002602001015160400151600f61169a91906138ca565b8987815181106116ac576116ac61389d565b602002602001015160200151600f6116c491906138ca565b6116ce919061388a565b6116d8919061388a565b6116e2919061388a565b6116ec908261388a565b60019094019390506114fb565b8060000361170b575050505050505050565b600093505b84841015611862578260050160008886815181106117305761173061389d565b60200260200101516000015181526020019081526020016000209150600082600501541115611772576040516342b9c64560e11b815260040160405180910390fd5b80836002015488868151811061178a5761178a61389d565b60200260200101516080015160146117a291906138ca565b8987815181106117b4576117b461389d565b60200260200101516060015160326117cc91906138ca565b8a88815181106117de576117de61389d565b602002602001015160400151600f6117f691906138ca565b8b89815181106118085761180861389d565b602002602001015160200151600f61182091906138ca565b61182a919061388a565b611834919061388a565b61183e919061388a565b61184891906138ca565b61185291906138e1565b6005830155600190930192611710565b6040518881527f063c789bc6ffc3acfffa8901b15f268313f725599065c914f9607f7494c9fb919060200160405180910390a15050505050505050565b610c384361220f565b33806118b2612090565b6001600160a01b0316146118e95760405163118cdaa760e01b81526001600160a01b03821660048201526024015b60405180910390fd5b6118f281612462565b50565b6118fd61261e565b610c38612918565b61190d61249a565b6000828152600b60209081526040808320848452600590810183528184200154338452600c83528184208585526001908101845282852087865290810190935290832080548354929491926119629190613877565b9050801580611975575060008260010154115b8061197e575083155b1561199c576040516312d37ee560e31b815260040160405180910390fd5b6000868152600b602090815260408083208884526005810190925282206004810154919290916119cc88866138ca565b6119d691906138e1565b60018601819055604051909150339082156108fc029083906000818181858888f19350505050158015611a0d573d6000803e3d6000fd5b5060408051338152602081018b9052908101899052606081018290527f906ba14012f5d73ff502fc20c2a6341bed45709bd352aaee5bccd4ab73ad48ee9060800160405180910390a150505050505050610fb260016000805160206139e583398151915255565b6000807f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c1993005b546001600160a01b031692915050565b60009182526000805160206139a5833981519152602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600a546000908152600b6020526040902060010154431115611b1657604051633970b5f360e01b815260040160405180910390fd5b336000908152600c60209081526040808320858452600101909152902054811115611b54576040516314fea1a960e11b815260040160405180910390fd5b610fb2338383612961565b611b6761261e565b60018190556040518181527fe9a6d1b35cdb834e1d3cfe94b7199407fc9dbb6d64ba6c59b30295425d86d4c19060200161100a565b600a546000908152600b6020526040902060010154431115611bd157604051633970b5f360e01b815260040160405180910390fd5b6118f2338234612ae3565b611be4612c15565b611bec61249a565b600a546000908152600b6020526040902060010154431115611c2157604051633970b5f360e01b815260040160405180910390fd5b6001600160a01b03831660009081526007602052604090205415611c5857604051636e1ed6c560e11b815260040160405180910390fd5b60058054906000611c6883613903565b90915550506005546000908152600660205260409020600154341015611ca157604051630103be3b60e21b815260040160405180910390fd5b8115611cae573460068201555b6005805482556002820180546001600160a01b038681166001600160a01b0319928316179092556001808501805493891693909216831790915560048401805460ff191690911790559054600091825260076020526040909120819055611d1790849034612ae3565b600554611d2690600890612c46565b50826001600160a01b0316846001600160a01b03166005547fe5c2985d22a121f4f7b534ee3a7ab105a620e670bb02f5d1188e20a8670f401e60405160405180910390a450610cb160016000805160206139e583398151915255565b611dbb6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b506000918252600b602090815260408084209284526005928301825292839020835160c08101855281548152600182015492810192909252600281015493820193909352600383015460608201526004830154608082015291015460a082015290565b60008181526006602052604090206002015481906001600160a01b03163314611e5a57604051633387d70760e01b815260040160405180910390fd5b611e6261249a565b600a546000908152600b6020526040902060010154431115611e9757604051633970b5f360e01b815260040160405180910390fd5b6000828152600660205260409020611eae836126aa565b8060060154600003611ef357600281015481546001600160a01b039091166000818152600c60209081526040808320888452600101909152902054611ef39290612961565b50610fb260016000805160206139e583398151915255565b611f366040518060800160405280600081526020016000815260200160008152602001606081525090565b604080516080810182526000848152600b602081815284832080548552600181015482860152600281015495850195909552918690529052906060820190611f8090600301612611565b905292915050565b611f9061261e565b60048190556040518181527f3cd59cf395448ba3bfd2541dcb31ccd800b9e303281df0888a62ae5d5f673f589060200161100a565b611fce82610c3a565b611fd7816124e6565b610c788383612595565b6000611feb61261e565b611ff361249a565b6001600160a01b03841661205a576040516001600160a01b038416908390600081818185875af1925050503d806000811461204a576040519150601f19603f3d011682016040523d82523d6000602084013e61204f565b606091505b505080915050612072565b61206e6001600160a01b0385168484612c52565b5060015b61208960016000805160206139e583398151915255565b9392505050565b6000807f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c00611a99565b6120f96040805160e08101825260008082526020820181905291810182905260608101829052906080820190815260200160008152602001600081525090565b6000828152600660209081526040808320815160e0810183528154815260018201546001600160a01b03908116948201949094526002808301549094169281019290925260038101546060830152600481015491929091608084019160ff9091169081111561216a5761216a61347b565b600281111561217b5761217b61347b565b81526020016005820154815260200160068201548152505090506040518060e001604052808260000151815260200182602001516001600160a01b0316815260200182604001516001600160a01b0316815260200182606001518152602001826080015160028111156121f0576121f061347b565b81526020018260a0015181526020018260c00151815250915050919050565b600a546000908152600b602052604090206001810154821161222f575050565b600a545b8282600101541015612398578061224981613903565b6000818152600b6020526040902060018086015492945090925061226d919061388a565b808255600454600191612280919061388a565b61228a9190613877565b6001820155600354600282015560008054919350839181906122ab90611089565b9050600091505b805182101561235d576122ea8183815181106122d0576122d061389d565b602002602001015184600301612c4690919063ffffffff16565b50600660008284815181106123015761230161389d565b60200260200101518152602001908152602001600020600301548360050160008385815181106123335761233361389d565b602002602001015181526020019081526020016000206004018190555081806001019250506122b2565b6040518481527f0129593a287c7be892e56181ff1238eb466a2c952dc53a3029140d1f3ddc4a8d9060200160405180910390a1505050612233565b600a555050565b6123a761261e565b7f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c0080546001600160a01b0319166001600160a01b03831690811782556123eb611a74565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a35050565b610c38612ca4565b612434612ca4565b610c38612ced565b612444612ca4565b610c38612cf5565b600081831061245b5781612089565b5090919050565b7f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c0080546001600160a01b0319168155610fb282612d16565b6000805160206139e58339815191528054600119016124cc57604051633ee5aeb560e01b815260040160405180910390fd5b60029055565b60016000805160206139e583398151915255565b6118f28133612d87565b60006000805160206139a583398151915261250b8484611aa9565b61258b576000848152602082815260408083206001600160a01b03871684529091529020805460ff191660011790556125413390565b6001600160a01b0316836001600160a01b0316857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a46001915050610a44565b6000915050610a44565b60006000805160206139a58339815191526125b08484611aa9565b1561258b576000848152602082815260408083206001600160a01b0387168085529252808320805460ff1916905551339287917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a46001915050610a44565b6060600061208983612dc0565b33612627611a74565b6001600160a01b031614610c385760405163118cdaa760e01b81523360048201526024016118e0565b612658612e1c565b6000805160206139c5833981519152805460ff191681557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200161100a565b6126b261189f565b60008181526006602052604090206001600482015460ff1660028111156126db576126db61347b565b146126f957604051636e1ed6c560e11b815260040160405180910390fd5b60048101805460ff19166002179055612713600883612e4c565b5060405182907fc3f4c6824ace066416e91f60e8762e0257019e0eb2e83afa4cdf62d23991e73990600090a25050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806127ca57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166127be600080516020613985833981519152546001600160a01b031690565b6001600160a01b031614155b15610c385760405163703e46dd60e11b815260040160405180910390fd5b6118f261261e565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561284a575060408051601f3d908101601f191682019092526128479181019061391c565b60015b61287257604051634c9c8ce360e01b81526001600160a01b03831660048201526024016118e0565b60008051602061398583398151915281146128a357604051632a87526960e21b8152600481018290526024016118e0565b610cb18383612e58565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610c385760405163703e46dd60e11b815260040160405180910390fd5b6000610a44825490565b60008181526001830160205260408120541515612089565b612920612c15565b6000805160206139c5833981519152805460ff191660011781557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833612692565b6001600160a01b0383166000908152600c6020526040812080549091839183919061298d908490613877565b90915550506000838152600182016020526040812080548492906129b2908490613877565b90915550506000838152600180830160209081526040808420600a5485529092019052902054821015612a1a576000838152600180830160209081526040808420600a548552909201905281208054849290612a0f908490613877565b90915550612a3c9050565b6000838152600180830160209081526040808420600a54855290920190528120555b60008381526006602052604081206003018054849290612a5d908490613877565b90915550506040516001600160a01b0385169083156108fc029084906000818181858888f19350505050158015612a98573d6000803e3d6000fd5b5082846001600160a01b03167f7fc4727e062e336010f2c282598ef5f14facb3de68cf8195c2f23e1454b2b74e84604051612ad591815260200190565b60405180910390a350505050565b60008281526006602052604090206001600482015460ff166002811115612b0c57612b0c61347b565b14612b2a57604051636e1ed6c560e11b815260040160405180910390fd5b81816003016000828254612b3e919061388a565b90915550506001600160a01b0384166000908152600c60205260408120805490918491839190612b6f90849061388a565b9091555050600084815260018201602052604081208054859290612b9490849061388a565b90915550506000848152600180830160209081526040808420600a548552909201905281208054859290612bc990849061388a565b909155505060405183815284906001600160a01b038716907f1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee909060200160405180910390a35050505050565b6000805160206139c58339815191525460ff1615610c385760405163d93c066560e01b815260040160405180910390fd5b60006120898383612eae565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610cb1908490612efd565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff16610c3857604051631afcd79f60e31b815260040160405180910390fd5b6124d2612ca4565b612cfd612ca4565b6000805160206139c5833981519152805460ff19169055565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b612d918282611aa9565b610fb25760405163e2517d3f60e01b81526001600160a01b0382166004820152602481018390526044016118e0565b606081600001805480602002602001604051908101604052809291908181526020018280548015612e1057602002820191906000526020600020905b815481526020019060010190808311612dfc575b50505050509050919050565b6000805160206139c58339815191525460ff16610c3857604051638dfc202b60e01b815260040160405180910390fd5b60006120898383612f60565b612e6182613049565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a2805115612ea657610cb182826130ae565b610fb2613124565b6000818152600183016020526040812054612ef557508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610a44565b506000610a44565b6000612f126001600160a01b03841683613143565b90508051600014158015612f37575080806020019051810190612f359190613935565b155b15610cb157604051635274afe760e01b81526001600160a01b03841660048201526024016118e0565b6000818152600183016020526040812054801561258b576000612f84600183613877565b8554909150600090612f9890600190613877565b9050808214612ffd576000866000018281548110612fb857612fb861389d565b9060005260206000200154905080876000018481548110612fdb57612fdb61389d565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061300e5761300e613952565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610a44565b806001600160a01b03163b60000361307f57604051634c9c8ce360e01b81526001600160a01b03821660048201526024016118e0565b60008051602061398583398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b0316846040516130cb9190613968565b600060405180830381855af49150503d8060008114613106576040519150601f19603f3d011682016040523d82523d6000602084013e61310b565b606091505b509150915061311b858383613151565b95945050505050565b3415610c385760405163b398979f60e01b815260040160405180910390fd5b6060612089838360006131ad565b606082613166576131618261324a565b612089565b815115801561317d57506001600160a01b0384163b155b156131a657604051639996b31560e01b81526001600160a01b03851660048201526024016118e0565b5080612089565b6060814710156131d25760405163cd78605960e01b81523060048201526024016118e0565b600080856001600160a01b031684866040516131ee9190613968565b60006040518083038185875af1925050503d806000811461322b576040519150601f19603f3d011682016040523d82523d6000602084013e613230565b606091505b5091509150613240868383613151565b9695505050505050565b80511561325a5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b60006020828403121561328557600080fd5b81356001600160e01b03198116811461208957600080fd5b6001600160a01b03811681146118f257600080fd5b600080604083850312156132c557600080fd5b82356132d08161329d565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b60405160a0810167ffffffffffffffff81118282101715613317576133176132de565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715613346576133466132de565b604052919050565b600060c0828403121561336057600080fd5b60405160c0810181811067ffffffffffffffff82111715613383576133836132de565b60405282356133918161329d565b808252506020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a08201528091505092915050565b6000602082840312156133e357600080fd5b5035919050565b600080604083850312156133fd57600080fd5b82359150602083013561340f8161329d565b809150509250929050565b6020808252825182820181905260009190848201906040850190845b8181101561345257835183529284019291840191600101613436565b50909695505050505050565b60006020828403121561347057600080fd5b81356120898161329d565b634e487b7160e01b600052602160045260246000fd5b815181526020808301516001600160a01b03908116918301919091526040808401519091169082015260608083015190820152608082015160e0820190600381106134ec57634e487b7160e01b600052602160045260246000fd5b8060808401525060a083015160a083015260c083015160c083015292915050565b6000806040838503121561352057600080fd5b50508035926020909101359150565b6000806040838503121561354257600080fd5b823561354d8161329d565b915060208381013567ffffffffffffffff8082111561356b57600080fd5b818601915086601f83011261357f57600080fd5b813581811115613591576135916132de565b6135a3601f8201601f1916850161331d565b915080825287848285010111156135b957600080fd5b80848401858401376000848284010152508093505050509250929050565b60008060408084860312156135eb57600080fd5b8335925060208085013567ffffffffffffffff8082111561360b57600080fd5b818701915087601f83011261361f57600080fd5b813581811115613631576136316132de565b61363f848260051b0161331d565b818152848101925060a091820284018501918a83111561365e57600080fd5b938501935b828510156136ba5780858c03121561367b5760008081fd5b6136836132f4565b8535815286860135878201528786013588820152606080870135908201526080808701359082015284529384019392850192613663565b508096505050505050509250929050565b80151581146118f257600080fd5b6000806000606084860312156136ee57600080fd5b83356136f98161329d565b925060208401356137098161329d565b91506040840135613719816136cb565b809150509250925092565b60005b8381101561373f578181015183820152602001613727565b50506000910152565b6020815260008251806020840152613767816040850160208701613724565b601f01601f19169190910160400192915050565b6000602080835260a0830184518285015281850151604085015260408501516060850152606085015160808086015281815180845260c0870191508483019350600092505b808310156137e057835182529284019260019290920191908401906137c0565b509695505050505050565b60008060006060848603121561380057600080fd5b833561380b8161329d565b9250602084013561381b8161329d565b929592945050506040919091013590565b60008060006060848603121561384157600080fd5b833561384c8161329d565b95602085013595506040909401359392505050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610a4457610a44613861565b80820180821115610a4457610a44613861565b634e487b7160e01b600052603260045260246000fd5b6000816138c2576138c2613861565b506000190190565b8082028115828204841417610a4457610a44613861565b6000826138fe57634e487b7160e01b600052601260045260246000fd5b500490565b60006001820161391557613915613861565b5060010190565b60006020828403121561392e57600080fd5b5051919050565b60006020828403121561394757600080fd5b8151612089816136cb565b634e487b7160e01b600052603160045260246000fd5b6000825161397a818460208701613724565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800cd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f033009b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00a2646970667358221220b986e42604f442824d0ea39f58bbd15beb985e4ddd852e784dd3d1e43f95998f64736f6c63430008180033",
  "deployedBytecode": "0x6080604052600436106102ff5760003560e01c806379ba509711610190578063b3a7b9da116100dc578063d547741f11610095578063e7a622761161006f578063e7a6227614610922578063ea83e47b146109b3578063eaeb2ec8146109d3578063f2fde38b146109f357600080fd5b8063d547741f146108cd578063d9caed12146108ed578063e30c39781461090d57600080fd5b8063b3a7b9da146107b1578063b4fcea1d1461081d578063c06020b01461083d578063c6b61e4c1461086a578063ca4ab3a214610897578063d4e01872146108ad57600080fd5b806391d1485411610149578063a4e9196a11610123578063a4e9196a1461072d578063a694fc3a1461074d578063aca456be14610760578063ad3cb1cc1461077357600080fd5b806391d14854146106d85780639e2c8a5b146106f8578063a217fddf1461071857600080fd5b806379ba5097146106155780638456cb591461062a57806386bb8f371461063f5780638da5cb5b1461065f5780639168ae721461068c578063916e1c57146106c257600080fd5b80634f1ef2861161024f5780635c975abb11610208578063715018a6116101e2578063715018a6146105ab57806373824a0e146105c0578063765bdea0146105e057806376bc98691461060057600080fd5b80635c975abb1461055057806368ed41ed146105755780636b289f5b1461058b57600080fd5b80634f1ef286146104c857806351c144a4146104db578063526fda59146104f157806352d1902d1461051157806354fd4d5014610526578063572d356e1461053a57600080fd5b80632523ca7f116102bc5780633f2f924f116102965780633f2f924f146104445780633f4ba83a14610466578063439b37561461047b57806349175e76146104a857600080fd5b80632523ca7f146103ee5780632f2ff15d1461040457806336568abe1461042457600080fd5b806301ffc9a71461030457806307813e061461033957806308a3002b1461038e578063132c58e9146103b05780631430091c146103c6578063248a9ca3146103ce575b600080fd5b34801561031057600080fd5b5061032461031f366004613273565b610a13565b60405190151581526020015b60405180910390f35b34801561034557600080fd5b506103806103543660046132b2565b6001600160a01b03919091166000908152600c6020908152604080832093835260019093019052205490565b604051908152602001610330565b34801561039a57600080fd5b506103ae6103a936600461334e565b610a4a565b005b3480156103bc57600080fd5b5061038060035481565b6103ae610c05565b3480156103da57600080fd5b506103806103e93660046133d1565b610c3a565b3480156103fa57600080fd5b5061038060005481565b34801561041057600080fd5b506103ae61041f3660046133ea565b610c5c565b34801561043057600080fd5b506103ae61043f3660046133ea565b610c7e565b34801561045057600080fd5b50610459610cb6565b604051610330919061341a565b34801561047257600080fd5b506103ae610cc7565b34801561048757600080fd5b5061049b61049636600461345e565b610cd7565b6040516103309190613491565b3480156104b457600080fd5b506103ae6104c336600461350d565b610d39565b6103ae6104d636600461352f565b610fb6565b3480156104e757600080fd5b5061038060015481565b3480156104fd57600080fd5b506103ae61050c3660046133d1565b610fd1565b34801561051d57600080fd5b50610380611015565b34801561053257600080fd5b506001610380565b34801561054657600080fd5b5061038060045481565b34801561055c57600080fd5b506000805160206139c58339815191525460ff16610324565b34801561058157600080fd5b5061038060055481565b34801561059757600080fd5b506103ae6105a63660046133d1565b611032565b3480156105b757600080fd5b506103ae611077565b3480156105cc57600080fd5b506104596105db3660046133d1565b611089565b3480156105ec57600080fd5b506103ae6105fb3660046135d7565b6114a4565b34801561060c57600080fd5b506103ae61189f565b34801561062157600080fd5b506103ae6118a8565b34801561063657600080fd5b506103ae6118f5565b34801561064b57600080fd5b506103ae61065a36600461350d565b611905565b34801561066b57600080fd5b50610674611a74565b6040516001600160a01b039091168152602001610330565b34801561069857600080fd5b506103806106a736600461345e565b6001600160a01b03166000908152600c602052604090205490565b3480156106ce57600080fd5b50610380600a5481565b3480156106e457600080fd5b506103246106f33660046133ea565b611aa9565b34801561070457600080fd5b506103ae61071336600461350d565b611ae1565b34801561072457600080fd5b50610380600081565b34801561073957600080fd5b506103ae6107483660046133d1565b611b5f565b6103ae61075b3660046133d1565b611b9c565b6103ae61076e3660046136d9565b611bdc565b34801561077f57600080fd5b506107a4604051806040016040528060058152602001640352e302e360dc1b81525081565b6040516103309190613748565b3480156107bd57600080fd5b506107d16107cc36600461350d565b611d82565b6040516103309190600060c082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015292915050565b34801561082957600080fd5b506103ae6108383660046133d1565b611e1e565b34801561084957600080fd5b5061038061085836600461345e565b60076020526000908152604090205481565b34801561087657600080fd5b5061088a6108853660046133d1565b611f0b565b604051610330919061377b565b3480156108a357600080fd5b5061038060025481565b3480156108b957600080fd5b506103ae6108c83660046133d1565b611f88565b3480156108d957600080fd5b506103ae6108e83660046133ea565b611fc5565b3480156108f957600080fd5b506103246109083660046137eb565b611fe1565b34801561091957600080fd5b50610674612090565b34801561092e57600080fd5b5061099861093d36600461382c565b604080518082018252600080825260209182018190526001600160a01b03959095168552600c815281852093855260019384018152818520928552918301825292839020835180850190945280548452909101549082015290565b60408051825181526020928301519281019290925201610330565b3480156109bf57600080fd5b5061049b6109ce3660046133d1565b6120b9565b3480156109df57600080fd5b506103ae6109ee3660046133d1565b61220f565b3480156109ff57600080fd5b506103ae610a0e36600461345e565b61239f565b60006001600160e01b03198216637965db0b60e01b1480610a4457506301ffc9a760e01b6001600160e01b03198316145b92915050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff16600081158015610a905750825b905060008267ffffffffffffffff166001148015610aad5750303b155b905081158015610abb575080155b15610ad95760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff191660011785558315610b0357845460ff60401b1916600160401b1785555b610b0b612424565b610b13612424565b610b1b61242c565b610b2361243c565b610b2b612424565b602080870151600090815560408801516001908155608089015160045560a0890151600355908052600b90915260608701517fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7691610b9391610b8d9190613877565b4361244c565b81556060870151610ba690600190613877565b60018201558651610bb690612462565b508315610bfd57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050565b610c0d61249a565b3460026000828254610c1f919061388a565b909155505060016000805160206139e583398151915255565b565b60009081526000805160206139a5833981519152602052604090206001015490565b610c6582610c3a565b610c6e816124e6565b610c7883836124f0565b50505050565b6001600160a01b0381163314610ca75760405163334bd91960e11b815260040160405180910390fd5b610cb18282612595565b505050565b6060610cc26008612611565b905090565b610ccf61261e565b610c38612650565b610d176040805160e08101825260008082526020820181905291810182905260608101829052906080820190815260200160008152602001600081525090565b6001600160a01b038216600090815260076020526040902054610a44906120b9565b610d4161261e565b610d4961249a565b610d5161189f565b60008281526006602052604090206003810154821115610d8457604051630103be3b60e21b815260040160405180910390fd5b6001600482015460ff166002811115610d9f57610d9f61347b565b03610dad57610dad836126aa565b6002600482015460ff166002811115610dc857610dc861347b565b14610de657604051636e1ed6c560e11b815260040160405180910390fd5b6000828260030154610df89190613877565b60028301546001600160a01b03166000908152600c602090815260408083208884526001810190925282205460038601805494955091939092839291610e3f908490613877565b9091555050815481908390600090610e58908490613877565b90915550508354600090815260018084016020908152604080842084905587548452808420600a54855290920190528120558215610ed257610e98611a74565b6001600160a01b03166108fc849081150290604051600060405180830381858888f19350505050158015610ed0573d6000803e3d6000fd5b505b8415610f165760028401546040516001600160a01b039091169086156108fc029087906000818181858888f19350505050158015610f14573d6000803e3d6000fd5b505b835460028501546040518781526001600160a01b03909116907f7fc4727e062e336010f2c282598ef5f14facb3de68cf8195c2f23e1454b2b74e9060200160405180910390a3604080518681526020810185905287917f682386a255f3de85d6d6f2b2dfd88a7cd2e198e99702f6d590d199d5353a1017910160405180910390a250505050610fb260016000805160206139e583398151915255565b5050565b610fbe612743565b610fc7826127e8565b610fb282826127f0565b610fd961261e565b60008190556040518181527fad333ea03ce4e657f8ef5f2f2480d4165184eb4c94bc6011e3bab314bf7791b7906020015b60405180910390a150565b600061101f6128ad565b5060008051602061398583398151915290565b61103a61261e565b61104261189f565b60038190556040518181527f2fe8cb48ce95af273ee232223c3a0fbda25a65208753e99801ce508751f2b7fb9060200161100a565b61107f61261e565b610c386000612462565b606060006110976008612611565b80519091506110a6848261244c565b935060008467ffffffffffffffff8111156110c3576110c36132de565b6040519080825280602002602001820160405280156110ec578160200160208202803683370190505b509050846000036110ff57949350505050565b600080846000815181106111155761111561389d565b6020026020010151836000815181106111305761113061389d565b602002602001018181525050600080600193505b888410156112b957839250600660008886815181106111655761116561389d565b602002602001015181526020019081526020016000209150600660008660018661118f9190613877565b8151811061119f5761119f61389d565b6020026020010151815260200190815260200160002090505b8160030154816003015410806111e15750816003015481600301541480156111e1575081548154115b1561127757846111f2600185613877565b815181106112025761120261389d565b602002602001015185848151811061121c5761121c61389d565b602090810291909101015282611231816138b3565b935050821561127757600660008661124a600187613877565b8151811061125a5761125a61389d565b6020026020010151815260200190815260200160002090506111b8565b8684815181106112895761128961389d565b60200260200101518584815181106112a3576112a361389d565b6020908102919091010152600190930192611144565b8893505b85841015611497576112d060018a613877565b9250600660008886815181106112e8576112e861389d565b602002602001015181526020019081526020016000209150600660008685815181106113165761131661389d565b602002602001015181526020019081526020016000209050816003015481600301541180611357575081600301548160030154148015611357575081548154105b61148c57600660008661136b600187613877565b8151811061137b5761137b61389d565b6020026020010151815260200190815260200160002090505b8160030154816003015410806113bd5750816003015481600301541480156113bd575081548154115b1561145357846113ce600185613877565b815181106113de576113de61389d565b60200260200101518584815181106113f8576113f861389d565b60209081029190910101528261140d816138b3565b9350508215611453576006600086611426600187613877565b815181106114365761143661389d565b602002602001015181526020019081526020016000209050611394565b8684815181106114655761146561389d565b602002602001015185848151811061147f5761147f61389d565b6020026020010181815250505b6001909301926112bd565b5092979650505050505050565b6114ac61261e565b6000828152600b60205260408120600301906114c7826128f6565b9050825181146114ea5760405163c21fe6bf60e01b815260040160405180910390fd5b6000848152600b6020526040812081805b848410156116f95782600501600088868151811061151b5761151b61389d565b6020026020010151600001518152602001908152602001600020915061156787858151811061154c5761154c61389d565b6020026020010151600001518761290090919063ffffffff16565b611584576040516309ffae9760e01b815260040160405180910390fd5b8684815181106115965761159661389d565b60200260200101516020015182600001819055508684815181106115bc576115bc61389d565b60200260200101516040015182600101819055508684815181106115e2576115e261389d565b60200260200101516060015182600201819055508684815181106116085761160861389d565b602002602001015160800151826003018190555086848151811061162e5761162e61389d565b602002602001015160800151601461164691906138ca565b8785815181106116585761165861389d565b602002602001015160600151603261167091906138ca565b8886815181106116825761168261389d565b602002602001015160400151600f61169a91906138ca565b8987815181106116ac576116ac61389d565b602002602001015160200151600f6116c491906138ca565b6116ce919061388a565b6116d8919061388a565b6116e2919061388a565b6116ec908261388a565b60019094019390506114fb565b8060000361170b575050505050505050565b600093505b84841015611862578260050160008886815181106117305761173061389d565b60200260200101516000015181526020019081526020016000209150600082600501541115611772576040516342b9c64560e11b815260040160405180910390fd5b80836002015488868151811061178a5761178a61389d565b60200260200101516080015160146117a291906138ca565b8987815181106117b4576117b461389d565b60200260200101516060015160326117cc91906138ca565b8a88815181106117de576117de61389d565b602002602001015160400151600f6117f691906138ca565b8b89815181106118085761180861389d565b602002602001015160200151600f61182091906138ca565b61182a919061388a565b611834919061388a565b61183e919061388a565b61184891906138ca565b61185291906138e1565b6005830155600190930192611710565b6040518881527f063c789bc6ffc3acfffa8901b15f268313f725599065c914f9607f7494c9fb919060200160405180910390a15050505050505050565b610c384361220f565b33806118b2612090565b6001600160a01b0316146118e95760405163118cdaa760e01b81526001600160a01b03821660048201526024015b60405180910390fd5b6118f281612462565b50565b6118fd61261e565b610c38612918565b61190d61249a565b6000828152600b60209081526040808320848452600590810183528184200154338452600c83528184208585526001908101845282852087865290810190935290832080548354929491926119629190613877565b9050801580611975575060008260010154115b8061197e575083155b1561199c576040516312d37ee560e31b815260040160405180910390fd5b6000868152600b602090815260408083208884526005810190925282206004810154919290916119cc88866138ca565b6119d691906138e1565b60018601819055604051909150339082156108fc029083906000818181858888f19350505050158015611a0d573d6000803e3d6000fd5b5060408051338152602081018b9052908101899052606081018290527f906ba14012f5d73ff502fc20c2a6341bed45709bd352aaee5bccd4ab73ad48ee9060800160405180910390a150505050505050610fb260016000805160206139e583398151915255565b6000807f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c1993005b546001600160a01b031692915050565b60009182526000805160206139a5833981519152602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600a546000908152600b6020526040902060010154431115611b1657604051633970b5f360e01b815260040160405180910390fd5b336000908152600c60209081526040808320858452600101909152902054811115611b54576040516314fea1a960e11b815260040160405180910390fd5b610fb2338383612961565b611b6761261e565b60018190556040518181527fe9a6d1b35cdb834e1d3cfe94b7199407fc9dbb6d64ba6c59b30295425d86d4c19060200161100a565b600a546000908152600b6020526040902060010154431115611bd157604051633970b5f360e01b815260040160405180910390fd5b6118f2338234612ae3565b611be4612c15565b611bec61249a565b600a546000908152600b6020526040902060010154431115611c2157604051633970b5f360e01b815260040160405180910390fd5b6001600160a01b03831660009081526007602052604090205415611c5857604051636e1ed6c560e11b815260040160405180910390fd5b60058054906000611c6883613903565b90915550506005546000908152600660205260409020600154341015611ca157604051630103be3b60e21b815260040160405180910390fd5b8115611cae573460068201555b6005805482556002820180546001600160a01b038681166001600160a01b0319928316179092556001808501805493891693909216831790915560048401805460ff191690911790559054600091825260076020526040909120819055611d1790849034612ae3565b600554611d2690600890612c46565b50826001600160a01b0316846001600160a01b03166005547fe5c2985d22a121f4f7b534ee3a7ab105a620e670bb02f5d1188e20a8670f401e60405160405180910390a450610cb160016000805160206139e583398151915255565b611dbb6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b506000918252600b602090815260408084209284526005928301825292839020835160c08101855281548152600182015492810192909252600281015493820193909352600383015460608201526004830154608082015291015460a082015290565b60008181526006602052604090206002015481906001600160a01b03163314611e5a57604051633387d70760e01b815260040160405180910390fd5b611e6261249a565b600a546000908152600b6020526040902060010154431115611e9757604051633970b5f360e01b815260040160405180910390fd5b6000828152600660205260409020611eae836126aa565b8060060154600003611ef357600281015481546001600160a01b039091166000818152600c60209081526040808320888452600101909152902054611ef39290612961565b50610fb260016000805160206139e583398151915255565b611f366040518060800160405280600081526020016000815260200160008152602001606081525090565b604080516080810182526000848152600b602081815284832080548552600181015482860152600281015495850195909552918690529052906060820190611f8090600301612611565b905292915050565b611f9061261e565b60048190556040518181527f3cd59cf395448ba3bfd2541dcb31ccd800b9e303281df0888a62ae5d5f673f589060200161100a565b611fce82610c3a565b611fd7816124e6565b610c788383612595565b6000611feb61261e565b611ff361249a565b6001600160a01b03841661205a576040516001600160a01b038416908390600081818185875af1925050503d806000811461204a576040519150601f19603f3d011682016040523d82523d6000602084013e61204f565b606091505b505080915050612072565b61206e6001600160a01b0385168484612c52565b5060015b61208960016000805160206139e583398151915255565b9392505050565b6000807f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c00611a99565b6120f96040805160e08101825260008082526020820181905291810182905260608101829052906080820190815260200160008152602001600081525090565b6000828152600660209081526040808320815160e0810183528154815260018201546001600160a01b03908116948201949094526002808301549094169281019290925260038101546060830152600481015491929091608084019160ff9091169081111561216a5761216a61347b565b600281111561217b5761217b61347b565b81526020016005820154815260200160068201548152505090506040518060e001604052808260000151815260200182602001516001600160a01b0316815260200182604001516001600160a01b0316815260200182606001518152602001826080015160028111156121f0576121f061347b565b81526020018260a0015181526020018260c00151815250915050919050565b600a546000908152600b602052604090206001810154821161222f575050565b600a545b8282600101541015612398578061224981613903565b6000818152600b6020526040902060018086015492945090925061226d919061388a565b808255600454600191612280919061388a565b61228a9190613877565b6001820155600354600282015560008054919350839181906122ab90611089565b9050600091505b805182101561235d576122ea8183815181106122d0576122d061389d565b602002602001015184600301612c4690919063ffffffff16565b50600660008284815181106123015761230161389d565b60200260200101518152602001908152602001600020600301548360050160008385815181106123335761233361389d565b602002602001015181526020019081526020016000206004018190555081806001019250506122b2565b6040518481527f0129593a287c7be892e56181ff1238eb466a2c952dc53a3029140d1f3ddc4a8d9060200160405180910390a1505050612233565b600a555050565b6123a761261e565b7f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c0080546001600160a01b0319166001600160a01b03831690811782556123eb611a74565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a35050565b610c38612ca4565b612434612ca4565b610c38612ced565b612444612ca4565b610c38612cf5565b600081831061245b5781612089565b5090919050565b7f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c0080546001600160a01b0319168155610fb282612d16565b6000805160206139e58339815191528054600119016124cc57604051633ee5aeb560e01b815260040160405180910390fd5b60029055565b60016000805160206139e583398151915255565b6118f28133612d87565b60006000805160206139a583398151915261250b8484611aa9565b61258b576000848152602082815260408083206001600160a01b03871684529091529020805460ff191660011790556125413390565b6001600160a01b0316836001600160a01b0316857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a46001915050610a44565b6000915050610a44565b60006000805160206139a58339815191526125b08484611aa9565b1561258b576000848152602082815260408083206001600160a01b0387168085529252808320805460ff1916905551339287917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a46001915050610a44565b6060600061208983612dc0565b33612627611a74565b6001600160a01b031614610c385760405163118cdaa760e01b81523360048201526024016118e0565b612658612e1c565b6000805160206139c5833981519152805460ff191681557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200161100a565b6126b261189f565b60008181526006602052604090206001600482015460ff1660028111156126db576126db61347b565b146126f957604051636e1ed6c560e11b815260040160405180910390fd5b60048101805460ff19166002179055612713600883612e4c565b5060405182907fc3f4c6824ace066416e91f60e8762e0257019e0eb2e83afa4cdf62d23991e73990600090a25050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806127ca57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166127be600080516020613985833981519152546001600160a01b031690565b6001600160a01b031614155b15610c385760405163703e46dd60e11b815260040160405180910390fd5b6118f261261e565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561284a575060408051601f3d908101601f191682019092526128479181019061391c565b60015b61287257604051634c9c8ce360e01b81526001600160a01b03831660048201526024016118e0565b60008051602061398583398151915281146128a357604051632a87526960e21b8152600481018290526024016118e0565b610cb18383612e58565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610c385760405163703e46dd60e11b815260040160405180910390fd5b6000610a44825490565b60008181526001830160205260408120541515612089565b612920612c15565b6000805160206139c5833981519152805460ff191660011781557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833612692565b6001600160a01b0383166000908152600c6020526040812080549091839183919061298d908490613877565b90915550506000838152600182016020526040812080548492906129b2908490613877565b90915550506000838152600180830160209081526040808420600a5485529092019052902054821015612a1a576000838152600180830160209081526040808420600a548552909201905281208054849290612a0f908490613877565b90915550612a3c9050565b6000838152600180830160209081526040808420600a54855290920190528120555b60008381526006602052604081206003018054849290612a5d908490613877565b90915550506040516001600160a01b0385169083156108fc029084906000818181858888f19350505050158015612a98573d6000803e3d6000fd5b5082846001600160a01b03167f7fc4727e062e336010f2c282598ef5f14facb3de68cf8195c2f23e1454b2b74e84604051612ad591815260200190565b60405180910390a350505050565b60008281526006602052604090206001600482015460ff166002811115612b0c57612b0c61347b565b14612b2a57604051636e1ed6c560e11b815260040160405180910390fd5b81816003016000828254612b3e919061388a565b90915550506001600160a01b0384166000908152600c60205260408120805490918491839190612b6f90849061388a565b9091555050600084815260018201602052604081208054859290612b9490849061388a565b90915550506000848152600180830160209081526040808420600a548552909201905281208054859290612bc990849061388a565b909155505060405183815284906001600160a01b038716907f1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee909060200160405180910390a35050505050565b6000805160206139c58339815191525460ff1615610c385760405163d93c066560e01b815260040160405180910390fd5b60006120898383612eae565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610cb1908490612efd565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff16610c3857604051631afcd79f60e31b815260040160405180910390fd5b6124d2612ca4565b612cfd612ca4565b6000805160206139c5833981519152805460ff19169055565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b612d918282611aa9565b610fb25760405163e2517d3f60e01b81526001600160a01b0382166004820152602481018390526044016118e0565b606081600001805480602002602001604051908101604052809291908181526020018280548015612e1057602002820191906000526020600020905b815481526020019060010190808311612dfc575b50505050509050919050565b6000805160206139c58339815191525460ff16610c3857604051638dfc202b60e01b815260040160405180910390fd5b60006120898383612f60565b612e6182613049565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a2805115612ea657610cb182826130ae565b610fb2613124565b6000818152600183016020526040812054612ef557508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610a44565b506000610a44565b6000612f126001600160a01b03841683613143565b90508051600014158015612f37575080806020019051810190612f359190613935565b155b15610cb157604051635274afe760e01b81526001600160a01b03841660048201526024016118e0565b6000818152600183016020526040812054801561258b576000612f84600183613877565b8554909150600090612f9890600190613877565b9050808214612ffd576000866000018281548110612fb857612fb861389d565b9060005260206000200154905080876000018481548110612fdb57612fdb61389d565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061300e5761300e613952565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610a44565b806001600160a01b03163b60000361307f57604051634c9c8ce360e01b81526001600160a01b03821660048201526024016118e0565b60008051602061398583398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b0316846040516130cb9190613968565b600060405180830381855af49150503d8060008114613106576040519150601f19603f3d011682016040523d82523d6000602084013e61310b565b606091505b509150915061311b858383613151565b95945050505050565b3415610c385760405163b398979f60e01b815260040160405180910390fd5b6060612089838360006131ad565b606082613166576131618261324a565b612089565b815115801561317d57506001600160a01b0384163b155b156131a657604051639996b31560e01b81526001600160a01b03851660048201526024016118e0565b5080612089565b6060814710156131d25760405163cd78605960e01b81523060048201526024016118e0565b600080856001600160a01b031684866040516131ee9190613968565b60006040518083038185875af1925050503d806000811461322b576040519150601f19603f3d011682016040523d82523d6000602084013e613230565b606091505b5091509150613240868383613151565b9695505050505050565b80511561325a5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b60006020828403121561328557600080fd5b81356001600160e01b03198116811461208957600080fd5b6001600160a01b03811681146118f257600080fd5b600080604083850312156132c557600080fd5b82356132d08161329d565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b60405160a0810167ffffffffffffffff81118282101715613317576133176132de565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715613346576133466132de565b604052919050565b600060c0828403121561336057600080fd5b60405160c0810181811067ffffffffffffffff82111715613383576133836132de565b60405282356133918161329d565b808252506020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a08201528091505092915050565b6000602082840312156133e357600080fd5b5035919050565b600080604083850312156133fd57600080fd5b82359150602083013561340f8161329d565b809150509250929050565b6020808252825182820181905260009190848201906040850190845b8181101561345257835183529284019291840191600101613436565b50909695505050505050565b60006020828403121561347057600080fd5b81356120898161329d565b634e487b7160e01b600052602160045260246000fd5b815181526020808301516001600160a01b03908116918301919091526040808401519091169082015260608083015190820152608082015160e0820190600381106134ec57634e487b7160e01b600052602160045260246000fd5b8060808401525060a083015160a083015260c083015160c083015292915050565b6000806040838503121561352057600080fd5b50508035926020909101359150565b6000806040838503121561354257600080fd5b823561354d8161329d565b915060208381013567ffffffffffffffff8082111561356b57600080fd5b818601915086601f83011261357f57600080fd5b813581811115613591576135916132de565b6135a3601f8201601f1916850161331d565b915080825287848285010111156135b957600080fd5b80848401858401376000848284010152508093505050509250929050565b60008060408084860312156135eb57600080fd5b8335925060208085013567ffffffffffffffff8082111561360b57600080fd5b818701915087601f83011261361f57600080fd5b813581811115613631576136316132de565b61363f848260051b0161331d565b818152848101925060a091820284018501918a83111561365e57600080fd5b938501935b828510156136ba5780858c03121561367b5760008081fd5b6136836132f4565b8535815286860135878201528786013588820152606080870135908201526080808701359082015284529384019392850192613663565b508096505050505050509250929050565b80151581146118f257600080fd5b6000806000606084860312156136ee57600080fd5b83356136f98161329d565b925060208401356137098161329d565b91506040840135613719816136cb565b809150509250925092565b60005b8381101561373f578181015183820152602001613727565b50506000910152565b6020815260008251806020840152613767816040850160208701613724565b601f01601f19169190910160400192915050565b6000602080835260a0830184518285015281850151604085015260408501516060850152606085015160808086015281815180845260c0870191508483019350600092505b808310156137e057835182529284019260019290920191908401906137c0565b509695505050505050565b60008060006060848603121561380057600080fd5b833561380b8161329d565b9250602084013561381b8161329d565b929592945050506040919091013590565b60008060006060848603121561384157600080fd5b833561384c8161329d565b95602085013595506040909401359392505050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610a4457610a44613861565b80820180821115610a4457610a44613861565b634e487b7160e01b600052603260045260246000fd5b6000816138c2576138c2613861565b506000190190565b8082028115828204841417610a4457610a44613861565b6000826138fe57634e487b7160e01b600052601260045260246000fd5b500490565b60006001820161391557613915613861565b5060010190565b60006020828403121561392e57600080fd5b5051919050565b60006020828403121561394757600080fd5b8151612089816136cb565b634e487b7160e01b600052603160045260246000fd5b6000825161397a818460208701613724565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800cd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f033009b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00a2646970667358221220b986e42604f442824d0ea39f58bbd15beb985e4ddd852e784dd3d1e43f95998f64736f6c63430008180033",
  "devdoc": {
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "ERC1967InvalidImplementation(address)": [
        {
          "details": "The `implementation` of the proxy is invalid."
        }
      ],
      "ERC1967NonPayable()": [
        {
          "details": "An upgrade function sees `msg.value > 0` that may be lost."
        }
      ],
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ],
      "UUPSUnauthorizedCallContext()": [
        {
          "details": "The call is from an unauthorized context."
        }
      ],
      "UUPSUnsupportedProxiableUUID(bytes32)": [
        {
          "details": "The storage `slot` is unsupported as a UUID."
        }
      ]
    },
    "events": {
      "DlpDeregistered(uint256)": {
        "params": {
          "dlpId": "id of the dlp"
        }
      },
      "DlpDeregisteredByOwner(uint256,uint256,uint256)": {
        "params": {
          "dlpId": "id of the dlp",
          "penaltyAmount": "penalty amount",
          "unstakedAmount": "amount unstaked"
        }
      },
      "DlpRegistered(uint256,address,address)": {
        "params": {
          "dlpAddress": "address of the dlp",
          "dlpId": "id of the dlp",
          "ownerAddress": "owner of the dlp"
        }
      },
      "EpochCreated(uint256)": {
        "params": {
          "epochId": "reward epoch id"
        }
      },
      "EpochPerformancesSaved(uint256)": {
        "params": {
          "epochId": "epoch id"
        }
      },
      "EpochRewardAmountUpdated(uint256)": {
        "params": {
          "newEpochRewardAmount": "new epoch reward amount"
        }
      },
      "EpochRewardClaimed(address,uint256,uint256,uint256)": {
        "params": {
          "claimAmount": "amount claimed",
          "dlpId": "id of the dlp",
          "epochId": "epoch id",
          "staker": "address of the staker"
        }
      },
      "EpochSizeUpdated(uint256)": {
        "params": {
          "newEpochSize": "new epoch size"
        }
      },
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "MaxNumberOfDlpsUpdated(uint256)": {
        "params": {
          "newMaxNumberOfDlps": "new max number of dlps"
        }
      },
      "MinDlpStakeAmountUpdated(uint256)": {
        "params": {
          "newMinDlpStakeAmount": "new minDlpStakeAmount"
        }
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "ScoresUpdated(uint256[],uint256[])": {
        "params": {
          "dlpIds": "dlp ids",
          "scores": "dlp scores"
        }
      },
      "Staked(address,uint256,uint256)": {
        "params": {
          "amount": "amount staked",
          "dlpId": "id of the dlp",
          "staker": "address of the staker"
        }
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      },
      "Unstaked(address,uint256,uint256)": {
        "params": {
          "amount": "amount unstaked",
          "dlpId": "id of the dlp",
          "staker": "address of the staker"
        }
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "claimReward(uint256,uint256)": {
        "params": {
          "dlpId": "dlp id",
          "epochNumber": "epoch number"
        }
      },
      "deregisterDlp(uint256)": {
        "params": {
          "dlpId": "dlp id"
        }
      },
      "deregisterDlpByOwner(uint256,uint256)": {
        "params": {
          "dlpId": "dlp id",
          "unstakeAmount": "amount to sent to dlp owner"
        }
      },
      "dlps(uint256)": {
        "params": {
          "dlpId": "id of the dlp"
        }
      },
      "dlpsByAddress(address)": {
        "params": {
          "dlpAddress": "address of the dlp"
        }
      },
      "epochDlps(uint256,uint256)": {
        "params": {
          "dlpId": "id of the dlp",
          "epochId": "epoch id"
        }
      },
      "epochs(uint256)": {
        "params": {
          "epochId": "epoch id"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize((address,uint256,uint256,uint256,uint256,uint256))": {
        "params": {
          "params": "initialization parameters"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "Pauses the contract"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "registerDlp(address,address,bool)": {
        "params": {
          "dlpAddress": "address of the dlp",
          "dlpOwnerAddress": "owner of the dlp",
          "granted": "if the dlp is granted"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "saveEpochPerformances(uint256,(uint256,uint256,uint256,uint256,uint256)[])": {
        "params": {
          "dlpPerformances": "An array of DLPPerformance structs containing the performance metrics of the DLPs",
          "epochId": "The ID of the epoch"
        }
      },
      "stakerDlpEpochs(address,uint256,uint256)": {
        "params": {
          "dlpId": "id of the dlp",
          "epochId": "epoch id",
          "staker": "address of the staker"
        }
      },
      "stakerDlps(address,uint256)": {
        "params": {
          "dlpId": "id of the dlp",
          "staker": "address of the staker"
        }
      },
      "stakers(address)": {
        "params": {
          "staker": "address of the staker"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      },
      "unpause()": {
        "details": "Unpauses the contract"
      },
      "updateEpochRewardAmount(uint256)": {
        "params": {
          "newEpochRewardAmount": "new epoch size"
        }
      },
      "updateEpochSize(uint256)": {
        "params": {
          "newEpochSize": "new epoch size"
        }
      },
      "updateMaxNumberOfDlps(uint256)": {
        "params": {
          "newMaxNumberOfDlps": "new maximum number of dlps"
        }
      },
      "updateMinDlpStakeAmount(uint256)": {
        "params": {
          "newMinDlpStakeAmount": "new minDlpStakeAmount"
        }
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "withdraw(address,address,uint256)": {
        "params": {
          "_amount": "amount to withdraw",
          "_to": "address where the token will be send",
          "_token": "address of the token to withdraw use address(0) for VANA"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "DlpDeregistered(uint256)": {
        "notice": "Triggered when a dlp has been deregistered"
      },
      "DlpDeregisteredByOwner(uint256,uint256,uint256)": {
        "notice": "Triggered when a dlp has been deregistered by the dlp owner"
      },
      "DlpRegistered(uint256,address,address)": {
        "notice": "Triggered when a dlp has registered"
      },
      "EpochCreated(uint256)": {
        "notice": "Triggered when a epoch has been created"
      },
      "EpochPerformancesSaved(uint256)": {
        "notice": "Triggered when epoch performances have been saved"
      },
      "EpochRewardAmountUpdated(uint256)": {
        "notice": "Triggered when the epoch reward amount has been updated"
      },
      "EpochRewardClaimed(address,uint256,uint256,uint256)": {
        "notice": "Triggered when a dlp has claimed un unsent reward"
      },
      "EpochSizeUpdated(uint256)": {
        "notice": "Triggered when the epoch size has been updated"
      },
      "MaxNumberOfDlpsUpdated(uint256)": {
        "notice": "Triggered when the max number of dlps has been updated"
      },
      "MinDlpStakeAmountUpdated(uint256)": {
        "notice": "Triggered when the minDlpStakeAmount has been updated"
      },
      "ScoresUpdated(uint256[],uint256[])": {
        "notice": "Triggered when owner has updated its scores"
      },
      "Staked(address,uint256,uint256)": {
        "notice": "Triggered when user has staked some DAT for a DLP"
      },
      "Unstaked(address,uint256,uint256)": {
        "notice": "Triggered when user has unstaked some DAT from a DLP"
      }
    },
    "kind": "user",
    "methods": {
      "addRewardForDlps()": {
        "notice": "Add rewards for dlps"
      },
      "claimReward(uint256,uint256)": {
        "notice": "Staker claim reward for a dlp in an epoch"
      },
      "createEpochs()": {
        "notice": "Create epochs used when the last epoch has ended"
      },
      "createEpochsUntilBlockNumber(uint256)": {
        "notice": "Create epochs used when the last epoch has ended"
      },
      "deregisterDlp(uint256)": {
        "notice": "Deregister dlp"
      },
      "deregisterDlpByOwner(uint256,uint256)": {
        "notice": "Deregister dlp and withdraw stake amount"
      },
      "dlps(uint256)": {
        "notice": "Get the dlp information"
      },
      "dlpsByAddress(address)": {
        "notice": "Get the dlp information"
      },
      "epochDlps(uint256,uint256)": {
        "notice": "Get epoch dlp information"
      },
      "epochs(uint256)": {
        "notice": "Get epoch information"
      },
      "initialize((address,uint256,uint256,uint256,uint256,uint256))": {
        "notice": "Initialize the contract"
      },
      "registerDlp(address,address,bool)": {
        "notice": "Register a dlp"
      },
      "registeredDlps()": {
        "notice": "Get registered dlps list"
      },
      "saveEpochPerformances(uint256,(uint256,uint256,uint256,uint256,uint256)[])": {
        "notice": "Saves the performances of DLPs for a specific epoch"
      },
      "stakerDlpEpochs(address,uint256,uint256)": {
        "notice": "Get the staker epoch dlp"
      },
      "stakerDlps(address,uint256)": {
        "notice": "Get the dlp stakers"
      },
      "stakers(address)": {
        "notice": "Get the staker information"
      },
      "updateEpochRewardAmount(uint256)": {
        "notice": "Update the epochRewardAmount"
      },
      "updateEpochSize(uint256)": {
        "notice": "Update the epoch size"
      },
      "updateMaxNumberOfDlps(uint256)": {
        "notice": "Update the maximum number of dlps"
      },
      "updateMinDlpStakeAmount(uint256)": {
        "notice": "Update the minDlpStakeAmount"
      },
      "version()": {
        "notice": "return the version of the contract"
      },
      "withdraw(address,address,uint256)": {
        "notice": "Allows the owner to withdraw tokens from the contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 17856,
        "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
        "label": "maxNumberOfDlps",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 17859,
        "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
        "label": "minDlpStakeAmount",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 17862,
        "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
        "label": "totalDlpsRewardAmount",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 17865,
        "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
        "label": "epochRewardAmount",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 17868,
        "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
        "label": "epochSize",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 17871,
        "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
        "label": "dlpsCount",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 17876,
        "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
        "label": "_dlps",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(Dlp)17939_storage)"
      },
      {
        "astId": 17881,
        "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
        "label": "dlpIds",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 17884,
        "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
        "label": "_registeredDlps",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(UintSet)10847_storage"
      },
      {
        "astId": 17887,
        "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
        "label": "epochsCount",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 17892,
        "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
        "label": "_epochs",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_struct(Epoch)17923_storage)"
      },
      {
        "astId": 17897,
        "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
        "label": "_stakers",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_struct(Staker)17973_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(DlpStatus)17908": {
        "encoding": "inplace",
        "label": "enum IDataLiquidityPoolsRoot.DlpStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(Staker)17973_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IDataLiquidityPoolsRoot.Staker)",
        "numberOfBytes": "32",
        "value": "t_struct(Staker)17973_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Dlp)17939_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IDataLiquidityPoolsRoot.Dlp)",
        "numberOfBytes": "32",
        "value": "t_struct(Dlp)17939_storage"
      },
      "t_mapping(t_uint256,t_struct(Epoch)17923_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IDataLiquidityPoolsRoot.Epoch)",
        "numberOfBytes": "32",
        "value": "t_struct(Epoch)17923_storage"
      },
      "t_mapping(t_uint256,t_struct(EpochDlp)17952_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IDataLiquidityPoolsRoot.EpochDlp)",
        "numberOfBytes": "32",
        "value": "t_struct(EpochDlp)17952_storage"
      },
      "t_mapping(t_uint256,t_struct(StakerDlp)17965_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IDataLiquidityPoolsRoot.StakerDlp)",
        "numberOfBytes": "32",
        "value": "t_struct(StakerDlp)17965_storage"
      },
      "t_mapping(t_uint256,t_struct(StakerDlpEpoch)17957_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IDataLiquidityPoolsRoot.StakerDlpEpoch)",
        "numberOfBytes": "32",
        "value": "t_struct(StakerDlpEpoch)17957_storage"
      },
      "t_struct(Dlp)17939_storage": {
        "encoding": "inplace",
        "label": "struct IDataLiquidityPoolsRoot.Dlp",
        "members": [
          {
            "astId": 17925,
            "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 17927,
            "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
            "label": "dlpAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 17929,
            "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
            "label": "ownerAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address_payable"
          },
          {
            "astId": 17931,
            "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
            "label": "stakeAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 17934,
            "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
            "label": "status",
            "offset": 0,
            "slot": "4",
            "type": "t_enum(DlpStatus)17908"
          },
          {
            "astId": 17936,
            "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
            "label": "registrationBlockNumber",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 17938,
            "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
            "label": "grantedAmount",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Epoch)17923_storage": {
        "encoding": "inplace",
        "label": "struct IDataLiquidityPoolsRoot.Epoch",
        "members": [
          {
            "astId": 17910,
            "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
            "label": "startBlock",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 17912,
            "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
            "label": "endBlock",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 17914,
            "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
            "label": "reward",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 17917,
            "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
            "label": "dlpIds",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(UintSet)10847_storage"
          },
          {
            "astId": 17922,
            "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
            "label": "dlps",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_uint256,t_struct(EpochDlp)17952_storage)"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(EpochDlp)17952_storage": {
        "encoding": "inplace",
        "label": "struct IDataLiquidityPoolsRoot.EpochDlp",
        "members": [
          {
            "astId": 17941,
            "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
            "label": "ttf",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 17943,
            "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
            "label": "tfc",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 17945,
            "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
            "label": "vdu",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 17947,
            "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
            "label": "uw",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 17949,
            "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
            "label": "stakedAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 17951,
            "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
            "label": "rewardAmount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Set)10375_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 10370,
            "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 10374,
            "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
            "label": "_positions",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Staker)17973_storage": {
        "encoding": "inplace",
        "label": "struct IDataLiquidityPoolsRoot.Staker",
        "members": [
          {
            "astId": 17967,
            "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
            "label": "totalStaked",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 17972,
            "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
            "label": "dlps",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_struct(StakerDlp)17965_storage)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(StakerDlp)17965_storage": {
        "encoding": "inplace",
        "label": "struct IDataLiquidityPoolsRoot.StakerDlp",
        "members": [
          {
            "astId": 17959,
            "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
            "label": "stakedAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 17964,
            "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
            "label": "epochs",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_struct(StakerDlpEpoch)17957_storage)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(StakerDlpEpoch)17957_storage": {
        "encoding": "inplace",
        "label": "struct IDataLiquidityPoolsRoot.StakerDlpEpoch",
        "members": [
          {
            "astId": 17954,
            "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
            "label": "stakedAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 17956,
            "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
            "label": "withdrawnReward",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)10847_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 10846,
            "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)10375_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}