{
  "address": "0x93886A063668CF297B8bAa95D6860F81cBa84dCF",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AlreadyDistributed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ArityMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CheckpointUnorderedInsertion",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CurrentEpochNotCreated",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "ERC1967InvalidImplementation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1967NonPayable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EpochEnded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EpochNotEnded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EpochNotStarted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidDlpList",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidDlpStatus",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPerformancePercentages",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidStakeAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidStakersPercentage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidUnstakeAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotDlpOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NothingToClaim",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PreviousEpochNotFinalised",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "bits",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "SafeCastOverflowedUintDowncast",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TooManyDlps",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UUPSUnauthorizedCallContext",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "slot",
          "type": "bytes32"
        }
      ],
      "name": "UUPSUnsupportedProxiableUUID",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WithdrawNotAllowed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        }
      ],
      "name": "DlpDeregistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unstakeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "penaltyAmount",
          "type": "uint256"
        }
      ],
      "name": "DlpDeregisteredByOwner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "dlpAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        }
      ],
      "name": "DlpRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakersPercentage",
          "type": "uint256"
        }
      ],
      "name": "DlpStakersPercentageUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "epochId",
          "type": "uint256"
        }
      ],
      "name": "EpochCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "epochId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isFinalised",
          "type": "bool"
        }
      ],
      "name": "EpochPerformancesSaved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newEpochRewardAmount",
          "type": "uint256"
        }
      ],
      "name": "EpochRewardAmountUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newEpochSize",
          "type": "uint256"
        }
      ],
      "name": "EpochSizeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxNumberOfDlps",
          "type": "uint256"
        }
      ],
      "name": "MaxNumberOfDlpsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMinDlpStakeAmount",
          "type": "uint256"
        }
      ],
      "name": "MinDlpStakeAmountUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTtfPercentage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTfcPercentage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newVduPercentage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newUwPercentage",
          "type": "uint256"
        }
      ],
      "name": "PerformancePercentagesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "dlpIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "scores",
          "type": "uint256[]"
        }
      ],
      "name": "ScoresUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "epochId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimAmount",
          "type": "uint256"
        }
      ],
      "name": "StakerDlpEpochRewardClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Unstaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "UPGRADE_INTERFACE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addRewardForDlps",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        }
      ],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastEpochToClaim",
          "type": "uint256"
        }
      ],
      "name": "claimRewardUntilEpoch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        }
      ],
      "name": "claimableAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createEpochs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "createEpochsUntilBlockNumber",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        }
      ],
      "name": "deregisterDlp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dlpOwnerAmount",
          "type": "uint256"
        }
      ],
      "name": "distributeStakeAfterDeregistration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "epochId",
          "type": "uint256"
        }
      ],
      "name": "dlpEpochs",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "ttf",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tfc",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "vdu",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "uw",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakeAmount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isTopDlp",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "rewardAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakersPercentage",
              "type": "uint256"
            }
          ],
          "internalType": "struct IDataLiquidityPoolsRoot.DlpEpochInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dlpAddress",
          "type": "address"
        }
      ],
      "name": "dlpIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        }
      ],
      "name": "dlps",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "dlpAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "ownerAddress",
              "type": "address"
            },
            {
              "internalType": "enum IDataLiquidityPoolsRoot.DlpStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "registrationBlockNumber",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "grantedAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakersPercentage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakeAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IDataLiquidityPoolsRoot.DlpResponse",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dlpAddress",
          "type": "address"
        }
      ],
      "name": "dlpsByAddress",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "dlpAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "ownerAddress",
              "type": "address"
            },
            {
              "internalType": "enum IDataLiquidityPoolsRoot.DlpStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "registrationBlockNumber",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "grantedAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakersPercentage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakeAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IDataLiquidityPoolsRoot.DlpResponse",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dlpsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochRewardAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epochId",
          "type": "uint256"
        }
      ],
      "name": "epochs",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "startBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reward",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isFinalised",
              "type": "bool"
            },
            {
              "internalType": "uint256[]",
              "name": "dlpIds",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct IDataLiquidityPoolsRoot.EpochInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "ownerAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "maxNumberOfDlps",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minDlpStakeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "epochSize",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "epochRewardAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ttfPercentage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tfcPercentage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "vduPercentage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "uwPercentage",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataLiquidityPoolsRootImplementation.InitParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxNumberOfDlps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minDlpStakeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dlpAddress",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "dlpOwnerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stakersPercentage",
          "type": "uint256"
        }
      ],
      "name": "registerDlp",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dlpAddress",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "dlpOwnerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stakersPercentage",
          "type": "uint256"
        }
      ],
      "name": "registerDlpWithGrant",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registeredDlps",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epochId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "dlpId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ttf",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tfc",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "vdu",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "uw",
              "type": "uint256"
            }
          ],
          "internalType": "struct IDataLiquidityPoolsRoot.DlpPerformance[]",
          "name": "dlpPerformances",
          "type": "tuple[]"
        },
        {
          "internalType": "bool",
          "name": "isFinalised",
          "type": "bool"
        }
      ],
      "name": "saveEpochPerformances",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "epochId",
          "type": "uint256"
        }
      ],
      "name": "stakerDlpEpochs",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "dlpId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "epochId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IDataLiquidityPoolsRoot.StakerDlpEpochInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        }
      ],
      "name": "stakerDlps",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "dlpId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastClaimedEpochId",
              "type": "uint256"
            }
          ],
          "internalType": "struct IDataLiquidityPoolsRoot.StakerDlpInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakerAddress",
          "type": "address"
        }
      ],
      "name": "stakerDlpsList",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "dlpId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastClaimedEpochId",
              "type": "uint256"
            }
          ],
          "internalType": "struct IDataLiquidityPoolsRoot.StakerDlpInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "stakerDlpsListCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tfcPercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numberOfDlps",
          "type": "uint256"
        }
      ],
      "name": "topDlpIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDlpsRewardAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ttfPercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakersPercentage",
          "type": "uint256"
        }
      ],
      "name": "updateDlpStakersPercentage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newEpochRewardAmount",
          "type": "uint256"
        }
      ],
      "name": "updateEpochRewardAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newEpochSize",
          "type": "uint256"
        }
      ],
      "name": "updateEpochSize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMaxNumberOfDlps",
          "type": "uint256"
        }
      ],
      "name": "updateMaxNumberOfDlps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMinDlpStakeAmount",
          "type": "uint256"
        }
      ],
      "name": "updateMinDlpStakeAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newTtfPercentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newTfcPercentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newVduPercentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newUwPercentage",
          "type": "uint256"
        }
      ],
      "name": "updatePerformancePercentages",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uwPercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vduPercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x58d411865bdb9f0fb8411dfeae886bf073fc7632f3bd1690ca47bc2f066832d8",
  "receipt": {
    "to": null,
    "from": "0x34529235dAF0B317D30F8e3120Ef04Dff59aB411",
    "contractAddress": "0x93886A063668CF297B8bAa95D6860F81cBa84dCF",
    "transactionIndex": 4,
    "gasUsed": "3770580",
    "logsBloom": "0x
    "blockHash": "0x55435e8cd8fd77a6ca81dccc18f2320b0f54ae506e0f1b9ac2d0eebb52f7a1a3",
    "transactionHash": "0x58d411865bdb9f0fb8411dfeae886bf073fc7632f3bd1690ca47bc2f066832d8",
    "logs": [],
    "blockNumber": 1276192,
    "cumulativeGasUsed": "3970065",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "4105d997fa57f5b4a132325184f753c8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyDistributed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ArityMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CheckpointUnorderedInsertion\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CurrentEpochNotCreated\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EpochEnded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EpochNotEnded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EpochNotStarted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDlpList\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDlpStatus\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPerformancePercentages\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStakeAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStakersPercentage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidUnstakeAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotDlpOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NothingToClaim\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PreviousEpochNotFinalised\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bits\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintDowncast\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManyDlps\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"}],\"name\":\"DlpDeregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unstakeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"penaltyAmount\",\"type\":\"uint256\"}],\"name\":\"DlpDeregisteredByOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dlpAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"DlpRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakersPercentage\",\"type\":\"uint256\"}],\"name\":\"DlpStakersPercentageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"}],\"name\":\"EpochCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isFinalised\",\"type\":\"bool\"}],\"name\":\"EpochPerformancesSaved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newEpochRewardAmount\",\"type\":\"uint256\"}],\"name\":\"EpochRewardAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newEpochSize\",\"type\":\"uint256\"}],\"name\":\"EpochSizeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxNumberOfDlps\",\"type\":\"uint256\"}],\"name\":\"MaxNumberOfDlpsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinDlpStakeAmount\",\"type\":\"uint256\"}],\"name\":\"MinDlpStakeAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTtfPercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTfcPercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newVduPercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newUwPercentage\",\"type\":\"uint256\"}],\"name\":\"PerformancePercentagesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"dlpIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"scores\",\"type\":\"uint256[]\"}],\"name\":\"ScoresUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimAmount\",\"type\":\"uint256\"}],\"name\":\"StakerDlpEpochRewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addRewardForDlps\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastEpochToClaim\",\"type\":\"uint256\"}],\"name\":\"claimRewardUntilEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"}],\"name\":\"claimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createEpochs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"createEpochsUntilBlockNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"}],\"name\":\"deregisterDlp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dlpOwnerAmount\",\"type\":\"uint256\"}],\"name\":\"distributeStakeAfterDeregistration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"}],\"name\":\"dlpEpochs\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ttf\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tfc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vdu\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isTopDlp\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakersPercentage\",\"type\":\"uint256\"}],\"internalType\":\"struct IDataLiquidityPoolsRoot.DlpEpochInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dlpAddress\",\"type\":\"address\"}],\"name\":\"dlpIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"}],\"name\":\"dlps\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dlpAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDataLiquidityPoolsRoot.DlpStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"registrationBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"grantedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakersPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IDataLiquidityPoolsRoot.DlpResponse\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dlpAddress\",\"type\":\"address\"}],\"name\":\"dlpsByAddress\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dlpAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDataLiquidityPoolsRoot.DlpStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"registrationBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"grantedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakersPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IDataLiquidityPoolsRoot.DlpResponse\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dlpsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"}],\"name\":\"epochs\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFinalised\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"dlpIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IDataLiquidityPoolsRoot.EpochInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxNumberOfDlps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDlpStakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochRewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ttfPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tfcPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vduPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uwPercentage\",\"type\":\"uint256\"}],\"internalType\":\"struct DataLiquidityPoolsRootImplementation.InitParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxNumberOfDlps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDlpStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dlpAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"dlpOwnerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakersPercentage\",\"type\":\"uint256\"}],\"name\":\"registerDlp\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dlpAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"dlpOwnerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakersPercentage\",\"type\":\"uint256\"}],\"name\":\"registerDlpWithGrant\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registeredDlps\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ttf\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tfc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vdu\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uw\",\"type\":\"uint256\"}],\"internalType\":\"struct IDataLiquidityPoolsRoot.DlpPerformance[]\",\"name\":\"dlpPerformances\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"isFinalised\",\"type\":\"bool\"}],\"name\":\"saveEpochPerformances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"}],\"name\":\"stakerDlpEpochs\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IDataLiquidityPoolsRoot.StakerDlpEpochInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"}],\"name\":\"stakerDlps\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimedEpochId\",\"type\":\"uint256\"}],\"internalType\":\"struct IDataLiquidityPoolsRoot.StakerDlpInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"}],\"name\":\"stakerDlpsList\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimedEpochId\",\"type\":\"uint256\"}],\"internalType\":\"struct IDataLiquidityPoolsRoot.StakerDlpInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"stakerDlpsListCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tfcPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfDlps\",\"type\":\"uint256\"}],\"name\":\"topDlpIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDlpsRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ttfPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakersPercentage\",\"type\":\"uint256\"}],\"name\":\"updateDlpStakersPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newEpochRewardAmount\",\"type\":\"uint256\"}],\"name\":\"updateEpochRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newEpochSize\",\"type\":\"uint256\"}],\"name\":\"updateEpochSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxNumberOfDlps\",\"type\":\"uint256\"}],\"name\":\"updateMaxNumberOfDlps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinDlpStakeAmount\",\"type\":\"uint256\"}],\"name\":\"updateMinDlpStakeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTtfPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newTfcPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newVduPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newUwPercentage\",\"type\":\"uint256\"}],\"name\":\"updatePerformancePercentages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uwPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vduPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"CheckpointUnorderedInsertion()\":[{\"details\":\"A value was attempted to be inserted on a past checkpoint.\"}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeCastOverflowedUintDowncast(uint8,uint256)\":[{\"details\":\"Value doesn't fit in an uint of `bits` size.\"}],\"UUPSUnauthorizedCallContext()\":[{\"details\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"details\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"DlpDeregistered(uint256)\":{\"params\":{\"dlpId\":\"id of the dlp\"}},\"DlpDeregisteredByOwner(uint256,uint256,uint256)\":{\"params\":{\"dlpId\":\"id of the dlp\",\"penaltyAmount\":\"penalty amount\",\"unstakeAmount\":\"amount unstake\"}},\"DlpRegistered(uint256,address,address)\":{\"params\":{\"dlpAddress\":\"address of the dlp\",\"dlpId\":\"id of the dlp\",\"ownerAddress\":\"owner of the dlp\"}},\"DlpStakersPercentageUpdated(uint256,uint256)\":{\"params\":{\"dlpId\":\"id of the dlp\",\"stakersPercentage\":\"new stakers percentage\"}},\"EpochCreated(uint256)\":{\"params\":{\"epochId\":\"reward epoch id\"}},\"EpochPerformancesSaved(uint256,bool)\":{\"params\":{\"epochId\":\"epoch id\",\"isFinalised\":\"true if the performances are final\"}},\"EpochRewardAmountUpdated(uint256)\":{\"params\":{\"newEpochRewardAmount\":\"new epoch reward amount\"}},\"EpochSizeUpdated(uint256)\":{\"params\":{\"newEpochSize\":\"new epoch size\"}},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"MaxNumberOfDlpsUpdated(uint256)\":{\"params\":{\"newMaxNumberOfDlps\":\"new max number of dlps\"}},\"MinDlpStakeAmountUpdated(uint256)\":{\"params\":{\"newMinDlpStakeAmount\":\"new minDlpStakeAmount\"}},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"PerformancePercentagesUpdated(uint256,uint256,uint256,uint256)\":{\"params\":{\"newTfcPercentage\":\"new tfc percentage\",\"newTtfPercentage\":\"new ttf percentage\",\"newUwPercentage\":\"new uw percentage\",\"newVduPercentage\":\"new vdu percentage\"}},\"ScoresUpdated(uint256[],uint256[])\":{\"params\":{\"dlpIds\":\"dlp ids\",\"scores\":\"dlp scores\"}},\"Staked(address,uint256,uint256)\":{\"params\":{\"amount\":\"amount stake\",\"dlpId\":\"id of the dlp\",\"staker\":\"address of the staker\"}},\"StakerDlpEpochRewardClaimed(address,uint256,uint256,uint256)\":{\"params\":{\"claimAmount\":\"amount claimed\",\"dlpId\":\"id of the dlp\",\"epochId\":\"epoch id\",\"staker\":\"address of the staker\"}},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"},\"Unstaked(address,uint256,uint256)\":{\"params\":{\"amount\":\"amount unstake\",\"dlpId\":\"id of the dlp\",\"staker\":\"address of the staker\"}},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"claimReward(uint256)\":{\"params\":{\"dlpId\":\"dlp id\"}},\"claimRewardUntilEpoch(uint256,uint256)\":{\"params\":{\"dlpId\":\"id of the dlp\",\"lastEpochToClaim\":\"epoch id\"}},\"claimableAmount(address,uint256)\":{\"params\":{\"dlpId\":\"id of the dlp\",\"stakerAddress\":\"address of the staker\"}},\"createEpochsUntilBlockNumber(uint256)\":{\"details\":\"useful only when createEpochs cannot be called because there are to many epochs to create\",\"params\":{\"blockNumber\":\"block number\"}},\"deregisterDlp(uint256)\":{\"params\":{\"dlpId\":\"dlp id\"}},\"distributeStakeAfterDeregistration(uint256,uint256)\":{\"params\":{\"dlpId\":\"dlp id\",\"dlpOwnerAmount\":\"amount to distribute to the dlp owner\"}},\"dlpEpochs(uint256,uint256)\":{\"params\":{\"dlpId\":\"id of the dlp\",\"epochId\":\"epoch id\"}},\"dlps(uint256)\":{\"params\":{\"dlpId\":\"id of the dlp\"}},\"dlpsByAddress(address)\":{\"params\":{\"dlpAddress\":\"address of the dlp\"}},\"epochs(uint256)\":{\"params\":{\"epochId\":\"epoch id\"}},\"initialize((address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))\":{\"params\":{\"params\":\"initialization parameters\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"Pauses the contract\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"registerDlp(address,address,uint256)\":{\"params\":{\"dlpAddress\":\"address of the dlp\",\"dlpOwnerAddress\":\"owner of the dlp\",\"stakersPercentage\":\"percentage of the rewards that will be distributed to the stakers\"}},\"registerDlpWithGrant(address,address,uint256)\":{\"params\":{\"dlpAddress\":\"address of the dlp\",\"dlpOwnerAddress\":\"owner of the dlp\",\"stakersPercentage\":\"percentage of the rewards that will be distributed to the stakers\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"saveEpochPerformances(uint256,(uint256,uint256,uint256,uint256,uint256)[],bool)\":{\"params\":{\"dlpPerformances\":\"An array of DLPPerformance structs containing the performance metrics of the DLPs\",\"epochId\":\"The ID of the epoch\"}},\"stake(uint256)\":{\"params\":{\"dlpId\":\"dlp id\"}},\"stakerDlpEpochs(address,uint256,uint256)\":{\"params\":{\"dlpId\":\"id of the dlp\",\"epochId\":\"epoch id\",\"staker\":\"address of the staker\"}},\"stakerDlps(address,uint256)\":{\"params\":{\"dlpId\":\"id of the dlp\",\"stakerAddress\":\"address of the staker\"}},\"stakerDlpsList(address)\":{\"params\":{\"stakerAddress\":\"address of the staker\"}},\"topDlpIds(uint256)\":{\"params\":{\"numberOfDlps\":\"number of dlps\"}},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"Unpauses the contract\"},\"unstake(uint256,uint256)\":{\"params\":{\"amount\":\"amount to unstake\",\"dlpId\":\"dlp id\"}},\"updateDlpStakersPercentage(uint256,uint256)\":{\"params\":{\"dlpId\":\"dlp id\",\"stakersPercentage\":\"new stakers percentage\"}},\"updateEpochRewardAmount(uint256)\":{\"params\":{\"newEpochRewardAmount\":\"new epoch size\"}},\"updateEpochSize(uint256)\":{\"params\":{\"newEpochSize\":\"new epoch size\"}},\"updateMaxNumberOfDlps(uint256)\":{\"params\":{\"newMaxNumberOfDlps\":\"new maximum number of dlps\"}},\"updateMinDlpStakeAmount(uint256)\":{\"params\":{\"newMinDlpStakeAmount\":\"new minDlpStakeAmount\"}},\"updatePerformancePercentages(uint256,uint256,uint256,uint256)\":{\"params\":{\"newTfcPercentage\":\"new tfc percentage\",\"newTtfPercentage\":\"new ttf percentage\",\"newUwPercentage\":\"new uw percentage\",\"newVduPercentage\":\"new vdu percentage\"}},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"events\":{\"DlpDeregistered(uint256)\":{\"notice\":\"Triggered when a dlp has been deregistered\"},\"DlpDeregisteredByOwner(uint256,uint256,uint256)\":{\"notice\":\"Triggered when a dlp has been deregistered by the dlp owner\"},\"DlpRegistered(uint256,address,address)\":{\"notice\":\"Triggered when a dlp has registered\"},\"DlpStakersPercentageUpdated(uint256,uint256)\":{\"notice\":\"Triggered when the dlp stakers percentage has been updated\"},\"EpochCreated(uint256)\":{\"notice\":\"Triggered when a epoch has been created\"},\"EpochPerformancesSaved(uint256,bool)\":{\"notice\":\"Triggered when epoch performances have been saved\"},\"EpochRewardAmountUpdated(uint256)\":{\"notice\":\"Triggered when the epoch reward amount has been updated\"},\"EpochSizeUpdated(uint256)\":{\"notice\":\"Triggered when the epoch size has been updated\"},\"MaxNumberOfDlpsUpdated(uint256)\":{\"notice\":\"Triggered when the max number of dlps has been updated\"},\"MinDlpStakeAmountUpdated(uint256)\":{\"notice\":\"Triggered when the minDlpStakeAmount has been updated\"},\"PerformancePercentagesUpdated(uint256,uint256,uint256,uint256)\":{\"notice\":\"Triggered when the performance percentages has been updated\"},\"ScoresUpdated(uint256[],uint256[])\":{\"notice\":\"Triggered when owner has updated its scores\"},\"Staked(address,uint256,uint256)\":{\"notice\":\"Triggered when user has stake some DAT for a DLP\"},\"StakerDlpEpochRewardClaimed(address,uint256,uint256,uint256)\":{\"notice\":\"Triggered when a staker has claimed a reward for a dlp in an epoch\"},\"Unstaked(address,uint256,uint256)\":{\"notice\":\"Triggered when user has unstake some DAT from a DLP\"}},\"kind\":\"user\",\"methods\":{\"addRewardForDlps()\":{\"notice\":\"Adds rewards for dlps\"},\"claimReward(uint256)\":{\"notice\":\"Claims reward for a dlp until the current epoch\"},\"claimRewardUntilEpoch(uint256,uint256)\":{\"notice\":\"Claims reward for a dlp until a specific epoch\"},\"claimableAmount(address,uint256)\":{\"notice\":\"Gets the claimable amount for a staker for a dlp\"},\"createEpochs()\":{\"notice\":\"Creates epochs until current block number\"},\"createEpochsUntilBlockNumber(uint256)\":{\"notice\":\"Creates epochs until a specific block number\"},\"deregisterDlp(uint256)\":{\"notice\":\"Deregisters dlp\"},\"distributeStakeAfterDeregistration(uint256,uint256)\":{\"notice\":\"Distributes stake after deregistration of a granted DLP\"},\"dlpEpochs(uint256,uint256)\":{\"notice\":\"Gets epoch dlp information\"},\"dlps(uint256)\":{\"notice\":\"Gets the dlp information\"},\"dlpsByAddress(address)\":{\"notice\":\"Gets the dlp information\"},\"epochs(uint256)\":{\"notice\":\"Gets epoch information\"},\"initialize((address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))\":{\"notice\":\"Initialize the contract\"},\"registerDlp(address,address,uint256)\":{\"notice\":\"Registers a dlp\"},\"registerDlpWithGrant(address,address,uint256)\":{\"notice\":\"Registers a dlp with grant\"},\"registeredDlps()\":{\"notice\":\"Gets registered dlps list\"},\"saveEpochPerformances(uint256,(uint256,uint256,uint256,uint256,uint256)[],bool)\":{\"notice\":\"Saves the performances of top DLPs for a specific epoch and calculates the rewards for the DLPs\"},\"stake(uint256)\":{\"notice\":\"Stakes Vana tokens for a DLP\"},\"stakerDlpEpochs(address,uint256,uint256)\":{\"notice\":\"Gets information about the staker for a dlp in an epoch\"},\"stakerDlps(address,uint256)\":{\"notice\":\"Gets the information about the dlp for a staker\"},\"stakerDlpsList(address)\":{\"notice\":\"Gets the information about the dlps for which the staker has staked\"},\"stakerDlpsListCount(address)\":{\"notice\":\"Gets the number of dlps for which the staker has staked\"},\"topDlpIds(uint256)\":{\"notice\":\"Gets the top dlps ids\"},\"unstake(uint256,uint256)\":{\"notice\":\"Unstakes Vana tokens from a DLP\"},\"updateDlpStakersPercentage(uint256,uint256)\":{\"notice\":\"Updates the stakers percentage for a dlp\"},\"updateEpochRewardAmount(uint256)\":{\"notice\":\"Updates the epochRewardAmount\"},\"updateEpochSize(uint256)\":{\"notice\":\"Updates the epoch size\"},\"updateMaxNumberOfDlps(uint256)\":{\"notice\":\"Updates the maximum number of dlps\"},\"updateMinDlpStakeAmount(uint256)\":{\"notice\":\"Updates the minDlpStakeAmount\"},\"updatePerformancePercentages(uint256,uint256,uint256,uint256)\":{\"notice\":\"Updates the performance percentages\"},\"version()\":{\"notice\":\"returns the version of the contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/root/DataLiquidityPoolsRootImplementation.sol\":\"DataLiquidityPoolsRootImplementation\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {OwnableUpgradeable} from \\\"./OwnableUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is specified at deployment time in the constructor for `Ownable`. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable2Step\\n    struct Ownable2StepStorage {\\n        address _pendingOwner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable2Step\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant Ownable2StepStorageLocation = 0x237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c00;\\n\\n    function _getOwnable2StepStorage() private pure returns (Ownable2StepStorage storage $) {\\n        assembly {\\n            $.slot := Ownable2StepStorageLocation\\n        }\\n    }\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    function __Ownable2Step_init() internal onlyInitializing {\\n    }\\n\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        Ownable2StepStorage storage $ = _getOwnable2StepStorage();\\n        return $._pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        Ownable2StepStorage storage $ = _getOwnable2StepStorage();\\n        $._pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        Ownable2StepStorage storage $ = _getOwnable2StepStorage();\\n        delete $._pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        if (pendingOwner() != sender) {\\n            revert OwnableUnauthorizedAccount(sender);\\n        }\\n        _transferOwnership(sender);\\n    }\\n}\\n\",\"keccak256\":\"0xbca4a4f66d98028293dba695851d1b20d3e0ba2fff7453fb241f192fa3fc6b6f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC1967-compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f13b947637c4969c0644cab4ef399cdc4b67f101463b8775c5a43b118558e53\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Pausable\\n    struct PausableStorage {\\n        bool _paused;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Pausable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant PausableStorageLocation = 0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300;\\n\\n    function _getPausableStorage() private pure returns (PausableStorage storage $) {\\n        assembly {\\n            $.slot := PausableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        PausableStorage storage $ = _getPausableStorage();\\n        return $._paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x92915b7f7f642c6be3f65bfd1522feb5d5b6ef25f755f4dbb51df32c868f2f97\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xb44e086e941292cdc7f440de51478493894ef0b1aeccb0c4047445919f667f74\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x2a1f9944df2015c081d89cd41ba22ffaf10aa6285969f0dc612b235cc448999c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x06a78f9b3ee3e6d0eb4e4cd635ba49960bea34cac1db8c0a27c75f2319f1fd65\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xe19a4d5f31d2861e7344e8e535e2feafb913d806d3e2b5fe7782741a2a7094fe\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/Checkpoints.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/Checkpoints.sol)\\n// This file was procedurally generated from scripts/generate/templates/Checkpoints.js.\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"../math/Math.sol\\\";\\n\\n/**\\n * @dev This library defines the `Trace*` struct, for checkpointing values as they change at different points in\\n * time, and later looking up past values by block number. See {Votes} as an example.\\n *\\n * To create a history of checkpoints define a variable type `Checkpoints.Trace*` in your contract, and store a new\\n * checkpoint for the current transaction block using the {push} function.\\n */\\nlibrary Checkpoints {\\n    /**\\n     * @dev A value was attempted to be inserted on a past checkpoint.\\n     */\\n    error CheckpointUnorderedInsertion();\\n\\n    struct Trace224 {\\n        Checkpoint224[] _checkpoints;\\n    }\\n\\n    struct Checkpoint224 {\\n        uint32 _key;\\n        uint224 _value;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into a Trace224 so that it is stored as the checkpoint.\\n     *\\n     * Returns previous value and new value.\\n     *\\n     * IMPORTANT: Never accept `key` as a user input, since an arbitrary `type(uint32).max` key set will disable the\\n     * library.\\n     */\\n    function push(Trace224 storage self, uint32 key, uint224 value) internal returns (uint224, uint224) {\\n        return _insert(self._checkpoints, key, value);\\n    }\\n\\n    /**\\n     * @dev Returns the value in the first (oldest) checkpoint with key greater or equal than the search key, or zero if\\n     * there is none.\\n     */\\n    function lowerLookup(Trace224 storage self, uint32 key) internal view returns (uint224) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _lowerBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == len ? 0 : _unsafeAccess(self._checkpoints, pos)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     */\\n    function upperLookup(Trace224 storage self, uint32 key) internal view returns (uint224) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     *\\n     * NOTE: This is a variant of {upperLookup} that is optimised to find \\\"recent\\\" checkpoint (checkpoints with high\\n     * keys).\\n     */\\n    function upperLookupRecent(Trace224 storage self, uint32 key) internal view returns (uint224) {\\n        uint256 len = self._checkpoints.length;\\n\\n        uint256 low = 0;\\n        uint256 high = len;\\n\\n        if (len > 5) {\\n            uint256 mid = len - Math.sqrt(len);\\n            if (key < _unsafeAccess(self._checkpoints, mid)._key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, low, high);\\n\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\\n     */\\n    function latest(Trace224 storage self) internal view returns (uint224) {\\n        uint256 pos = self._checkpoints.length;\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\\n     * in the most recent checkpoint.\\n     */\\n    function latestCheckpoint(Trace224 storage self) internal view returns (bool exists, uint32 _key, uint224 _value) {\\n        uint256 pos = self._checkpoints.length;\\n        if (pos == 0) {\\n            return (false, 0, 0);\\n        } else {\\n            Checkpoint224 memory ckpt = _unsafeAccess(self._checkpoints, pos - 1);\\n            return (true, ckpt._key, ckpt._value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the number of checkpoint.\\n     */\\n    function length(Trace224 storage self) internal view returns (uint256) {\\n        return self._checkpoints.length;\\n    }\\n\\n    /**\\n     * @dev Returns checkpoint at given position.\\n     */\\n    function at(Trace224 storage self, uint32 pos) internal view returns (Checkpoint224 memory) {\\n        return self._checkpoints[pos];\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\\n     * or by updating the last one.\\n     */\\n    function _insert(Checkpoint224[] storage self, uint32 key, uint224 value) private returns (uint224, uint224) {\\n        uint256 pos = self.length;\\n\\n        if (pos > 0) {\\n            // Copying to memory is important here.\\n            Checkpoint224 memory last = _unsafeAccess(self, pos - 1);\\n\\n            // Checkpoint keys must be non-decreasing.\\n            if (last._key > key) {\\n                revert CheckpointUnorderedInsertion();\\n            }\\n\\n            // Update or push new checkpoint\\n            if (last._key == key) {\\n                _unsafeAccess(self, pos - 1)._value = value;\\n            } else {\\n                self.push(Checkpoint224({_key: key, _value: value}));\\n            }\\n            return (last._value, value);\\n        } else {\\n            self.push(Checkpoint224({_key: key, _value: value}));\\n            return (0, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the index of the last (most recent) checkpoint with key lower or equal than the search key, or `high`\\n     * if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and exclusive\\n     * `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _upperBinaryLookup(\\n        Checkpoint224[] storage self,\\n        uint32 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key > key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Return the index of the first (oldest) checkpoint with key is greater or equal than the search key, or\\n     * `high` if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and\\n     * exclusive `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _lowerBinaryLookup(\\n        Checkpoint224[] storage self,\\n        uint32 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key < key) {\\n                low = mid + 1;\\n            } else {\\n                high = mid;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\\n     */\\n    function _unsafeAccess(\\n        Checkpoint224[] storage self,\\n        uint256 pos\\n    ) private pure returns (Checkpoint224 storage result) {\\n        assembly {\\n            mstore(0, self.slot)\\n            result.slot := add(keccak256(0, 0x20), pos)\\n        }\\n    }\\n\\n    struct Trace208 {\\n        Checkpoint208[] _checkpoints;\\n    }\\n\\n    struct Checkpoint208 {\\n        uint48 _key;\\n        uint208 _value;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into a Trace208 so that it is stored as the checkpoint.\\n     *\\n     * Returns previous value and new value.\\n     *\\n     * IMPORTANT: Never accept `key` as a user input, since an arbitrary `type(uint48).max` key set will disable the\\n     * library.\\n     */\\n    function push(Trace208 storage self, uint48 key, uint208 value) internal returns (uint208, uint208) {\\n        return _insert(self._checkpoints, key, value);\\n    }\\n\\n    /**\\n     * @dev Returns the value in the first (oldest) checkpoint with key greater or equal than the search key, or zero if\\n     * there is none.\\n     */\\n    function lowerLookup(Trace208 storage self, uint48 key) internal view returns (uint208) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _lowerBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == len ? 0 : _unsafeAccess(self._checkpoints, pos)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     */\\n    function upperLookup(Trace208 storage self, uint48 key) internal view returns (uint208) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     *\\n     * NOTE: This is a variant of {upperLookup} that is optimised to find \\\"recent\\\" checkpoint (checkpoints with high\\n     * keys).\\n     */\\n    function upperLookupRecent(Trace208 storage self, uint48 key) internal view returns (uint208) {\\n        uint256 len = self._checkpoints.length;\\n\\n        uint256 low = 0;\\n        uint256 high = len;\\n\\n        if (len > 5) {\\n            uint256 mid = len - Math.sqrt(len);\\n            if (key < _unsafeAccess(self._checkpoints, mid)._key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, low, high);\\n\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\\n     */\\n    function latest(Trace208 storage self) internal view returns (uint208) {\\n        uint256 pos = self._checkpoints.length;\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\\n     * in the most recent checkpoint.\\n     */\\n    function latestCheckpoint(Trace208 storage self) internal view returns (bool exists, uint48 _key, uint208 _value) {\\n        uint256 pos = self._checkpoints.length;\\n        if (pos == 0) {\\n            return (false, 0, 0);\\n        } else {\\n            Checkpoint208 memory ckpt = _unsafeAccess(self._checkpoints, pos - 1);\\n            return (true, ckpt._key, ckpt._value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the number of checkpoint.\\n     */\\n    function length(Trace208 storage self) internal view returns (uint256) {\\n        return self._checkpoints.length;\\n    }\\n\\n    /**\\n     * @dev Returns checkpoint at given position.\\n     */\\n    function at(Trace208 storage self, uint32 pos) internal view returns (Checkpoint208 memory) {\\n        return self._checkpoints[pos];\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\\n     * or by updating the last one.\\n     */\\n    function _insert(Checkpoint208[] storage self, uint48 key, uint208 value) private returns (uint208, uint208) {\\n        uint256 pos = self.length;\\n\\n        if (pos > 0) {\\n            // Copying to memory is important here.\\n            Checkpoint208 memory last = _unsafeAccess(self, pos - 1);\\n\\n            // Checkpoint keys must be non-decreasing.\\n            if (last._key > key) {\\n                revert CheckpointUnorderedInsertion();\\n            }\\n\\n            // Update or push new checkpoint\\n            if (last._key == key) {\\n                _unsafeAccess(self, pos - 1)._value = value;\\n            } else {\\n                self.push(Checkpoint208({_key: key, _value: value}));\\n            }\\n            return (last._value, value);\\n        } else {\\n            self.push(Checkpoint208({_key: key, _value: value}));\\n            return (0, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the index of the last (most recent) checkpoint with key lower or equal than the search key, or `high`\\n     * if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and exclusive\\n     * `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _upperBinaryLookup(\\n        Checkpoint208[] storage self,\\n        uint48 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key > key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Return the index of the first (oldest) checkpoint with key is greater or equal than the search key, or\\n     * `high` if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and\\n     * exclusive `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _lowerBinaryLookup(\\n        Checkpoint208[] storage self,\\n        uint48 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key < key) {\\n                low = mid + 1;\\n            } else {\\n                high = mid;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\\n     */\\n    function _unsafeAccess(\\n        Checkpoint208[] storage self,\\n        uint256 pos\\n    ) private pure returns (Checkpoint208 storage result) {\\n        assembly {\\n            mstore(0, self.slot)\\n            result.slot := add(keccak256(0, 0x20), pos)\\n        }\\n    }\\n\\n    struct Trace160 {\\n        Checkpoint160[] _checkpoints;\\n    }\\n\\n    struct Checkpoint160 {\\n        uint96 _key;\\n        uint160 _value;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into a Trace160 so that it is stored as the checkpoint.\\n     *\\n     * Returns previous value and new value.\\n     *\\n     * IMPORTANT: Never accept `key` as a user input, since an arbitrary `type(uint96).max` key set will disable the\\n     * library.\\n     */\\n    function push(Trace160 storage self, uint96 key, uint160 value) internal returns (uint160, uint160) {\\n        return _insert(self._checkpoints, key, value);\\n    }\\n\\n    /**\\n     * @dev Returns the value in the first (oldest) checkpoint with key greater or equal than the search key, or zero if\\n     * there is none.\\n     */\\n    function lowerLookup(Trace160 storage self, uint96 key) internal view returns (uint160) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _lowerBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == len ? 0 : _unsafeAccess(self._checkpoints, pos)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     */\\n    function upperLookup(Trace160 storage self, uint96 key) internal view returns (uint160) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     *\\n     * NOTE: This is a variant of {upperLookup} that is optimised to find \\\"recent\\\" checkpoint (checkpoints with high\\n     * keys).\\n     */\\n    function upperLookupRecent(Trace160 storage self, uint96 key) internal view returns (uint160) {\\n        uint256 len = self._checkpoints.length;\\n\\n        uint256 low = 0;\\n        uint256 high = len;\\n\\n        if (len > 5) {\\n            uint256 mid = len - Math.sqrt(len);\\n            if (key < _unsafeAccess(self._checkpoints, mid)._key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, low, high);\\n\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\\n     */\\n    function latest(Trace160 storage self) internal view returns (uint160) {\\n        uint256 pos = self._checkpoints.length;\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\\n     * in the most recent checkpoint.\\n     */\\n    function latestCheckpoint(Trace160 storage self) internal view returns (bool exists, uint96 _key, uint160 _value) {\\n        uint256 pos = self._checkpoints.length;\\n        if (pos == 0) {\\n            return (false, 0, 0);\\n        } else {\\n            Checkpoint160 memory ckpt = _unsafeAccess(self._checkpoints, pos - 1);\\n            return (true, ckpt._key, ckpt._value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the number of checkpoint.\\n     */\\n    function length(Trace160 storage self) internal view returns (uint256) {\\n        return self._checkpoints.length;\\n    }\\n\\n    /**\\n     * @dev Returns checkpoint at given position.\\n     */\\n    function at(Trace160 storage self, uint32 pos) internal view returns (Checkpoint160 memory) {\\n        return self._checkpoints[pos];\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\\n     * or by updating the last one.\\n     */\\n    function _insert(Checkpoint160[] storage self, uint96 key, uint160 value) private returns (uint160, uint160) {\\n        uint256 pos = self.length;\\n\\n        if (pos > 0) {\\n            // Copying to memory is important here.\\n            Checkpoint160 memory last = _unsafeAccess(self, pos - 1);\\n\\n            // Checkpoint keys must be non-decreasing.\\n            if (last._key > key) {\\n                revert CheckpointUnorderedInsertion();\\n            }\\n\\n            // Update or push new checkpoint\\n            if (last._key == key) {\\n                _unsafeAccess(self, pos - 1)._value = value;\\n            } else {\\n                self.push(Checkpoint160({_key: key, _value: value}));\\n            }\\n            return (last._value, value);\\n        } else {\\n            self.push(Checkpoint160({_key: key, _value: value}));\\n            return (0, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the index of the last (most recent) checkpoint with key lower or equal than the search key, or `high`\\n     * if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and exclusive\\n     * `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _upperBinaryLookup(\\n        Checkpoint160[] storage self,\\n        uint96 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key > key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Return the index of the first (oldest) checkpoint with key is greater or equal than the search key, or\\n     * `high` if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and\\n     * exclusive `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _lowerBinaryLookup(\\n        Checkpoint160[] storage self,\\n        uint96 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key < key) {\\n                low = mid + 1;\\n            } else {\\n                high = mid;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\\n     */\\n    function _unsafeAccess(\\n        Checkpoint160[] storage self,\\n        uint256 pos\\n    ) private pure returns (Checkpoint160 storage result) {\\n        assembly {\\n            mstore(0, self.slot)\\n            result.slot := add(keccak256(0, 0x20), pos)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbdc5e074d7dd6678f67e92b1a51a20226801a407b0e1af3da367c5d1ff4519ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"},\"contracts/root/DataLiquidityPoolsRootImplementation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.24;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interfaces/DataLiquidityPoolsRootStorageV1.sol\\\";\\n\\ncontract DataLiquidityPoolsRootImplementation is\\n    UUPSUpgradeable,\\n    PausableUpgradeable,\\n    Ownable2StepUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    DataLiquidityPoolsRootStorageV1\\n{\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using Checkpoints for Checkpoints.Trace208;\\n\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @notice Triggered when a dlp has registered\\n     *\\n     * @param dlpId                        id of the dlp\\n     * @param dlpAddress                   address of the dlp\\n     * @param ownerAddress                 owner of the dlp\\n     */\\n    event DlpRegistered(uint256 indexed dlpId, address indexed dlpAddress, address indexed ownerAddress);\\n\\n    /**\\n     * @notice Triggered when a dlp has been deregistered\\n     *\\n     * @param dlpId                   id of the dlp\\n     */\\n    event DlpDeregistered(uint256 indexed dlpId);\\n\\n    /**\\n     * @notice Triggered when a dlp has been deregistered by the dlp owner\\n     *\\n     * @param dlpId                              id of the dlp\\n     * @param unstakeAmount                     amount unstake\\n     * @param penaltyAmount                      penalty amount\\n     */\\n    event DlpDeregisteredByOwner(uint256 indexed dlpId, uint256 unstakeAmount, uint256 penaltyAmount);\\n\\n    /**\\n     * @notice Triggered when a epoch has been created\\n     *\\n     * @param epochId                  reward epoch id\\n     */\\n    event EpochCreated(uint256 epochId);\\n\\n    /**\\n     * @notice Triggered when owner has updated its scores\\n     *\\n     * @param dlpIds                       dlp ids\\n     * @param scores                       dlp scores\\n     */\\n    event ScoresUpdated(uint256[] dlpIds, uint256[] scores);\\n\\n    /**\\n     * @notice Triggered when the max number of dlps has been updated\\n     *\\n     * @param newMaxNumberOfDlps           new max number of dlps\\n     */\\n    event MaxNumberOfDlpsUpdated(uint256 newMaxNumberOfDlps);\\n\\n    /**\\n     * @notice Triggered when the epoch size has been updated\\n     *\\n     * @param newEpochSize                new epoch size\\n     */\\n    event EpochSizeUpdated(uint256 newEpochSize);\\n\\n    /**\\n     * @notice Triggered when the epoch reward amount has been updated\\n     *\\n     * @param newEpochRewardAmount                new epoch reward amount\\n     */\\n    event EpochRewardAmountUpdated(uint256 newEpochRewardAmount);\\n\\n    /**\\n     * @notice Triggered when the minDlpStakeAmount has been updated\\n     *\\n     * @param newMinDlpStakeAmount                new minDlpStakeAmount\\n     */\\n    event MinDlpStakeAmountUpdated(uint256 newMinDlpStakeAmount);\\n\\n    /**\\n     * @notice Triggered when a staker has claimed a reward for a dlp in an epoch\\n     *\\n     * @param staker                              address of the staker\\n     * @param dlpId                               id of the dlp\\n     * @param epochId                             epoch id\\n     * @param claimAmount                         amount claimed\\n     */\\n    event StakerDlpEpochRewardClaimed(address staker, uint256 dlpId, uint256 epochId, uint256 claimAmount);\\n\\n    /**\\n     * @notice Triggered when user has stake some DAT for a DLP\\n     *\\n     * @param staker                            address of the staker\\n     * @param dlpId                             id of the dlp\\n     * @param amount                            amount stake\\n     */\\n    event Staked(address indexed staker, uint256 indexed dlpId, uint256 amount);\\n\\n    /**\\n     * @notice Triggered when user has unstake some DAT from a DLP\\n     *\\n     * @param staker                            address of the staker\\n     * @param dlpId                             id of the dlp\\n     * @param amount                            amount unstake\\n     */\\n    event Unstaked(address indexed staker, uint256 indexed dlpId, uint256 amount);\\n\\n    /**\\n     * @notice Triggered when epoch performances have been saved\\n     *\\n     * @param epochId                         epoch id\\n     * @param isFinalised                           true if the performances are final\\n     */\\n    event EpochPerformancesSaved(uint256 epochId, bool isFinalised);\\n\\n    /**\\n     * @notice Triggered when the performance percentages has been updated\\n     *\\n     * @param newTtfPercentage                new ttf percentage\\n     * @param newTfcPercentage                new tfc percentage\\n     * @param newVduPercentage                new vdu percentage\\n     * @param newUwPercentage                 new uw percentage\\n     */\\n    event PerformancePercentagesUpdated(\\n        uint256 newTtfPercentage,\\n        uint256 newTfcPercentage,\\n        uint256 newVduPercentage,\\n        uint256 newUwPercentage\\n    );\\n\\n    /**\\n     * @notice Triggered when the dlp stakers percentage has been updated\\n     *\\n     * @param dlpId                         id of the dlp\\n     * @param stakersPercentage             new stakers percentage\\n     */\\n    event DlpStakersPercentageUpdated(uint256 dlpId, uint256 stakersPercentage);\\n\\n    error InvalidStakeAmount();\\n    error InvalidUnstakeAmount();\\n    error InvalidDlpStatus();\\n    error TooManyDlps();\\n    error NotDlpOwner();\\n    error WithdrawNotAllowed();\\n    error ArityMismatch();\\n    error NotAllowed();\\n    error InvalidDlpList();\\n    error NothingToClaim();\\n    error CurrentEpochNotCreated();\\n    error InvalidPerformancePercentages();\\n    error AlreadyDistributed();\\n    error EpochNotStarted();\\n    error PreviousEpochNotFinalised();\\n    error EpochNotEnded();\\n    error EpochEnded();\\n    error InvalidStakersPercentage();\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the caller is the owner of the dlp\\n     *\\n     * @param dlpId                         id of the dlp\\n     */\\n    modifier onlyDlpOwner(uint256 dlpId) {\\n        if (_dlps[dlpId].ownerAddress != msg.sender) {\\n            revert NotDlpOwner();\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the current epoch was created\\n     */\\n    modifier whenCurrentEpoch() {\\n        if (_epochs[epochsCount].endBlock < block.number) {\\n            revert CurrentEpochNotCreated();\\n        }\\n        _;\\n    }\\n\\n    struct InitParams {\\n        address payable ownerAddress;\\n        uint256 maxNumberOfDlps;\\n        uint256 minDlpStakeAmount;\\n        uint256 startBlock;\\n        uint256 epochSize;\\n        uint256 epochRewardAmount;\\n        uint256 ttfPercentage;\\n        uint256 tfcPercentage;\\n        uint256 vduPercentage;\\n        uint256 uwPercentage;\\n    }\\n\\n    /**\\n     * @notice Initialize the contract\\n     *\\n     * @param params                             initialization parameters\\n     */\\n    function initialize(InitParams memory params) external initializer {\\n        __Ownable2Step_init();\\n        __UUPSUpgradeable_init();\\n        __ReentrancyGuard_init();\\n        __Pausable_init();\\n\\n        maxNumberOfDlps = params.maxNumberOfDlps;\\n        minDlpStakeAmount = params.minDlpStakeAmount;\\n        epochSize = params.epochSize;\\n        epochRewardAmount = params.epochRewardAmount;\\n\\n        ttfPercentage = params.ttfPercentage;\\n        tfcPercentage = params.tfcPercentage;\\n        vduPercentage = params.vduPercentage;\\n        uwPercentage = params.uwPercentage;\\n\\n        if (ttfPercentage + tfcPercentage + vduPercentage + uwPercentage != 100e18) {\\n            revert InvalidPerformancePercentages();\\n        }\\n\\n        Epoch storage epoch0 = _epochs[0];\\n        epoch0.startBlock = Math.min(params.startBlock - 2, block.number);\\n        epoch0.endBlock = params.startBlock - 1;\\n        epoch0.isFinalised = true;\\n\\n        _transferOwnership(params.ownerAddress);\\n    }\\n\\n    /**\\n     * @notice Upgrade the contract\\n     * This function is required by OpenZeppelin's UUPSUpgradeable\\n     *\\n     * @param newImplementation                  new implementation\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual override onlyOwner {}\\n\\n    /**\\n     * returns the version of the contract\\n     */\\n    function version() external pure virtual override returns (uint256) {\\n        return 1;\\n    }\\n\\n    /**\\n     * @notice Gets the dlp information\\n     *\\n     * @param dlpId                         id of the dlp\\n     */\\n    function dlps(uint256 dlpId) public view override returns (DlpResponse memory) {\\n        Dlp storage dlp = _dlps[dlpId];\\n\\n        return\\n            DlpResponse({\\n                id: dlp.id,\\n                dlpAddress: dlp.dlpAddress,\\n                ownerAddress: dlp.ownerAddress,\\n                stakeAmount: dlp.stakeAmountCheckpoints.latest(),\\n                status: dlp.status,\\n                registrationBlockNumber: dlp.registrationBlockNumber,\\n                grantedAmount: dlp.grantedAmount,\\n                stakersPercentage: dlp.stakersPercentage\\n            });\\n    }\\n\\n    /**\\n     * @notice Gets the dlp information\\n     *\\n     * @param dlpAddress                         address of the dlp\\n     */\\n    function dlpsByAddress(address dlpAddress) external view override returns (DlpResponse memory) {\\n        return dlps(dlpIds[dlpAddress]);\\n    }\\n\\n    /**\\n     * @notice Gets registered dlps list\\n     */\\n    function registeredDlps() external view override returns (uint256[] memory) {\\n        return _registeredDlps.values();\\n    }\\n\\n    /**\\n     * @notice Gets epoch information\\n     *\\n     * @param epochId                         epoch id\\n     */\\n    function epochs(uint256 epochId) external view override returns (EpochInfo memory) {\\n        return\\n            EpochInfo({\\n                startBlock: _epochs[epochId].startBlock,\\n                endBlock: _epochs[epochId].endBlock,\\n                reward: _epochs[epochId].rewardAmount,\\n                isFinalised: _epochs[epochId].isFinalised,\\n                dlpIds: _epochs[epochId].dlpIds.values()\\n            });\\n    }\\n\\n    /**\\n     * @notice Gets epoch dlp information\\n     *\\n     * @param dlpId                           id of the dlp\\n     * @param epochId                         epoch id\\n     */\\n    function dlpEpochs(uint256 dlpId, uint256 epochId) external view override returns (DlpEpochInfo memory) {\\n        EpochDlp memory epochDlp = _epochs[epochId].dlps[dlpId];\\n        return\\n            DlpEpochInfo({\\n                ttf: epochDlp.ttf,\\n                tfc: epochDlp.tfc,\\n                vdu: epochDlp.vdu,\\n                uw: epochDlp.uw,\\n                stakeAmount: _dlps[dlpId].stakeAmountCheckpoints.upperLookup(\\n                    SafeCast.toUint48(_epochs[epochId].startBlock - 1)\\n                ),\\n                isTopDlp: _epochs[epochId].dlpIds.contains(dlpId),\\n                rewardAmount: epochDlp.rewardAmount,\\n                stakersPercentage: epochDlp.stakersPercentage\\n            });\\n    }\\n\\n    /**\\n     * @notice Gets the number of dlps for which the staker has staked\\n     */\\n    function stakerDlpsListCount(address staker) external view override returns (uint256) {\\n        return _stakers[staker].dlpIds.length();\\n    }\\n\\n    /**\\n     * @notice Gets the information about the dlp for a staker\\n     *\\n     * @param stakerAddress                        address of the staker\\n     * @param dlpId                         id of the dlp\\n     */\\n    function stakerDlps(address stakerAddress, uint256 dlpId) external view override returns (StakerDlpInfo memory) {\\n        return\\n            StakerDlpInfo({\\n                dlpId: dlpId,\\n                stakeAmount: _dlps[dlpId].stakers[stakerAddress].stakeAmountCheckpoints.latest(),\\n                lastClaimedEpochId: _dlps[dlpId].stakers[stakerAddress].lastClaimedEpochId\\n            });\\n    }\\n\\n    /**\\n     * @notice Gets the information about the dlps for which the staker has staked\\n     *\\n     * @param stakerAddress                        address of the staker\\n     */\\n    function stakerDlpsList(address stakerAddress) external view override returns (StakerDlpInfo[] memory) {\\n        Staker storage staker = _stakers[stakerAddress];\\n        StakerDlpInfo[] memory stakerDlpsList = new StakerDlpInfo[](staker.dlpIds.length());\\n\\n        for (uint256 i = 0; i < staker.dlpIds.length(); i++) {\\n            uint256 dlpId = staker.dlpIds.at(i);\\n            stakerDlpsList[i] = StakerDlpInfo({\\n                dlpId: dlpId,\\n                stakeAmount: _dlps[dlpId].stakers[stakerAddress].stakeAmountCheckpoints.latest(),\\n                lastClaimedEpochId: _dlps[dlpId].stakers[stakerAddress].lastClaimedEpochId\\n            });\\n        }\\n\\n        return stakerDlpsList;\\n    }\\n\\n    /**\\n     * @notice Gets information about the staker for a dlp in an epoch\\n     *\\n     * @param staker                          address of the staker\\n     * @param epochId                         epoch id\\n     * @param dlpId                           id of the dlp\\n     */\\n    function stakerDlpEpochs(\\n        address staker,\\n        uint256 dlpId,\\n        uint256 epochId\\n    ) external view override returns (StakerDlpEpochInfo memory) {\\n        uint256 stakeAmount = _dlps[dlpId].stakers[staker].stakeAmountCheckpoints.upperLookup(\\n            SafeCast.toUint48(_epochs[epochId].startBlock - 1)\\n        );\\n\\n        EpochDlp storage epochDlp = _epochs[epochId].dlps[dlpId];\\n        return\\n            StakerDlpEpochInfo({\\n                dlpId: dlpId,\\n                epochId: epochId,\\n                stakeAmount: stakeAmount,\\n                rewardAmount: epochDlp.stakeAmount > 0\\n                    ? (((epochDlp.rewardAmount * epochDlp.stakersPercentage) / 100e18) * stakeAmount) /\\n                        epochDlp.stakeAmount\\n                    : 0,\\n                claimAmount: _dlps[dlpId].stakers[staker].claimAmounts[epochId]\\n            });\\n    }\\n\\n    /**\\n     * @notice Gets the claimable amount for a staker for a dlp\\n     *\\n     * @param stakerAddress                        address of the staker\\n     * @param dlpId                         id of the dlp\\n     */\\n    function claimableAmount(address stakerAddress, uint256 dlpId) external view override returns (uint256) {\\n        DlpStaker storage dlpStaker = _dlps[dlpId].stakers[stakerAddress];\\n\\n        uint256 totalRewardAmount;\\n        uint256 lastClaimedEpochId = dlpStaker.lastClaimedEpochId;\\n\\n        while (lastClaimedEpochId < epochsCount) {\\n            lastClaimedEpochId++;\\n\\n            Epoch storage epoch = _epochs[lastClaimedEpochId];\\n            EpochDlp storage epochDlp = epoch.dlps[dlpId];\\n\\n            if (!epoch.isFinalised) {\\n                break;\\n            }\\n\\n            totalRewardAmount += epochDlp.stakeAmount > 0\\n                ? (((dlpStaker.stakeAmountCheckpoints.upperLookup(SafeCast.toUint48(epoch.startBlock - 1)) *\\n                    epochDlp.rewardAmount) / epochDlp.stakeAmount) * epochDlp.stakersPercentage) / 100e18\\n                : 0;\\n        }\\n\\n        return totalRewardAmount;\\n    }\\n\\n    /**\\n     * @notice Gets the top dlps ids\\n     *\\n     * @param numberOfDlps                        number of dlps\\n     */\\n    function topDlpIds(uint256 numberOfDlps) public view override returns (uint256[] memory) {\\n        uint256[] memory registeredDlpIds = _registeredDlps.values();\\n        uint256 registeredDlpsCount = registeredDlpIds.length;\\n\\n        numberOfDlps = Math.min(numberOfDlps, registeredDlpsCount);\\n\\n        uint256[] memory topDlpIds = new uint256[](numberOfDlps);\\n\\n        if (numberOfDlps == 0) {\\n            return topDlpIds;\\n        }\\n\\n        uint256[] memory topStakes = new uint256[](numberOfDlps);\\n\\n        for (uint256 i = 0; i < registeredDlpsCount; i++) {\\n            uint256 currentDlpId = registeredDlpIds[i];\\n            uint256 currentStake = _dlps[currentDlpId].stakeAmountCheckpoints.latest();\\n\\n            // Find the position where this DLP's stake would be placed\\n            uint256 position = numberOfDlps;\\n            for (uint256 j = 0; j < numberOfDlps; j++) {\\n                if (currentStake > topStakes[j] || (currentStake == topStakes[j] && currentDlpId < topDlpIds[j])) {\\n                    position = j;\\n                    break;\\n                }\\n            }\\n\\n            // If it's within the top k, insert it and shift the others down\\n            if (position < numberOfDlps) {\\n                for (uint256 j = numberOfDlps - 1; j > position; j--) {\\n                    topDlpIds[j] = topDlpIds[j - 1];\\n                    topStakes[j] = topStakes[j - 1];\\n                }\\n                topDlpIds[position] = currentDlpId;\\n                topStakes[position] = currentStake;\\n            }\\n        }\\n\\n        return topDlpIds;\\n    }\\n\\n    /**\\n     * @dev Pauses the contract\\n     */\\n    function pause() external override onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpauses the contract\\n     */\\n    function unpause() external override onlyOwner {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @notice Updates the maximum number of dlps\\n     *\\n     * @param newMaxNumberOfDlps           new maximum number of dlps\\n     */\\n    function updateMaxNumberOfDlps(uint256 newMaxNumberOfDlps) external override onlyOwner whenCurrentEpoch {\\n        maxNumberOfDlps = newMaxNumberOfDlps;\\n\\n        emit MaxNumberOfDlpsUpdated(newMaxNumberOfDlps);\\n    }\\n\\n    /**\\n     * @notice Updates the epoch size\\n     *\\n     * @param newEpochSize                new epoch size\\n     */\\n    function updateEpochSize(uint256 newEpochSize) external override onlyOwner whenCurrentEpoch {\\n        epochSize = newEpochSize;\\n\\n        emit EpochSizeUpdated(newEpochSize);\\n    }\\n\\n    /**\\n     * @notice Updates the epochRewardAmount\\n     *\\n     * @param newEpochRewardAmount                new epoch size\\n     */\\n    function updateEpochRewardAmount(uint256 newEpochRewardAmount) external override whenCurrentEpoch onlyOwner {\\n        epochRewardAmount = newEpochRewardAmount;\\n\\n        emit EpochRewardAmountUpdated(newEpochRewardAmount);\\n    }\\n\\n    /**\\n     * @notice Updates the minDlpStakeAmount\\n     *\\n     * @param newMinDlpStakeAmount                new minDlpStakeAmount\\n     */\\n    function updateMinDlpStakeAmount(uint256 newMinDlpStakeAmount) external override onlyOwner {\\n        minDlpStakeAmount = newMinDlpStakeAmount;\\n\\n        emit MinDlpStakeAmountUpdated(newMinDlpStakeAmount);\\n    }\\n\\n    /**\\n     * @notice Updates the performance percentages\\n     *\\n     * @param newTtfPercentage                new ttf percentage\\n     * @param newTfcPercentage                new tfc percentage\\n     * @param newVduPercentage                new vdu percentage\\n     * @param newUwPercentage                 new uw percentage\\n     */\\n    function updatePerformancePercentages(\\n        uint256 newTtfPercentage,\\n        uint256 newTfcPercentage,\\n        uint256 newVduPercentage,\\n        uint256 newUwPercentage\\n    ) external override onlyOwner whenCurrentEpoch {\\n        if (newTtfPercentage + newTfcPercentage + newVduPercentage + newUwPercentage != 100e18) {\\n            revert InvalidPerformancePercentages();\\n        }\\n\\n        ttfPercentage = newTtfPercentage;\\n        tfcPercentage = newTfcPercentage;\\n        vduPercentage = newVduPercentage;\\n        uwPercentage = newUwPercentage;\\n\\n        emit PerformancePercentagesUpdated(newTtfPercentage, newTfcPercentage, newVduPercentage, newUwPercentage);\\n    }\\n\\n    /**\\n     * @notice Registers a dlp\\n     *\\n     * @param dlpAddress                   address of the dlp\\n     * @param dlpOwnerAddress              owner of the dlp\\n     * @param stakersPercentage            percentage of the rewards that will be distributed to the stakers\\n     */\\n    function registerDlp(\\n        address dlpAddress,\\n        address payable dlpOwnerAddress,\\n        uint256 stakersPercentage\\n    ) external payable override whenNotPaused nonReentrant whenCurrentEpoch {\\n        _registerDlp(dlpAddress, dlpOwnerAddress, stakersPercentage, false);\\n    }\\n\\n    /**\\n     * @notice Registers a dlp with grant\\n     *\\n     * @param dlpAddress                   address of the dlp\\n     * @param dlpOwnerAddress              owner of the dlp\\n     * @param stakersPercentage            percentage of the rewards that will be distributed to the stakers\\n     */\\n    function registerDlpWithGrant(\\n        address dlpAddress,\\n        address payable dlpOwnerAddress,\\n        uint256 stakersPercentage\\n    ) external payable override whenNotPaused nonReentrant whenCurrentEpoch {\\n        _registerDlp(dlpAddress, dlpOwnerAddress, stakersPercentage, true);\\n    }\\n\\n    /**\\n     * @notice Updates the stakers percentage for a dlp\\n     *\\n     * @param dlpId                        dlp id\\n     * @param stakersPercentage            new stakers percentage\\n     */\\n    function updateDlpStakersPercentage(\\n        uint256 dlpId,\\n        uint256 stakersPercentage\\n    ) external override onlyDlpOwner(dlpId) whenCurrentEpoch {\\n        if (stakersPercentage > 100e18) {\\n            revert InvalidStakersPercentage();\\n        }\\n\\n        _dlps[dlpId].stakersPercentage = stakersPercentage;\\n\\n        emit DlpStakersPercentageUpdated(dlpId, stakersPercentage);\\n    }\\n\\n    /**\\n     * @notice Deregisters dlp\\n     *\\n     * @param dlpId                        dlp id\\n     */\\n    function deregisterDlp(uint256 dlpId) external override onlyDlpOwner(dlpId) nonReentrant whenCurrentEpoch {\\n        Dlp storage dlp = _dlps[dlpId];\\n\\n        if (dlp.status != DlpStatus.Registered) {\\n            revert InvalidDlpStatus();\\n        }\\n\\n        dlp.status = DlpStatus.Deregistered;\\n\\n        _registeredDlps.remove(dlpId);\\n\\n        emit DlpDeregistered(dlpId);\\n\\n        uint256 dlpOwnerStakeAmount = dlp.stakers[dlp.ownerAddress].stakeAmountCheckpoints.latest() - dlp.grantedAmount;\\n\\n        if (dlpOwnerStakeAmount > 0) {\\n            _unstake(dlp.ownerAddress, dlp.id, dlpOwnerStakeAmount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Distributes stake after deregistration of a granted DLP\\n     *\\n     * @param dlpId                        dlp id\\n     * @param dlpOwnerAmount               amount to distribute to the dlp owner\\n     */\\n    function distributeStakeAfterDeregistration(\\n        uint256 dlpId,\\n        uint256 dlpOwnerAmount\\n    ) external override nonReentrant whenCurrentEpoch onlyOwner {\\n        Dlp storage dlp = _dlps[dlpId];\\n\\n        if (dlp.status != DlpStatus.Deregistered) {\\n            revert InvalidDlpStatus();\\n        }\\n\\n        if (dlp.stakers[dlp.ownerAddress].stakeAmountCheckpoints.latest() == 0) {\\n            revert AlreadyDistributed();\\n        }\\n\\n        if (dlpOwnerAmount > 0) {\\n            dlp.ownerAddress.transfer(dlpOwnerAmount);\\n        }\\n\\n        if (dlp.grantedAmount - dlpOwnerAmount > 0) {\\n            payable(owner()).transfer(dlp.grantedAmount - dlpOwnerAmount);\\n        }\\n\\n        _checkpointForcePush(dlp.stakeAmountCheckpoints, 0);\\n        _checkpointForcePush(dlp.stakers[dlp.ownerAddress].stakeAmountCheckpoints, 0);\\n    }\\n\\n    /**\\n     * @notice Creates epochs until current block number\\n     */\\n    function createEpochs() public override {\\n        _createEpochsUntilBlockNumber(block.number);\\n    }\\n\\n    /**\\n     * @notice Creates epochs until a specific block number\\n     * @dev useful only when createEpochs cannot be called because there are to many epochs to create\\n     *\\n     * @param blockNumber             block number\\n     */\\n    function createEpochsUntilBlockNumber(uint256 blockNumber) external override {\\n        _createEpochsUntilBlockNumber(blockNumber < block.number ? blockNumber : block.number);\\n    }\\n\\n    /**\\n     * @notice Saves the performances of top DLPs for a specific epoch\\n     * and calculates the rewards for the DLPs\\n     *\\n     * @param epochId             The ID of the epoch\\n     * @param dlpPerformances     An array of DLPPerformance structs containing the performance metrics of the DLPs\\n     */\\n    function saveEpochPerformances(\\n        uint256 epochId,\\n        DlpPerformance[] memory dlpPerformances,\\n        bool isFinalised\\n    ) external override onlyOwner {\\n        createEpochs();\\n\\n        Epoch storage epoch = _epochs[epochId];\\n\\n        if (epoch.startBlock == 0) {\\n            revert EpochNotStarted();\\n        }\\n\\n        if (isFinalised) {\\n            if (!_epochs[epochId - 1].isFinalised) {\\n                revert PreviousEpochNotFinalised();\\n            }\\n            if (epoch.endBlock > block.number) {\\n                revert EpochNotEnded();\\n            }\\n\\n            epoch.isFinalised = true;\\n        } else {\\n            if (epoch.endBlock < block.number) {\\n                revert EpochEnded();\\n            }\\n        }\\n\\n        EnumerableSet.UintSet storage epochDlpIds = _epochs[epochId].dlpIds;\\n        uint256 epochDlpsCount = epochDlpIds.length();\\n\\n        if (epochDlpsCount != dlpPerformances.length) {\\n            revert ArityMismatch();\\n        }\\n\\n        uint256 i;\\n        EpochDlp storage epochDlp;\\n\\n        uint256 totalScore;\\n        for (i = 0; i < epochDlpsCount; i++) {\\n            epochDlp = epoch.dlps[dlpPerformances[i].dlpId];\\n\\n            if (!epochDlpIds.contains(dlpPerformances[i].dlpId)) {\\n                revert InvalidDlpList();\\n            }\\n\\n            epochDlp.ttf = dlpPerformances[i].ttf;\\n            epochDlp.tfc = dlpPerformances[i].tfc;\\n            epochDlp.vdu = dlpPerformances[i].vdu;\\n            epochDlp.uw = dlpPerformances[i].uw;\\n\\n            totalScore +=\\n                dlpPerformances[i].ttf *\\n                ttfPercentage +\\n                dlpPerformances[i].tfc *\\n                tfcPercentage +\\n                dlpPerformances[i].vdu *\\n                vduPercentage +\\n                dlpPerformances[i].uw *\\n                uwPercentage;\\n        }\\n\\n        if (totalScore == 0) {\\n            return;\\n        }\\n\\n        for (i = 0; i < epochDlpsCount; i++) {\\n            epochDlp = epoch.dlps[dlpPerformances[i].dlpId];\\n\\n            epochDlp.rewardAmount =\\n                ((dlpPerformances[i].ttf *\\n                    ttfPercentage +\\n                    dlpPerformances[i].tfc *\\n                    tfcPercentage +\\n                    dlpPerformances[i].vdu *\\n                    vduPercentage +\\n                    dlpPerformances[i].uw *\\n                    uwPercentage) * epoch.rewardAmount) /\\n                totalScore;\\n\\n            if (isFinalised && epochDlp.stakersPercentage < 100e18) {\\n                payable(_dlps[dlpPerformances[i].dlpId].ownerAddress).transfer(\\n                    (epochDlp.rewardAmount * (100e18 - epochDlp.stakersPercentage)) / 100e18\\n                );\\n            }\\n        }\\n\\n        emit EpochPerformancesSaved(epochId, isFinalised);\\n    }\\n\\n    /**\\n     * @notice Adds rewards for dlps\\n     */\\n    function addRewardForDlps() external payable override nonReentrant {\\n        totalDlpsRewardAmount += msg.value;\\n    }\\n\\n    /**\\n     * @notice Claims reward for a dlp until a specific epoch\\n     *\\n     * @param dlpId                         id of the dlp\\n     * @param lastEpochToClaim              epoch id\\n     */\\n    function claimRewardUntilEpoch(uint256 dlpId, uint256 lastEpochToClaim) external nonReentrant whenNotPaused {\\n        _claimRewardUntilEpoch(dlpId, lastEpochToClaim);\\n    }\\n\\n    /**\\n     * @notice Claims reward for a dlp until the current epoch\\n     *\\n     * @param dlpId                               dlp id\\n     */\\n    function claimReward(uint256 dlpId) external nonReentrant whenNotPaused {\\n        _claimRewardUntilEpoch(dlpId, epochsCount);\\n    }\\n\\n    /**\\n     * @notice Stakes Vana tokens for a DLP\\n     *\\n     * @param dlpId                               dlp id\\n     */\\n    function stake(uint256 dlpId) external payable override whenCurrentEpoch {\\n        _stake(msg.sender, dlpId, msg.value);\\n    }\\n\\n    /**\\n     * @notice Unstakes Vana tokens from a DLP\\n     *\\n     * @param dlpId                               dlp id\\n     * @param amount                              amount to unstake\\n     */\\n    function unstake(uint256 dlpId, uint256 amount) external override whenCurrentEpoch {\\n        if (\\n            amount >\\n            _dlps[dlpId].stakers[msg.sender].stakeAmountCheckpoints.upperLookup(\\n                SafeCast.toUint48(block.number > epochSize ? block.number - epochSize : 0)\\n            )\\n        ) {\\n            revert InvalidUnstakeAmount();\\n        }\\n\\n        Dlp storage dlp = _dlps[dlpId];\\n\\n        if (msg.sender == dlp.ownerAddress) {\\n            uint256 stakeAmount = _dlps[dlpId].stakers[msg.sender].stakeAmountCheckpoints.latest();\\n\\n            if (stakeAmount - amount < dlp.grantedAmount || stakeAmount - amount < minDlpStakeAmount) {\\n                revert InvalidUnstakeAmount();\\n            }\\n        }\\n\\n        _unstake(msg.sender, dlpId, amount);\\n    }\\n\\n    /**\\n     * @notice Stakes the stake for a DLP\\n     */\\n    function _stake(address stakerAddress, uint256 dlpId, uint256 amount) internal {\\n        Dlp storage dlp = _dlps[dlpId];\\n\\n        if (dlp.status != DlpStatus.Registered) {\\n            revert InvalidDlpStatus();\\n        }\\n\\n        Staker storage staker = _stakers[stakerAddress];\\n\\n        staker.dlpIds.add(dlpId);\\n\\n        _checkpointPush(dlp.stakeAmountCheckpoints, _add, amount);\\n        (uint224 pos, ) = _checkpointPush(dlp.stakers[stakerAddress].stakeAmountCheckpoints, _add, amount);\\n\\n        DlpStaker storage dlpStaker = dlp.stakers[stakerAddress];\\n\\n        if (pos == 0) {\\n            dlpStaker.lastClaimedEpochId = epochsCount;\\n        }\\n\\n        emit Staked(stakerAddress, dlpId, amount);\\n    }\\n\\n    /**\\n     * @notice Unstakes Vana tokens from a DLP\\n     */\\n    function _unstake(address stakerAddress, uint256 dlpId, uint256 amount) internal {\\n        Dlp storage dlp = _dlps[dlpId];\\n\\n        _checkpointPush(dlp.stakeAmountCheckpoints, _subtract, amount);\\n        _checkpointPush(dlp.stakers[stakerAddress].stakeAmountCheckpoints, _subtract, amount);\\n\\n        payable(stakerAddress).transfer(amount);\\n\\n        emit Unstaked(stakerAddress, dlpId, amount);\\n    }\\n\\n    /**\\n     * @notice Registers a dlp\\n     *\\n     * @param dlpAddress                   address of the dlp\\n     * @param dlpOwnerAddress              owner of the dlp\\n     * @param stakersPercentage            percentage of the rewards that will be distributed to the stakers\\n     * @param granted                      true if the stake is granted\\n     */\\n    function _registerDlp(\\n        address dlpAddress,\\n        address payable dlpOwnerAddress,\\n        uint256 stakersPercentage,\\n        bool granted\\n    ) internal {\\n        if (dlpIds[dlpAddress] != 0) {\\n            revert InvalidDlpStatus();\\n        }\\n\\n        if (stakersPercentage > 100e18) {\\n            revert InvalidStakersPercentage();\\n        }\\n\\n        dlpsCount++;\\n        Dlp storage dlp = _dlps[dlpsCount];\\n\\n        if (msg.value < minDlpStakeAmount) {\\n            revert InvalidStakeAmount();\\n        }\\n\\n        if (granted) {\\n            dlp.grantedAmount = msg.value;\\n        }\\n\\n        dlp.id = dlpsCount;\\n        dlp.ownerAddress = dlpOwnerAddress;\\n        dlp.dlpAddress = dlpAddress;\\n        dlp.status = DlpStatus.Registered;\\n        dlp.stakersPercentage = stakersPercentage;\\n\\n        dlpIds[dlpAddress] = dlpsCount;\\n\\n        _stake(dlpOwnerAddress, dlpsCount, msg.value);\\n\\n        _registeredDlps.add(dlpsCount);\\n\\n        emit DlpRegistered(dlpsCount, dlpAddress, dlpOwnerAddress);\\n    }\\n\\n    /**\\n     * @notice Claims reward for a dlp until a specific epoch\\n     *\\n     * @param dlpId                         id of the dlp\\n     * @param lastEpochToClaim              last epoch to claim\\n     */\\n    function _claimRewardUntilEpoch(uint256 dlpId, uint256 lastEpochToClaim) internal {\\n        DlpStaker storage dlpStaker = _dlps[dlpId].stakers[msg.sender];\\n\\n        uint256 rewardAmount;\\n        uint256 totalRewardAmount;\\n\\n        while (dlpStaker.lastClaimedEpochId < lastEpochToClaim) {\\n            Epoch storage epoch = _epochs[dlpStaker.lastClaimedEpochId + 1];\\n            EpochDlp storage epochDlp = epoch.dlps[dlpId];\\n\\n            if (!epoch.isFinalised) {\\n                break;\\n            }\\n\\n            dlpStaker.lastClaimedEpochId++;\\n\\n            rewardAmount = epochDlp.stakeAmount > 0\\n                ? (((dlpStaker.stakeAmountCheckpoints.upperLookup(SafeCast.toUint48(epoch.startBlock - 1)) *\\n                    epochDlp.rewardAmount) / epochDlp.stakeAmount) * epochDlp.stakersPercentage) / 100e18\\n                : 0;\\n\\n            if (rewardAmount == 0) {\\n                continue;\\n            }\\n\\n            dlpStaker.claimAmounts[dlpStaker.lastClaimedEpochId] = rewardAmount;\\n\\n            totalRewardAmount += rewardAmount;\\n\\n            emit StakerDlpEpochRewardClaimed(msg.sender, dlpId, dlpStaker.lastClaimedEpochId, rewardAmount);\\n        }\\n\\n        if (totalRewardAmount == 0) {\\n            revert NothingToClaim();\\n        }\\n\\n        payable(msg.sender).transfer(totalRewardAmount);\\n    }\\n\\n    function _checkpointPush(\\n        Checkpoints.Trace208 storage store,\\n        function(uint208, uint208) view returns (uint208) op,\\n        uint256 delta\\n    ) private returns (uint208, uint208) {\\n        return store.push(SafeCast.toUint48(block.number), op(store.latest(), SafeCast.toUint208(delta)));\\n    }\\n\\n    function _checkpointForcePush(\\n        Checkpoints.Trace208 storage store,\\n        uint256 delta\\n    ) private returns (uint208, uint208) {\\n        return store.push(SafeCast.toUint48(block.number), SafeCast.toUint208(delta));\\n    }\\n\\n    /**\\n     * @notice Creates epochs until a specific block number\\n     *\\n     * @param blockNumber             block number\\n     */\\n    function _createEpochsUntilBlockNumber(uint256 blockNumber) internal {\\n        Epoch storage lastEpoch = _epochs[epochsCount];\\n\\n        if (lastEpoch.endBlock > block.number) {\\n            return;\\n        }\\n\\n        uint256[] memory topDlps = topDlpIds(maxNumberOfDlps);\\n\\n        while (lastEpoch.endBlock < blockNumber) {\\n            epochsCount++;\\n\\n            Epoch storage newEpoch = _epochs[epochsCount];\\n\\n            newEpoch.startBlock = lastEpoch.endBlock + 1;\\n            newEpoch.endBlock = newEpoch.startBlock + epochSize - 1;\\n            newEpoch.rewardAmount = epochRewardAmount;\\n\\n            uint256 index;\\n            for (index = 0; index < topDlps.length; index++) {\\n                newEpoch.dlpIds.add(topDlps[index]);\\n                newEpoch.dlps[topDlps[index]].stakeAmount = _dlps[topDlps[index]].stakeAmountCheckpoints.upperLookup(\\n                    SafeCast.toUint48(lastEpoch.endBlock)\\n                );\\n                newEpoch.dlps[topDlps[index]].stakersPercentage = _dlps[topDlps[index]].stakersPercentage;\\n            }\\n\\n            lastEpoch = newEpoch;\\n\\n            emit EpochCreated(epochsCount);\\n        }\\n    }\\n\\n    function _add(uint208 a, uint208 b) private pure returns (uint208) {\\n        return a + b;\\n    }\\n\\n    function _subtract(uint208 a, uint208 b) private pure returns (uint208) {\\n        return a - b;\\n    }\\n}\\n\",\"keccak256\":\"0x98c8edd332b9db0fb411f775131dd0bd63466cface1a103c12045458b8cf2887\",\"license\":\"Apache-2.0\"},\"contracts/root/interfaces/DataLiquidityPoolsRootStorageV1.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.24;\\n\\nimport \\\"./IDataLiquidityPoolsRoot.sol\\\";\\n\\n/**`\\n * @title Storage for DataLiquidityPoolsRoot\\n * @notice For future upgrades, do not change DataLiquidityPoolsRootStorageV1. Create a new\\n * contract which implements DataLiquidityPoolsRootStorageV1\\n */\\nabstract contract DataLiquidityPoolsRootStorageV1 is IDataLiquidityPoolsRoot {\\n    uint256 public override maxNumberOfDlps;\\n    uint256 public override minDlpStakeAmount;\\n    uint256 public override totalDlpsRewardAmount;\\n    uint256 public override epochRewardAmount;\\n    uint256 public override epochSize;\\n\\n    uint256 public override ttfPercentage;\\n    uint256 public override tfcPercentage;\\n    uint256 public override vduPercentage;\\n    uint256 public override uwPercentage;\\n\\n    uint256 public override dlpsCount;\\n    mapping(uint256 dlpId => Dlp dlp) internal _dlps;\\n    mapping(address dlpAddress => uint256 dlpId) public override dlpIds;\\n\\n    EnumerableSet.UintSet internal _registeredDlps;\\n\\n    uint256 public override epochsCount;\\n    mapping(uint256 epochId => Epoch epoch) internal _epochs;\\n\\n    mapping(address stakerAddress => Staker staker) internal _stakers;\\n}\\n\",\"keccak256\":\"0x13879b0227f76e28b4bedfa69bc3e032a844419ed1a5dab4ee8de52be454817c\",\"license\":\"Apache-2.0\"},\"contracts/root/interfaces/IDataLiquidityPoolsRoot.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/Checkpoints.sol\\\";\\n\\ninterface IDataLiquidityPoolsRoot {\\n    enum DlpStatus {\\n        None,\\n        Registered,\\n        Deregistered\\n    }\\n\\n    struct EpochDlp {\\n        uint256 ttf; //Total Transactions Facilitated by the DLP\\n        uint256 tfc; //Total Transaction Fees (Gas Costs) Created by the DLP\\n        uint256 vdu; //Total Number of Verified Data Uploads to the DLP\\n        uint256 uw; //Unique Wallets that Interacted with the DLP\\n        uint256 stakeAmount;\\n        uint256 rewardAmount;\\n        uint256 stakersPercentage;\\n    }\\n\\n    struct Epoch {\\n        uint256 startBlock;\\n        uint256 endBlock;\\n        uint256 rewardAmount;\\n        EnumerableSet.UintSet dlpIds;\\n        bool isFinalised;\\n        mapping(uint256 dlpId => EpochDlp epochDlp) dlps;\\n    }\\n\\n    struct DlpStaker {\\n        uint256 lastClaimedEpochId;\\n        Checkpoints.Trace208 stakeAmountCheckpoints;\\n        mapping(uint256 epochId => uint256 claimAmount) claimAmounts;\\n    }\\n\\n    struct Dlp {\\n        uint256 id;\\n        address dlpAddress;\\n        address payable ownerAddress;\\n        DlpStatus status;\\n        uint256 registrationBlockNumber;\\n        uint256 stakersPercentage;\\n        uint256 grantedAmount;\\n        Checkpoints.Trace208 stakeAmountCheckpoints;\\n        mapping(address staker => DlpStaker dlpStaker) stakers;\\n    }\\n\\n    struct Staker {\\n        EnumerableSet.UintSet dlpIds;\\n    }\\n\\n    function version() external pure returns (uint256);\\n    function maxNumberOfDlps() external view returns (uint256);\\n    function epochSize() external view returns (uint256);\\n    function registeredDlps() external view returns (uint256[] memory);\\n    function epochsCount() external view returns (uint256);\\n    struct EpochInfo {\\n        uint256 startBlock;\\n        uint256 endBlock;\\n        uint256 reward;\\n        bool isFinalised;\\n        uint256[] dlpIds;\\n    }\\n    function epochs(uint256 epochId) external view returns (EpochInfo memory);\\n    function minDlpStakeAmount() external view returns (uint256);\\n    function totalDlpsRewardAmount() external view returns (uint256);\\n    function epochRewardAmount() external view returns (uint256);\\n    function ttfPercentage() external view returns (uint256);\\n    function tfcPercentage() external view returns (uint256);\\n    function vduPercentage() external view returns (uint256);\\n    function uwPercentage() external view returns (uint256);\\n    function dlpsCount() external view returns (uint256);\\n    struct DlpResponse {\\n        uint256 id;\\n        address dlpAddress;\\n        address ownerAddress;\\n        DlpStatus status;\\n        uint256 registrationBlockNumber;\\n        uint256 grantedAmount;\\n        uint256 stakersPercentage;\\n        uint256 stakeAmount;\\n    }\\n    function dlps(uint256 index) external view returns (DlpResponse memory);\\n    function dlpsByAddress(address dlpAddress) external view returns (DlpResponse memory);\\n    function dlpIds(address dlpAddress) external view returns (uint256);\\n    struct DlpEpochInfo {\\n        uint256 ttf; //Total Transactions Facilitated by the DLP\\n        uint256 tfc; //Total Transaction Fees (Gas Costs) Created by the DLP\\n        uint256 vdu; //Total Number of Verified Data Uploads to the DLP\\n        uint256 uw; //Unique Wallets that Interacted with the DLP\\n        uint256 stakeAmount;\\n        bool isTopDlp; //is in the top dlps list\\n        uint256 rewardAmount; // = 0 if isTopDlp is false or epoch is not finished\\n        uint256 stakersPercentage; // = 0 if isTopDlp is false\\n    }\\n    function dlpEpochs(uint256 dlpId, uint256 epochId) external view returns (DlpEpochInfo memory);\\n    struct StakerDlpInfo {\\n        uint256 dlpId;\\n        uint256 stakeAmount;\\n        uint256 lastClaimedEpochId;\\n    }\\n    function stakerDlpsListCount(address stakerAddress) external view returns (uint256);\\n    function stakerDlpsList(address stakerAddress) external view returns (StakerDlpInfo[] memory);\\n    function stakerDlps(address stakerAddress, uint256 dlpId) external view returns (StakerDlpInfo memory);\\n    struct StakerDlpEpochInfo {\\n        uint256 dlpId;\\n        uint256 epochId;\\n        uint256 stakeAmount; //stake amount at the start of the epoch\\n        uint256 rewardAmount; //reward amount at the end of the epoch\\n        uint256 claimAmount; //amount claimed by the staker\\n    }\\n    function stakerDlpEpochs(\\n        address stakerAddress,\\n        uint256 dlpId,\\n        uint256 epochId\\n    ) external view returns (StakerDlpEpochInfo memory);\\n    function topDlpIds(uint256 numberOfDlps) external returns (uint256[] memory);\\n    function claimableAmount(address stakerAddress, uint256 dlpId) external returns (uint256);\\n    function pause() external;\\n    function unpause() external;\\n    function updateMaxNumberOfDlps(uint256 newMaxNumberOfDlps) external;\\n    function updateEpochSize(uint256 newEpochSize) external;\\n    function updateEpochRewardAmount(uint256 newEpochRewardAmount) external;\\n    function updateMinDlpStakeAmount(uint256 newMinStakeAmount) external;\\n    function updatePerformancePercentages(\\n        uint256 newTtfPercentage,\\n        uint256 newTfcPercentage,\\n        uint256 newVduPercentage,\\n        uint256 newUwPercentage\\n    ) external;\\n    function createEpochs() external;\\n    function createEpochsUntilBlockNumber(uint256 blockNumber) external;\\n    function registerDlp(address dlpAddress, address payable ownerAddress, uint256 stakersPercentage) external payable;\\n    function registerDlpWithGrant(\\n        address dlpAddress,\\n        address payable ownerAddress,\\n        uint256 stakersPercentage\\n    ) external payable;\\n    function updateDlpStakersPercentage(uint256 dlpId, uint256 stakersPercentage) external;\\n    function deregisterDlp(uint256 dlpId) external;\\n    function distributeStakeAfterDeregistration(uint256 dlpId, uint256 dlpOwnerAmount) external;\\n    function addRewardForDlps() external payable;\\n    function claimRewardUntilEpoch(uint256 dlpId, uint256 lastEpochToClaim) external;\\n    function claimReward(uint256 dlpId) external;\\n    function stake(uint256 dlpId) external payable;\\n    function unstake(uint256 dlpId, uint256 amount) external;\\n    struct DlpPerformance {\\n        uint256 dlpId;\\n        uint256 ttf; //Total Transactions Facilitated by the DLP\\n        uint256 tfc; //Total Transaction Fees (Gas Costs) Created by the DLP\\n        uint256 vdu; //Total Number of Verified Data Uploads to the DLP\\n        uint256 uw; //Unique Wallets that Interacted with the DLP\\n    }\\n    function saveEpochPerformances(uint256 epochId, DlpPerformance[] memory dlpPerformances, bool isFinalised) external;\\n}\\n\",\"keccak256\":\"0x388b075849bfa9a2b505b59d9d4ed80a3723911c3c01a551f117881407fd58e5\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60a06040523060805234801561001457600080fd5b5060805161434261003e600039600081816129dc01528181612a050152612b4601526143426000f3fe6080604052600436106103355760003560e01c80638d8c658f116101ab578063c6b61e4c116100f7578063e7a6227611610095578063eaeb2ec81161006f578063eaeb2ec8146109a3578063f2fde38b146109c3578063fc492a08146109e3578063fd605f4e14610a0357600080fd5b8063e7a6227614610901578063e7ebaa6f14610963578063ea83e47b1461098357600080fd5b8063d3e14c32116100d1578063d3e14c32146108a3578063d4e01872146108b9578063da97013a146108d9578063e30c3978146108ec57600080fd5b8063c6b61e4c1461084d578063c70915931461087a578063ca4ab3a21461088d57600080fd5b8063a694fc3a11610164578063ae169a501161013e578063ae169a50146107ca578063b4fcea1d146107ea578063c06020b01461080a578063c22b9fd41461083757600080fd5b8063a694fc3a14610759578063a9d90f9b1461076c578063ad3cb1cc1461078c57600080fd5b80638d8c658f146106a05780638da5cb5b146106c0578063916e1c57146106ed5780639d3ce842146107035780639e2c8a5b14610719578063a4e9196a1461073957600080fd5b8063526fda59116102855780636b289f5b1161022357806376bc9869116101fd57806376bc98691461064157806379b8d9381461065657806379ba5097146106765780638456cb591461068b57600080fd5b80636b289f5b146105ec5780636f3414321461060c578063715018a61461062c57600080fd5b8063572d356e1161025f578063572d356e1461057057806357e04157146105865780635c975abb146105a657806368ed41ed146105d657600080fd5b8063526fda591461052757806352d1902d1461054757806354fd4d501461055c57600080fd5b80632ae51134116102f25780633f4ba83a116102cc5780633f4ba83a146104bc578063439b3756146104d15780634f1ef286146104fe57806351c144a41461051157600080fd5b80632ae51134146103ea57806334a2e4eb1461046d5780633f2f924f1461049a57600080fd5b806307813e061461033a57806308c451cb14610370578063132c58e9146103925780631430091c146103b6578063178f794d146103be5780632523ca7f146103d4575b600080fd5b34801561034657600080fd5b5061035a610355366004613b39565b610a23565b6040516103679190613b65565b60405180910390f35b34801561037c57600080fd5b5061039061038b366004613c2a565b610ac5565b005b34801561039e57600080fd5b506103a860035481565b604051908152602001610367565b610390610cfb565b3480156103ca57600080fd5b506103a860085481565b3480156103e057600080fd5b506103a860005481565b3480156103f657600080fd5b5061040a610405366004613cb8565b610d30565b6040516103679190600061010082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a0830151151560a083015260c083015160c083015260e083015160e083015292915050565b34801561047957600080fd5b5061048d610488366004613cda565b610e98565b6040516103679190613cf7565b3480156104a657600080fd5b506104af610ff3565b6040516103679190613d95565b3480156104c857600080fd5b50610390611004565b3480156104dd57600080fd5b506104f16104ec366004613cda565b611014565b6040516103679190613dbe565b61039061050c366004613e45565b61103e565b34801561051d57600080fd5b506103a860015481565b34801561053357600080fd5b50610390610542366004613eed565b61105d565b34801561055357600080fd5b506103a86110d6565b34801561056857600080fd5b5060016103a8565b34801561057c57600080fd5b506103a860045481565b34801561059257600080fd5b506103906105a1366004613f16565b6110f3565b3480156105b257600080fd5b506000805160206142cd8339815191525460ff166040519015158152602001610367565b3480156105e257600080fd5b506103a860095481565b3480156105f857600080fd5b50610390610607366004613eed565b61166d565b34801561061857600080fd5b50610390610627366004613cb8565b6116df565b34801561063857600080fd5b506103906118c5565b34801561064d57600080fd5b506103906118d7565b34801561066257600080fd5b506103a8610671366004613b39565b6118e0565b34801561068257600080fd5b506103906119f0565b34801561069757600080fd5b50610390611a3d565b3480156106ac57600080fd5b506104af6106bb366004613eed565b611a4d565b3480156106cc57600080fd5b506106d5611cec565b6040516001600160a01b039091168152602001610367565b3480156106f957600080fd5b506103a8600e5481565b34801561070f57600080fd5b506103a860065481565b34801561072557600080fd5b50610390610734366004613cb8565b611d21565b34801561074557600080fd5b50610390610754366004613eed565b611e6e565b610390610767366004613eed565b611eab565b34801561077857600080fd5b50610390610787366004613cb8565b611eeb565b34801561079857600080fd5b506107bd604051806040016040528060058152602001640352e302e360dc1b81525081565b604051610367919061403e565b3480156107d657600080fd5b506103906107e5366004613eed565b611f1c565b3480156107f657600080fd5b50610390610805366004613eed565b611f4f565b34801561081657600080fd5b506103a8610825366004613cda565b600b6020526000908152604090205481565b34801561084357600080fd5b506103a860075481565b34801561085957600080fd5b5061086d610868366004613eed565b6120e3565b6040516103679190614071565b6103906108883660046140be565b612178565b34801561089957600080fd5b506103a860025481565b3480156108af57600080fd5b506103a860055481565b3480156108c557600080fd5b506103906108d4366004613eed565b6121e1565b6103906108e73660046140be565b612253565b3480156108f857600080fd5b506106d56122a5565b34801561090d57600080fd5b5061092161091c3660046140ff565b6122ce565b6040516103679190600060a082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015292915050565b34801561096f57600080fd5b506103a861097e366004613cda565b61243b565b34801561098f57600080fd5b506104f161099e366004613eed565b61245c565b3480156109af57600080fd5b506103906109be366004613eed565b61250f565b3480156109cf57600080fd5b506103906109de366004613cda565b612525565b3480156109ef57600080fd5b506103906109fe366004614134565b6125aa565b348015610a0f57600080fd5b50610390610a1e366004613cb8565b612691565b610a4760405180606001604052806000815260200160008152602001600081525090565b604080516060810182528381526000848152600a60209081528382206001600160a01b038816835260070181529290209091820190610a889060010161277f565b6001600160d01b031681526000848152600a602090815260408083206001600160a01b038916845260070182529091205491015290505b92915050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff16600081158015610b0b5750825b905060008267ffffffffffffffff166001148015610b285750303b155b905081158015610b36575080155b15610b545760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff191660011785558315610b7e57845460ff60401b1916600160401b1785555b610b866127c6565b610b8e6127c6565b610b966127ce565b610b9e6127de565b60208601516000556040860151600155608086015160045560a086015160035560c0860151600581905560e0870151600681905561010088015160078190556101208901516008819055929091610bf49161417c565b610bfe919061417c565b610c08919061417c565b68056bc75e2d6310000014610c305760405163e2b5214560e01b815260040160405180910390fd5b60008052600f60205260608601517ff4803e074bd026baaf6ed2e288c9515f68c72fb7216eebdd7cae1718a53ec37590610c7690610c709060029061418f565b436127ee565b81556060870151610c899060019061418f565b60018083019190915560058201805460ff191690911790558651610cac90612804565b508315610cf357845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050565b610d0361283c565b3460026000828254610d15919061417c565b909155505060016000805160206142ed83398151915255565b565b610d7a604051806101000160405280600081526020016000815260200160008152602001600081526020016000815260200160001515815260200160008152602001600081525090565b6000828152600f6020818152604080842087855260068082018452828620835160e081018552815481526001808301548288019081526002840154838801908152600385015460608086019182526004870154608080880191909152600588015460a0880152969097015460c0860152885161010081018a52855181529251838b01529051978201979097529551938601939093529689905294909352549092830191610e4a91610e3391610e2e9161418f565b612888565b6000888152600a60205260409020600601906128bf565b6001600160d01b031681526000858152600f60209081526040909120910190610e76906003018761290a565b151581526020018260a0015181526020018260c0015181525091505092915050565b6001600160a01b0381166000908152601060205260408120606091610ebc82612922565b67ffffffffffffffff811115610ed457610ed4613b86565b604051908082528060200260200182016040528015610f2957816020015b610f1660405180606001604052806000815260200160008152602001600081525090565b815260200190600190039081610ef25790505b50905060005b610f3883612922565b811015610feb576000610f4b848361292c565b604080516060810182528281526000838152600a60209081528382206001600160a01b038c16835260070181529290209293509190820190610f8f9060010161277f565b6001600160d01b031681526000838152600a602090815260408083206001600160a01b038c1684526007018252909120549101528351849084908110610fd757610fd76141a2565b602090810291909101015250600101610f2f565b509392505050565b6060610fff600c612938565b905090565b61100c612945565b610d2e612977565b61101c613adf565b6001600160a01b0382166000908152600b6020526040902054610abf9061245c565b6110466129d1565b61104f82612a76565b6110598282612a7e565b5050565b611065612945565b600e546000908152600f602052604090206001015443111561109a576040516331bad64960e01b815260040160405180910390fd5b60008190556040518181527fad333ea03ce4e657f8ef5f2f2480d4165184eb4c94bc6011e3bab314bf7791b7906020015b60405180910390a150565b60006110e0612b3b565b506000805160206142ad83398151915290565b6110fb612945565b6111036118d7565b6000838152600f602052604081208054909103611133576040516333e7d47160e11b815260040160405180910390fd5b81156111b557600f600061114860018761418f565b815260208101919091526040016000206005015460ff1661117c5760405163c99e29b360e01b815260040160405180910390fd5b43816001015411156111a15760405163756b785760e01b815260040160405180910390fd5b60058101805460ff191660011790556111da565b43816001015410156111da57604051636bec07d760e11b815260040160405180910390fd5b6000848152600f60205260408120600301906111f582612922565b9050845181146112185760405163c21fe6bf60e01b815260040160405180910390fd5b600080805b8383101561141f5785600601600089858151811061123d5761123d6141a2565b6020026020010151600001518152602001908152602001600020915061128988848151811061126e5761126e6141a2565b6020026020010151600001518661290a90919063ffffffff16565b6112a65760405163b8e4b73960e01b815260040160405180910390fd5b8783815181106112b8576112b86141a2565b60200260200101516020015182600001819055508783815181106112de576112de6141a2565b6020026020010151604001518260010181905550878381518110611304576113046141a2565b602002602001015160600151826002018190555087838151811061132a5761132a6141a2565b6020026020010151608001518260030181905550600854888481518110611353576113536141a2565b60200260200101516080015161136991906141b8565b60075489858151811061137e5761137e6141a2565b60200260200101516060015161139491906141b8565b6006548a86815181106113a9576113a96141a2565b6020026020010151604001516113bf91906141b8565b6005548b87815181106113d4576113d46141a2565b6020026020010151602001516113ea91906141b8565b6113f4919061417c565b6113fe919061417c565b611408919061417c565b611412908261417c565b600190930192905061121d565b8060000361143257505050505050505050565b600092505b8383101561162757856006016000898581518110611457576114576141a2565b602002602001015160000151815260200190815260200160002091508086600201546008548a868151811061148e5761148e6141a2565b6020026020010151608001516114a491906141b8565b6007548b87815181106114b9576114b96141a2565b6020026020010151606001516114cf91906141b8565b6006548c88815181106114e4576114e46141a2565b6020026020010151604001516114fa91906141b8565b6005548d898151811061150f5761150f6141a2565b60200260200101516020015161152591906141b8565b61152f919061417c565b611539919061417c565b611543919061417c565b61154d91906141b8565b61155791906141cf565b6005830155868015611575575068056bc75e2d631000008260060154105b1561161c57600a6000898581518110611590576115906141a2565b6020908102919091018101515182528101919091526040016000206002015460068301546001600160a01b03909116906108fc9068056bc75e2d63100000906115d9908261418f565b85600501546115e891906141b8565b6115f291906141cf565b6040518115909202916000818181858888f1935050505015801561161a573d6000803e3d6000fd5b505b600190920191611437565b604080518a815288151560208201527f3c387ccbf64e52e42837a373a65ea10f0fc23678882ab5424891e8a9c824db48910160405180910390a15050505050505b505050565b600e546000908152600f60205260409020600101544311156116a2576040516331bad64960e01b815260040160405180910390fd5b6116aa612945565b60038190556040518181527f2fe8cb48ce95af273ee232223c3a0fbda25a65208753e99801ce508751f2b7fb906020016110cb565b6116e761283c565b600e546000908152600f602052604090206001015443111561171c576040516331bad64960e01b815260040160405180910390fd5b611724612945565b6000828152600a6020526040902060028082810154600160a01b900460ff169081111561175357611753613da8565b1461177157604051636e1ed6c560e11b815260040160405180910390fd5b60028101546001600160a01b03166000908152600782016020526040902061179b9060010161277f565b6001600160d01b03166000036117c45760405163cce553a960e01b815260040160405180910390fd5b81156118085760028101546040516001600160a01b039091169083156108fc029084906000818181858888f19350505050158015611806573d6000803e3d6000fd5b505b600082826005015461181a919061418f565b111561186e57611828611cec565b6001600160a01b03166108fc838360050154611844919061418f565b6040518115909202916000818181858888f1935050505015801561186c573d6000803e3d6000fd5b505b61187c816006016000612b84565b505060028101546001600160a01b0316600090815260078201602052604081206118ab91600190910190612b84565b50505061105960016000805160206142ed83398151915255565b6118cd612945565b610d2e6000612804565b610d2e43612baf565b6000818152600a602090815260408083206001600160a01b03861684526007019091528120805482905b600e548110156119e7578061191e816141f1565b6000818152600f602090815260408083208a84526006810190925290912060058201549294509092509060ff166119565750506119e7565b60008160040154116119695760006119d4565b68056bc75e2d631000008160060154826004015483600501546119a361199960018860000154610e2e919061418f565b60018b01906128bf565b6001600160d01b03166119b691906141b8565b6119c091906141cf565b6119ca91906141b8565b6119d491906141cf565b6119de908561417c565b9350505061190a565b50949350505050565b33806119fa6122a5565b6001600160a01b031614611a315760405163118cdaa760e01b81526001600160a01b03821660048201526024015b60405180910390fd5b611a3a81612804565b50565b611a45612945565b610d2e612dc5565b60606000611a5b600c612938565b8051909150611a6a84826127ee565b935060008467ffffffffffffffff811115611a8757611a87613b86565b604051908082528060200260200182016040528015611ab0578160200160208202803683370190505b50905084600003611ac357949350505050565b60008567ffffffffffffffff811115611ade57611ade613b86565b604051908082528060200260200182016040528015611b07578160200160208202803683370190505b50905060005b83811015611ce1576000858281518110611b2957611b296141a2565b602002602001015190506000611b53600a600084815260200190815260200160002060060161277f565b6001600160d01b031690508860005b8a811015611be157858181518110611b7c57611b7c6141a2565b6020026020010151831180611bcc5750858181518110611b9e57611b9e6141a2565b602002602001015183148015611bcc5750868181518110611bc157611bc16141a2565b602002602001015184105b15611bd957809150611be1565b600101611b62565b5089811015611cd6576000611bf760018c61418f565b90505b81811115611c965786611c0e60018361418f565b81518110611c1e57611c1e6141a2565b6020026020010151878281518110611c3857611c386141a2565b602090810291909101015285611c4f60018361418f565b81518110611c5f57611c5f6141a2565b6020026020010151868281518110611c7957611c796141a2565b602090810291909101015280611c8e8161420a565b915050611bfa565b5082868281518110611caa57611caa6141a2565b60200260200101818152505081858281518110611cc957611cc96141a2565b6020026020010181815250505b505050600101611b0d565b509095945050505050565b6000807f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c1993005b546001600160a01b031692915050565b600e546000908152600f6020526040902060010154431115611d56576040516331bad64960e01b815260040160405180910390fd5b611d9e611d796004544311611d6c576000612888565b600454610e2e904361418f565b6000848152600a602090815260408083203384526007019091529020600101906128bf565b6001600160d01b0316811115611dc7576040516314fea1a960e11b815260040160405180910390fd5b6000828152600a6020526040902060028101546001600160a01b03163303611e63576000838152600a602090815260408083203384526007019091528120611e119060010161277f565b6001600160d01b0316905081600501548382611e2d919061418f565b1080611e435750600154611e41848361418f565b105b15611e61576040516314fea1a960e11b815260040160405180910390fd5b505b611668338484612e0e565b611e76612945565b60018190556040518181527fe9a6d1b35cdb834e1d3cfe94b7199407fc9dbb6d64ba6c59b30295425d86d4c1906020016110cb565b600e546000908152600f6020526040902060010154431115611ee0576040516331bad64960e01b815260040160405180910390fd5b611a3a338234612edb565b611ef361283c565b611efb61300b565b611f05828261303c565b61105960016000805160206142ed83398151915255565b611f2461283c565b611f2c61300b565b611f3881600e5461303c565b611a3a60016000805160206142ed83398151915255565b6000818152600a602052604090206002015481906001600160a01b03163314611f8b57604051633387d70760e01b815260040160405180910390fd5b611f9361283c565b600e546000908152600f6020526040902060010154431115611fc8576040516331bad64960e01b815260040160405180910390fd5b6000828152600a602052604090206001600282810154600160a01b900460ff1690811115611ff857611ff8613da8565b1461201657604051636e1ed6c560e11b815260040160405180910390fd5b60028101805460ff60a01b1916600160a11b179055612036600c8461320c565b5060405183907fc3f4c6824ace066416e91f60e8762e0257019e0eb2e83afa4cdf62d23991e73990600090a2600581015460028201546001600160a01b0316600090815260078301602052604081209091906120949060010161277f565b6001600160d01b03166120a7919061418f565b905080156120ca57600282015482546120ca916001600160a01b03169083612e0e565b505061105960016000805160206142ed83398151915255565b6121176040518060a00160405280600081526020016000815260200160008152602001600015158152602001606081525090565b6040805160a0810182526000848152600f602081815284832080548552600181015482860152600281015495850195909552600585015460ff161515606085015291869052905290608082019061217090600301612938565b905292915050565b61218061300b565b61218861283c565b600e546000908152600f60205260409020600101544311156121bd576040516331bad64960e01b815260040160405180910390fd5b6121ca8383836000613218565b61166860016000805160206142ed83398151915255565b6121e9612945565b600e546000908152600f602052604090206001015443111561221e576040516331bad64960e01b815260040160405180910390fd5b60048190556040518181527f3cd59cf395448ba3bfd2541dcb31ccd800b9e303281df0888a62ae5d5f673f58906020016110cb565b61225b61300b565b61226361283c565b600e546000908152600f6020526040902060010154431115612298576040516331bad64960e01b815260040160405180910390fd5b6121ca8383836001613218565b6000807f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c00611d11565b6123006040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b6000828152600f60205260408120546123519061232390610e2e9060019061418f565b6000868152600a602090815260408083206001600160a01b038b1684526007019091529020600101906128bf565b6001600160d01b031690506000600f6000858152602001908152602001600020600601600086815260200190815260200160002090506040518060a0016040528086815260200185815260200183815260200160008360040154116123b75760006123f9565b82600401548468056bc75e2d63100000856006015486600501546123db91906141b8565b6123e591906141cf565b6123ef91906141b8565b6123f991906141cf565b81526000878152600a602090815260408083206001600160a01b038c1684526007018252808320898452600201825290912054910152925050505b9392505050565b6001600160a01b0381166000908152601060205260408120610abf90612922565b612464613adf565b6000828152600a60209081526040918290208251610100810184528154815260018201546001600160a01b039081169382019390935260028083015493841694820194909452909290916060830191600160a01b90910460ff16908111156124ce576124ce613da8565b81526020018260030154815260200182600501548152602001826004015481526020016124fd8360060161277f565b6001600160d01b031690529392505050565b611a3a43821061251f5743612baf565b81612baf565b61252d612945565b7f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c0080546001600160a01b0319166001600160a01b0383169081178255612571611cec565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a35050565b6125b2612945565b600e546000908152600f60205260409020600101544311156125e7576040516331bad64960e01b815260040160405180910390fd5b80826125f3858761417c565b6125fd919061417c565b612607919061417c565b68056bc75e2d631000001461262f5760405163e2b5214560e01b815260040160405180910390fd5b60058490556006839055600782905560088190556040805185815260208101859052908101839052606081018290527f9fed7ac1282e0ba1555a16ba3a71b4db07d3740cc71e611b077b581d1ad87c0b9060800160405180910390a150505050565b6000828152600a602052604090206002015482906001600160a01b031633146126cd57604051633387d70760e01b815260040160405180910390fd5b600e546000908152600f6020526040902060010154431115612702576040516331bad64960e01b815260040160405180910390fd5b68056bc75e2d6310000082111561272c5760405163d1be20e560e01b815260040160405180910390fd5b6000838152600a602090815260409182902060040184905581518581529081018490527fdc7c1eb84b8e606e429c65b5053a00111db03437dbbad386aa5c2cb0ea19d84d910160405180910390a1505050565b805460009080156127bd576127a78361279960018461418f565b600091825260209091200190565b54600160301b90046001600160d01b0316612434565b60009392505050565b610d2e61339a565b6127d661339a565b610d2e6133e3565b6127e661339a565b610d2e6133eb565b60008183106127fd5781612434565b5090919050565b7f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c0080546001600160a01b03191681556110598261340c565b6000805160206142ed83398151915280546001190161286e57604051633ee5aeb560e01b815260040160405180910390fd5b60029055565b60016000805160206142ed83398151915255565b600065ffffffffffff8211156128bb576040516306dfcc6560e41b81526030600482015260248101839052604401611a28565b5090565b8154600090816128d18585838561347d565b905080156128fe576128e88561279960018461418f565b54600160301b90046001600160d01b0316612901565b60005b95945050505050565b60008181526001830160205260408120541515612434565b6000610abf825490565b600061243483836134d7565b6060600061243483613501565b3361294e611cec565b6001600160a01b031614610d2e5760405163118cdaa760e01b8152336004820152602401611a28565b61297f61355d565b6000805160206142cd833981519152805460ff191681557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b0390911681526020016110cb565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480612a5857507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316612a4c6000805160206142ad833981519152546001600160a01b031690565b6001600160a01b031614155b15610d2e5760405163703e46dd60e11b815260040160405180910390fd5b611a3a612945565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015612ad8575060408051601f3d908101601f19168201909252612ad591810190614221565b60015b612b0057604051634c9c8ce360e01b81526001600160a01b0383166004820152602401611a28565b6000805160206142ad8339815191528114612b3157604051632a87526960e21b815260048101829052602401611a28565b611668838361358d565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610d2e5760405163703e46dd60e11b815260040160405180910390fd5b600080612ba4612b9343612888565b612b9c856135e3565b869190613617565b915091509250929050565b600e546000908152600f602052604090206001810154431015612bd0575050565b6000612bdd600054611a4d565b90505b828260010154101561166857600e8054906000612bfc836141f1565b9091555050600e546000908152600f60205260409020600180840154612c219161417c565b808255600454600191612c34919061417c565b612c3e919061418f565b6001820155600354600282015560005b8251811015612d8057612c86838281518110612c6c57612c6c6141a2565b60200260200101518360030161363290919063ffffffff16565b50612cd4612c978560010154612888565b600a6000868581518110612cad57612cad6141a2565b602002602001015181526020019081526020016000206006016128bf90919063ffffffff16565b6001600160d01b0316826006016000858481518110612cf557612cf56141a2565b6020026020010151815260200190815260200160002060040181905550600a6000848381518110612d2857612d286141a2565b6020026020010151815260200190815260200160002060040154826006016000858481518110612d5a57612d5a6141a2565b602090810291909101810151825281019190915260400160002060060155600101612c4e565b8193507f0129593a287c7be892e56181ff1238eb466a2c952dc53a3029140d1f3ddc4a8d600e54604051612db691815260200190565b60405180910390a15050612be0565b612dcd61300b565b6000805160206142cd833981519152805460ff191660011781557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258336129b9565b6000828152600a60205260409020612e2c6006820161363e8461364a565b50506001600160a01b03841660009081526007820160205260409020612e589060010161363e8461364a565b50506040516001600160a01b0385169083156108fc029084906000818181858888f19350505050158015612e90573d6000803e3d6000fd5b5082846001600160a01b03167f7fc4727e062e336010f2c282598ef5f14facb3de68cf8195c2f23e1454b2b74e84604051612ecd91815260200190565b60405180910390a350505050565b6000828152600a602052604090206001600282810154600160a01b900460ff1690811115612f0b57612f0b613da8565b14612f2957604051636e1ed6c560e11b815260040160405180910390fd5b6001600160a01b0384166000908152601060205260409020612f4b8185613632565b50612f5c8260060161367f8561364a565b50506001600160a01b03851660009081526007830160205260408120612f889060010161367f8661364a565b506001600160a01b038716600090815260078501602052604081206001600160d01b03929092169250829003612fbe57600e5481555b85876001600160a01b03167f1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee9087604051612ffa91815260200190565b60405180910390a350505050505050565b6000805160206142cd8339815191525460ff1615610d2e5760405163d93c066560e01b815260040160405180910390fd5b6000828152600a60209081526040808320338452600701909152812090805b82548411156131be576000600f60008560000154600161307b919061417c565b815260208082019290925260409081016000908120898252600681019093522060058201549192509060ff166130b25750506131be565b84548560006130c0836141f1565b919050555060008160040154116130d8576000613139565b68056bc75e2d6310000081600601548260040154836005015461310861199960018860000154610e2e919061418f565b6001600160d01b031661311b91906141b8565b61312591906141cf565b61312f91906141b8565b61313991906141cf565b93508360000361314a57505061305b565b845460009081526002860160205260409020849055613169848461417c565b855460408051338152602081018b905290810191909152606081018690529093507f4952128cd80b7e898bd01cdbeef5d50f236e06f3e18d6961eed5ad968aca61ad9060800160405180910390a1505061305b565b806000036131df576040516312d37ee560e31b815260040160405180910390fd5b604051339082156108fc029083906000818181858888f19350505050158015610cf3573d6000803e3d6000fd5b6000612434838361368b565b6001600160a01b0384166000908152600b60205260409020541561324f57604051636e1ed6c560e11b815260040160405180910390fd5b68056bc75e2d631000008211156132795760405163d1be20e560e01b815260040160405180910390fd5b60098054906000613289836141f1565b90915550506009546000908152600a602052604090206001543410156132c257604051630103be3b60e21b815260040160405180910390fd5b81156132cf573460058201555b6009805482556002820180546001840180546001600160a01b038a81166001600160a01b031990921682179092559088166001600160a81b031990921691909117600160a01b179091556004830185905590546000918252600b602052604090912081905561334090859034612edb565b60095461334f90600c90613632565b50836001600160a01b0316856001600160a01b03166009547fe5c2985d22a121f4f7b534ee3a7ab105a620e670bb02f5d1188e20a8670f401e60405160405180910390a45050505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff16610d2e57604051631afcd79f60e31b815260040160405180910390fd5b61287461339a565b6133f361339a565b6000805160206142cd833981519152805460ff19169055565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b60005b81831015610feb5760006134948484613785565b60008781526020902090915065ffffffffffff86169082015465ffffffffffff1611156134c3578092506134d1565b6134ce81600161417c565b93505b50613480565b60008260000182815481106134ee576134ee6141a2565b9060005260206000200154905092915050565b60608160000180548060200260200160405190810160405280929190818152602001828054801561355157602002820191906000526020600020905b81548152602001906001019080831161353d575b50505050509050919050565b6000805160206142cd8339815191525460ff16610d2e57604051638dfc202b60e01b815260040160405180910390fd5b613596826137a0565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a28051156135db576116688282613805565b611059613872565b60006001600160d01b038211156128bb576040516306dfcc6560e41b815260d0600482015260248101839052604401611a28565b600080613625858585613891565b915091505b935093915050565b60006124348383613a0b565b6000612434828461423a565b60008061362561365943612888565b6136776136658861277f565b61366e876135e3565b8863ffffffff16565b879190613617565b6000612434828461425a565b600081815260018301602052604081205480156137745760006136af60018361418f565b85549091506000906136c39060019061418f565b90508082146137285760008660000182815481106136e3576136e36141a2565b9060005260206000200154905080876000018481548110613706576137066141a2565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806137395761373961427a565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610abf565b6000915050610abf565b5092915050565b600061379460028484186141cf565b6124349084841661417c565b806001600160a01b03163b6000036137d657604051634c9c8ce360e01b81526001600160a01b0382166004820152602401611a28565b6000805160206142ad83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b0316846040516138229190614290565b600060405180830381855af49150503d806000811461385d576040519150601f19603f3d011682016040523d82523d6000602084013e613862565b606091505b5091509150612901858383613a5a565b3415610d2e5760405163b398979f60e01b815260040160405180910390fd5b8254600090819080156139b05760006138af8761279960018561418f565b60408051808201909152905465ffffffffffff808216808452600160301b9092046001600160d01b03166020840152919250908716101561390357604051632520601d60e01b815260040160405180910390fd5b805165ffffffffffff80881691160361394f57846139268861279960018661418f565b80546001600160d01b0392909216600160301b0265ffffffffffff9092169190911790556139a0565b6040805180820190915265ffffffffffff80881682526001600160d01b0380881660208085019182528b54600181018d5560008d81529190912094519151909216600160301b029216919091179101555b60200151925083915061362a9050565b50506040805180820190915265ffffffffffff80851682526001600160d01b0380851660208085019182528854600181018a5560008a815291822095519251909316600160301b02919093161792019190915590508161362a565b6000818152600183016020526040812054613a5257508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610abf565b506000610abf565b606082613a6f57613a6a82613ab6565b612434565b8151158015613a8657506001600160a01b0384163b155b15613aaf57604051639996b31560e01b81526001600160a01b0385166004820152602401611a28565b5080612434565b805115613ac65780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b60408051610100810182526000808252602082018190529181018290529060608201908152602001600081526020016000815260200160008152602001600081525090565b6001600160a01b0381168114611a3a57600080fd5b60008060408385031215613b4c57600080fd5b8235613b5781613b24565b946020939093013593505050565b81518152602080830151908201526040808301519082015260608101610abf565b634e487b7160e01b600052604160045260246000fd5b604051610140810167ffffffffffffffff81118282101715613bc057613bc0613b86565b60405290565b60405160a0810167ffffffffffffffff81118282101715613bc057613bc0613b86565b604051601f8201601f1916810167ffffffffffffffff81118282101715613c1257613c12613b86565b604052919050565b8035613c2581613b24565b919050565b60006101408284031215613c3d57600080fd5b613c45613b9c565b613c4e83613c1a565b81526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c082015260e083013560e08201526101008084013581830152506101208084013581830152508091505092915050565b60008060408385031215613ccb57600080fd5b50508035926020909101359150565b600060208284031215613cec57600080fd5b813561243481613b24565b6020808252825182820181905260009190848201906040850190845b81811015613d4d57613d3a8385518051825260208082015190830152604090810151910152565b9284019260609290920191600101613d13565b50909695505050505050565b60008151808452602080850194506020840160005b83811015613d8a57815187529582019590820190600101613d6e565b509495945050505050565b6020815260006124346020830184613d59565b634e487b7160e01b600052602160045260246000fd5b815181526020808301516001600160a01b039081169183019190915260408084015190911690820152606082015161010082019060038110613e1057634e487b7160e01b600052602160045260246000fd5b806060840152506080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015292915050565b60008060408385031215613e5857600080fd5b8235613e6381613b24565b915060208381013567ffffffffffffffff80821115613e8157600080fd5b818601915086601f830112613e9557600080fd5b813581811115613ea757613ea7613b86565b613eb9601f8201601f19168501613be9565b91508082528784828501011115613ecf57600080fd5b80848401858401376000848284010152508093505050509250929050565b600060208284031215613eff57600080fd5b5035919050565b80358015158114613c2557600080fd5b60008060006060808587031215613f2c57600080fd5b8435935060208086013567ffffffffffffffff80821115613f4c57600080fd5b818801915088601f830112613f6057600080fd5b813581811115613f7257613f72613b86565b613f80848260051b01613be9565b818152848101925060a091820284018501918b831115613f9f57600080fd5b938501935b82851015613ffb5780858d031215613fbc5760008081fd5b613fc4613bc6565b8535815286860135878201526040808701359082015287860135888201526080808701359082015284529384019392850192613fa4565b5080975050505050505061401160408501613f06565b90509250925092565b60005b8381101561403557818101518382015260200161401d565b50506000910152565b602081526000825180602084015261405d81604085016020870161401a565b601f01601f19169190910160400192915050565b602081528151602082015260208201516040820152604082015160608201526060820151151560808201526000608083015160a0808401526140b660c0840182613d59565b949350505050565b6000806000606084860312156140d357600080fd5b83356140de81613b24565b925060208401356140ee81613b24565b929592945050506040919091013590565b60008060006060848603121561411457600080fd5b833561411f81613b24565b95602085013595506040909401359392505050565b6000806000806080858703121561414a57600080fd5b5050823594602084013594506040840135936060013592509050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610abf57610abf614166565b81810381811115610abf57610abf614166565b634e487b7160e01b600052603260045260246000fd5b8082028115828204841417610abf57610abf614166565b6000826141ec57634e487b7160e01b600052601260045260246000fd5b500490565b60006001820161420357614203614166565b5060010190565b60008161421957614219614166565b506000190190565b60006020828403121561423357600080fd5b5051919050565b6001600160d01b0382811682821603908082111561377e5761377e614166565b6001600160d01b0381811683821601908082111561377e5761377e614166565b634e487b7160e01b600052603160045260246000fd5b600082516142a281846020870161401a565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbccd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f033009b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00a26469706673582212209c73d8ce1f059b20807dc076c2144810f81b5c9425d1256f0d28ae2ae959704364736f6c63430008180033",
  "deployedBytecode": "0x6080604052600436106103355760003560e01c80638d8c658f116101ab578063c6b61e4c116100f7578063e7a6227611610095578063eaeb2ec81161006f578063eaeb2ec8146109a3578063f2fde38b146109c3578063fc492a08146109e3578063fd605f4e14610a0357600080fd5b8063e7a6227614610901578063e7ebaa6f14610963578063ea83e47b1461098357600080fd5b8063d3e14c32116100d1578063d3e14c32146108a3578063d4e01872146108b9578063da97013a146108d9578063e30c3978146108ec57600080fd5b8063c6b61e4c1461084d578063c70915931461087a578063ca4ab3a21461088d57600080fd5b8063a694fc3a11610164578063ae169a501161013e578063ae169a50146107ca578063b4fcea1d146107ea578063c06020b01461080a578063c22b9fd41461083757600080fd5b8063a694fc3a14610759578063a9d90f9b1461076c578063ad3cb1cc1461078c57600080fd5b80638d8c658f146106a05780638da5cb5b146106c0578063916e1c57146106ed5780639d3ce842146107035780639e2c8a5b14610719578063a4e9196a1461073957600080fd5b8063526fda59116102855780636b289f5b1161022357806376bc9869116101fd57806376bc98691461064157806379b8d9381461065657806379ba5097146106765780638456cb591461068b57600080fd5b80636b289f5b146105ec5780636f3414321461060c578063715018a61461062c57600080fd5b8063572d356e1161025f578063572d356e1461057057806357e04157146105865780635c975abb146105a657806368ed41ed146105d657600080fd5b8063526fda591461052757806352d1902d1461054757806354fd4d501461055c57600080fd5b80632ae51134116102f25780633f4ba83a116102cc5780633f4ba83a146104bc578063439b3756146104d15780634f1ef286146104fe57806351c144a41461051157600080fd5b80632ae51134146103ea57806334a2e4eb1461046d5780633f2f924f1461049a57600080fd5b806307813e061461033a57806308c451cb14610370578063132c58e9146103925780631430091c146103b6578063178f794d146103be5780632523ca7f146103d4575b600080fd5b34801561034657600080fd5b5061035a610355366004613b39565b610a23565b6040516103679190613b65565b60405180910390f35b34801561037c57600080fd5b5061039061038b366004613c2a565b610ac5565b005b34801561039e57600080fd5b506103a860035481565b604051908152602001610367565b610390610cfb565b3480156103ca57600080fd5b506103a860085481565b3480156103e057600080fd5b506103a860005481565b3480156103f657600080fd5b5061040a610405366004613cb8565b610d30565b6040516103679190600061010082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a0830151151560a083015260c083015160c083015260e083015160e083015292915050565b34801561047957600080fd5b5061048d610488366004613cda565b610e98565b6040516103679190613cf7565b3480156104a657600080fd5b506104af610ff3565b6040516103679190613d95565b3480156104c857600080fd5b50610390611004565b3480156104dd57600080fd5b506104f16104ec366004613cda565b611014565b6040516103679190613dbe565b61039061050c366004613e45565b61103e565b34801561051d57600080fd5b506103a860015481565b34801561053357600080fd5b50610390610542366004613eed565b61105d565b34801561055357600080fd5b506103a86110d6565b34801561056857600080fd5b5060016103a8565b34801561057c57600080fd5b506103a860045481565b34801561059257600080fd5b506103906105a1366004613f16565b6110f3565b3480156105b257600080fd5b506000805160206142cd8339815191525460ff166040519015158152602001610367565b3480156105e257600080fd5b506103a860095481565b3480156105f857600080fd5b50610390610607366004613eed565b61166d565b34801561061857600080fd5b50610390610627366004613cb8565b6116df565b34801561063857600080fd5b506103906118c5565b34801561064d57600080fd5b506103906118d7565b34801561066257600080fd5b506103a8610671366004613b39565b6118e0565b34801561068257600080fd5b506103906119f0565b34801561069757600080fd5b50610390611a3d565b3480156106ac57600080fd5b506104af6106bb366004613eed565b611a4d565b3480156106cc57600080fd5b506106d5611cec565b6040516001600160a01b039091168152602001610367565b3480156106f957600080fd5b506103a8600e5481565b34801561070f57600080fd5b506103a860065481565b34801561072557600080fd5b50610390610734366004613cb8565b611d21565b34801561074557600080fd5b50610390610754366004613eed565b611e6e565b610390610767366004613eed565b611eab565b34801561077857600080fd5b50610390610787366004613cb8565b611eeb565b34801561079857600080fd5b506107bd604051806040016040528060058152602001640352e302e360dc1b81525081565b604051610367919061403e565b3480156107d657600080fd5b506103906107e5366004613eed565b611f1c565b3480156107f657600080fd5b50610390610805366004613eed565b611f4f565b34801561081657600080fd5b506103a8610825366004613cda565b600b6020526000908152604090205481565b34801561084357600080fd5b506103a860075481565b34801561085957600080fd5b5061086d610868366004613eed565b6120e3565b6040516103679190614071565b6103906108883660046140be565b612178565b34801561089957600080fd5b506103a860025481565b3480156108af57600080fd5b506103a860055481565b3480156108c557600080fd5b506103906108d4366004613eed565b6121e1565b6103906108e73660046140be565b612253565b3480156108f857600080fd5b506106d56122a5565b34801561090d57600080fd5b5061092161091c3660046140ff565b6122ce565b6040516103679190600060a082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015292915050565b34801561096f57600080fd5b506103a861097e366004613cda565b61243b565b34801561098f57600080fd5b506104f161099e366004613eed565b61245c565b3480156109af57600080fd5b506103906109be366004613eed565b61250f565b3480156109cf57600080fd5b506103906109de366004613cda565b612525565b3480156109ef57600080fd5b506103906109fe366004614134565b6125aa565b348015610a0f57600080fd5b50610390610a1e366004613cb8565b612691565b610a4760405180606001604052806000815260200160008152602001600081525090565b604080516060810182528381526000848152600a60209081528382206001600160a01b038816835260070181529290209091820190610a889060010161277f565b6001600160d01b031681526000848152600a602090815260408083206001600160a01b038916845260070182529091205491015290505b92915050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff16600081158015610b0b5750825b905060008267ffffffffffffffff166001148015610b285750303b155b905081158015610b36575080155b15610b545760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff191660011785558315610b7e57845460ff60401b1916600160401b1785555b610b866127c6565b610b8e6127c6565b610b966127ce565b610b9e6127de565b60208601516000556040860151600155608086015160045560a086015160035560c0860151600581905560e0870151600681905561010088015160078190556101208901516008819055929091610bf49161417c565b610bfe919061417c565b610c08919061417c565b68056bc75e2d6310000014610c305760405163e2b5214560e01b815260040160405180910390fd5b60008052600f60205260608601517ff4803e074bd026baaf6ed2e288c9515f68c72fb7216eebdd7cae1718a53ec37590610c7690610c709060029061418f565b436127ee565b81556060870151610c899060019061418f565b60018083019190915560058201805460ff191690911790558651610cac90612804565b508315610cf357845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050565b610d0361283c565b3460026000828254610d15919061417c565b909155505060016000805160206142ed83398151915255565b565b610d7a604051806101000160405280600081526020016000815260200160008152602001600081526020016000815260200160001515815260200160008152602001600081525090565b6000828152600f6020818152604080842087855260068082018452828620835160e081018552815481526001808301548288019081526002840154838801908152600385015460608086019182526004870154608080880191909152600588015460a0880152969097015460c0860152885161010081018a52855181529251838b01529051978201979097529551938601939093529689905294909352549092830191610e4a91610e3391610e2e9161418f565b612888565b6000888152600a60205260409020600601906128bf565b6001600160d01b031681526000858152600f60209081526040909120910190610e76906003018761290a565b151581526020018260a0015181526020018260c0015181525091505092915050565b6001600160a01b0381166000908152601060205260408120606091610ebc82612922565b67ffffffffffffffff811115610ed457610ed4613b86565b604051908082528060200260200182016040528015610f2957816020015b610f1660405180606001604052806000815260200160008152602001600081525090565b815260200190600190039081610ef25790505b50905060005b610f3883612922565b811015610feb576000610f4b848361292c565b604080516060810182528281526000838152600a60209081528382206001600160a01b038c16835260070181529290209293509190820190610f8f9060010161277f565b6001600160d01b031681526000838152600a602090815260408083206001600160a01b038c1684526007018252909120549101528351849084908110610fd757610fd76141a2565b602090810291909101015250600101610f2f565b509392505050565b6060610fff600c612938565b905090565b61100c612945565b610d2e612977565b61101c613adf565b6001600160a01b0382166000908152600b6020526040902054610abf9061245c565b6110466129d1565b61104f82612a76565b6110598282612a7e565b5050565b611065612945565b600e546000908152600f602052604090206001015443111561109a576040516331bad64960e01b815260040160405180910390fd5b60008190556040518181527fad333ea03ce4e657f8ef5f2f2480d4165184eb4c94bc6011e3bab314bf7791b7906020015b60405180910390a150565b60006110e0612b3b565b506000805160206142ad83398151915290565b6110fb612945565b6111036118d7565b6000838152600f602052604081208054909103611133576040516333e7d47160e11b815260040160405180910390fd5b81156111b557600f600061114860018761418f565b815260208101919091526040016000206005015460ff1661117c5760405163c99e29b360e01b815260040160405180910390fd5b43816001015411156111a15760405163756b785760e01b815260040160405180910390fd5b60058101805460ff191660011790556111da565b43816001015410156111da57604051636bec07d760e11b815260040160405180910390fd5b6000848152600f60205260408120600301906111f582612922565b9050845181146112185760405163c21fe6bf60e01b815260040160405180910390fd5b600080805b8383101561141f5785600601600089858151811061123d5761123d6141a2565b6020026020010151600001518152602001908152602001600020915061128988848151811061126e5761126e6141a2565b6020026020010151600001518661290a90919063ffffffff16565b6112a65760405163b8e4b73960e01b815260040160405180910390fd5b8783815181106112b8576112b86141a2565b60200260200101516020015182600001819055508783815181106112de576112de6141a2565b6020026020010151604001518260010181905550878381518110611304576113046141a2565b602002602001015160600151826002018190555087838151811061132a5761132a6141a2565b6020026020010151608001518260030181905550600854888481518110611353576113536141a2565b60200260200101516080015161136991906141b8565b60075489858151811061137e5761137e6141a2565b60200260200101516060015161139491906141b8565b6006548a86815181106113a9576113a96141a2565b6020026020010151604001516113bf91906141b8565b6005548b87815181106113d4576113d46141a2565b6020026020010151602001516113ea91906141b8565b6113f4919061417c565b6113fe919061417c565b611408919061417c565b611412908261417c565b600190930192905061121d565b8060000361143257505050505050505050565b600092505b8383101561162757856006016000898581518110611457576114576141a2565b602002602001015160000151815260200190815260200160002091508086600201546008548a868151811061148e5761148e6141a2565b6020026020010151608001516114a491906141b8565b6007548b87815181106114b9576114b96141a2565b6020026020010151606001516114cf91906141b8565b6006548c88815181106114e4576114e46141a2565b6020026020010151604001516114fa91906141b8565b6005548d898151811061150f5761150f6141a2565b60200260200101516020015161152591906141b8565b61152f919061417c565b611539919061417c565b611543919061417c565b61154d91906141b8565b61155791906141cf565b6005830155868015611575575068056bc75e2d631000008260060154105b1561161c57600a6000898581518110611590576115906141a2565b6020908102919091018101515182528101919091526040016000206002015460068301546001600160a01b03909116906108fc9068056bc75e2d63100000906115d9908261418f565b85600501546115e891906141b8565b6115f291906141cf565b6040518115909202916000818181858888f1935050505015801561161a573d6000803e3d6000fd5b505b600190920191611437565b604080518a815288151560208201527f3c387ccbf64e52e42837a373a65ea10f0fc23678882ab5424891e8a9c824db48910160405180910390a15050505050505b505050565b600e546000908152600f60205260409020600101544311156116a2576040516331bad64960e01b815260040160405180910390fd5b6116aa612945565b60038190556040518181527f2fe8cb48ce95af273ee232223c3a0fbda25a65208753e99801ce508751f2b7fb906020016110cb565b6116e761283c565b600e546000908152600f602052604090206001015443111561171c576040516331bad64960e01b815260040160405180910390fd5b611724612945565b6000828152600a6020526040902060028082810154600160a01b900460ff169081111561175357611753613da8565b1461177157604051636e1ed6c560e11b815260040160405180910390fd5b60028101546001600160a01b03166000908152600782016020526040902061179b9060010161277f565b6001600160d01b03166000036117c45760405163cce553a960e01b815260040160405180910390fd5b81156118085760028101546040516001600160a01b039091169083156108fc029084906000818181858888f19350505050158015611806573d6000803e3d6000fd5b505b600082826005015461181a919061418f565b111561186e57611828611cec565b6001600160a01b03166108fc838360050154611844919061418f565b6040518115909202916000818181858888f1935050505015801561186c573d6000803e3d6000fd5b505b61187c816006016000612b84565b505060028101546001600160a01b0316600090815260078201602052604081206118ab91600190910190612b84565b50505061105960016000805160206142ed83398151915255565b6118cd612945565b610d2e6000612804565b610d2e43612baf565b6000818152600a602090815260408083206001600160a01b03861684526007019091528120805482905b600e548110156119e7578061191e816141f1565b6000818152600f602090815260408083208a84526006810190925290912060058201549294509092509060ff166119565750506119e7565b60008160040154116119695760006119d4565b68056bc75e2d631000008160060154826004015483600501546119a361199960018860000154610e2e919061418f565b60018b01906128bf565b6001600160d01b03166119b691906141b8565b6119c091906141cf565b6119ca91906141b8565b6119d491906141cf565b6119de908561417c565b9350505061190a565b50949350505050565b33806119fa6122a5565b6001600160a01b031614611a315760405163118cdaa760e01b81526001600160a01b03821660048201526024015b60405180910390fd5b611a3a81612804565b50565b611a45612945565b610d2e612dc5565b60606000611a5b600c612938565b8051909150611a6a84826127ee565b935060008467ffffffffffffffff811115611a8757611a87613b86565b604051908082528060200260200182016040528015611ab0578160200160208202803683370190505b50905084600003611ac357949350505050565b60008567ffffffffffffffff811115611ade57611ade613b86565b604051908082528060200260200182016040528015611b07578160200160208202803683370190505b50905060005b83811015611ce1576000858281518110611b2957611b296141a2565b602002602001015190506000611b53600a600084815260200190815260200160002060060161277f565b6001600160d01b031690508860005b8a811015611be157858181518110611b7c57611b7c6141a2565b6020026020010151831180611bcc5750858181518110611b9e57611b9e6141a2565b602002602001015183148015611bcc5750868181518110611bc157611bc16141a2565b602002602001015184105b15611bd957809150611be1565b600101611b62565b5089811015611cd6576000611bf760018c61418f565b90505b81811115611c965786611c0e60018361418f565b81518110611c1e57611c1e6141a2565b6020026020010151878281518110611c3857611c386141a2565b602090810291909101015285611c4f60018361418f565b81518110611c5f57611c5f6141a2565b6020026020010151868281518110611c7957611c796141a2565b602090810291909101015280611c8e8161420a565b915050611bfa565b5082868281518110611caa57611caa6141a2565b60200260200101818152505081858281518110611cc957611cc96141a2565b6020026020010181815250505b505050600101611b0d565b509095945050505050565b6000807f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c1993005b546001600160a01b031692915050565b600e546000908152600f6020526040902060010154431115611d56576040516331bad64960e01b815260040160405180910390fd5b611d9e611d796004544311611d6c576000612888565b600454610e2e904361418f565b6000848152600a602090815260408083203384526007019091529020600101906128bf565b6001600160d01b0316811115611dc7576040516314fea1a960e11b815260040160405180910390fd5b6000828152600a6020526040902060028101546001600160a01b03163303611e63576000838152600a602090815260408083203384526007019091528120611e119060010161277f565b6001600160d01b0316905081600501548382611e2d919061418f565b1080611e435750600154611e41848361418f565b105b15611e61576040516314fea1a960e11b815260040160405180910390fd5b505b611668338484612e0e565b611e76612945565b60018190556040518181527fe9a6d1b35cdb834e1d3cfe94b7199407fc9dbb6d64ba6c59b30295425d86d4c1906020016110cb565b600e546000908152600f6020526040902060010154431115611ee0576040516331bad64960e01b815260040160405180910390fd5b611a3a338234612edb565b611ef361283c565b611efb61300b565b611f05828261303c565b61105960016000805160206142ed83398151915255565b611f2461283c565b611f2c61300b565b611f3881600e5461303c565b611a3a60016000805160206142ed83398151915255565b6000818152600a602052604090206002015481906001600160a01b03163314611f8b57604051633387d70760e01b815260040160405180910390fd5b611f9361283c565b600e546000908152600f6020526040902060010154431115611fc8576040516331bad64960e01b815260040160405180910390fd5b6000828152600a602052604090206001600282810154600160a01b900460ff1690811115611ff857611ff8613da8565b1461201657604051636e1ed6c560e11b815260040160405180910390fd5b60028101805460ff60a01b1916600160a11b179055612036600c8461320c565b5060405183907fc3f4c6824ace066416e91f60e8762e0257019e0eb2e83afa4cdf62d23991e73990600090a2600581015460028201546001600160a01b0316600090815260078301602052604081209091906120949060010161277f565b6001600160d01b03166120a7919061418f565b905080156120ca57600282015482546120ca916001600160a01b03169083612e0e565b505061105960016000805160206142ed83398151915255565b6121176040518060a00160405280600081526020016000815260200160008152602001600015158152602001606081525090565b6040805160a0810182526000848152600f602081815284832080548552600181015482860152600281015495850195909552600585015460ff161515606085015291869052905290608082019061217090600301612938565b905292915050565b61218061300b565b61218861283c565b600e546000908152600f60205260409020600101544311156121bd576040516331bad64960e01b815260040160405180910390fd5b6121ca8383836000613218565b61166860016000805160206142ed83398151915255565b6121e9612945565b600e546000908152600f602052604090206001015443111561221e576040516331bad64960e01b815260040160405180910390fd5b60048190556040518181527f3cd59cf395448ba3bfd2541dcb31ccd800b9e303281df0888a62ae5d5f673f58906020016110cb565b61225b61300b565b61226361283c565b600e546000908152600f6020526040902060010154431115612298576040516331bad64960e01b815260040160405180910390fd5b6121ca8383836001613218565b6000807f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c00611d11565b6123006040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b6000828152600f60205260408120546123519061232390610e2e9060019061418f565b6000868152600a602090815260408083206001600160a01b038b1684526007019091529020600101906128bf565b6001600160d01b031690506000600f6000858152602001908152602001600020600601600086815260200190815260200160002090506040518060a0016040528086815260200185815260200183815260200160008360040154116123b75760006123f9565b82600401548468056bc75e2d63100000856006015486600501546123db91906141b8565b6123e591906141cf565b6123ef91906141b8565b6123f991906141cf565b81526000878152600a602090815260408083206001600160a01b038c1684526007018252808320898452600201825290912054910152925050505b9392505050565b6001600160a01b0381166000908152601060205260408120610abf90612922565b612464613adf565b6000828152600a60209081526040918290208251610100810184528154815260018201546001600160a01b039081169382019390935260028083015493841694820194909452909290916060830191600160a01b90910460ff16908111156124ce576124ce613da8565b81526020018260030154815260200182600501548152602001826004015481526020016124fd8360060161277f565b6001600160d01b031690529392505050565b611a3a43821061251f5743612baf565b81612baf565b61252d612945565b7f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c0080546001600160a01b0319166001600160a01b0383169081178255612571611cec565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a35050565b6125b2612945565b600e546000908152600f60205260409020600101544311156125e7576040516331bad64960e01b815260040160405180910390fd5b80826125f3858761417c565b6125fd919061417c565b612607919061417c565b68056bc75e2d631000001461262f5760405163e2b5214560e01b815260040160405180910390fd5b60058490556006839055600782905560088190556040805185815260208101859052908101839052606081018290527f9fed7ac1282e0ba1555a16ba3a71b4db07d3740cc71e611b077b581d1ad87c0b9060800160405180910390a150505050565b6000828152600a602052604090206002015482906001600160a01b031633146126cd57604051633387d70760e01b815260040160405180910390fd5b600e546000908152600f6020526040902060010154431115612702576040516331bad64960e01b815260040160405180910390fd5b68056bc75e2d6310000082111561272c5760405163d1be20e560e01b815260040160405180910390fd5b6000838152600a602090815260409182902060040184905581518581529081018490527fdc7c1eb84b8e606e429c65b5053a00111db03437dbbad386aa5c2cb0ea19d84d910160405180910390a1505050565b805460009080156127bd576127a78361279960018461418f565b600091825260209091200190565b54600160301b90046001600160d01b0316612434565b60009392505050565b610d2e61339a565b6127d661339a565b610d2e6133e3565b6127e661339a565b610d2e6133eb565b60008183106127fd5781612434565b5090919050565b7f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c0080546001600160a01b03191681556110598261340c565b6000805160206142ed83398151915280546001190161286e57604051633ee5aeb560e01b815260040160405180910390fd5b60029055565b60016000805160206142ed83398151915255565b600065ffffffffffff8211156128bb576040516306dfcc6560e41b81526030600482015260248101839052604401611a28565b5090565b8154600090816128d18585838561347d565b905080156128fe576128e88561279960018461418f565b54600160301b90046001600160d01b0316612901565b60005b95945050505050565b60008181526001830160205260408120541515612434565b6000610abf825490565b600061243483836134d7565b6060600061243483613501565b3361294e611cec565b6001600160a01b031614610d2e5760405163118cdaa760e01b8152336004820152602401611a28565b61297f61355d565b6000805160206142cd833981519152805460ff191681557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b0390911681526020016110cb565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480612a5857507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316612a4c6000805160206142ad833981519152546001600160a01b031690565b6001600160a01b031614155b15610d2e5760405163703e46dd60e11b815260040160405180910390fd5b611a3a612945565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015612ad8575060408051601f3d908101601f19168201909252612ad591810190614221565b60015b612b0057604051634c9c8ce360e01b81526001600160a01b0383166004820152602401611a28565b6000805160206142ad8339815191528114612b3157604051632a87526960e21b815260048101829052602401611a28565b611668838361358d565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610d2e5760405163703e46dd60e11b815260040160405180910390fd5b600080612ba4612b9343612888565b612b9c856135e3565b869190613617565b915091509250929050565b600e546000908152600f602052604090206001810154431015612bd0575050565b6000612bdd600054611a4d565b90505b828260010154101561166857600e8054906000612bfc836141f1565b9091555050600e546000908152600f60205260409020600180840154612c219161417c565b808255600454600191612c34919061417c565b612c3e919061418f565b6001820155600354600282015560005b8251811015612d8057612c86838281518110612c6c57612c6c6141a2565b60200260200101518360030161363290919063ffffffff16565b50612cd4612c978560010154612888565b600a6000868581518110612cad57612cad6141a2565b602002602001015181526020019081526020016000206006016128bf90919063ffffffff16565b6001600160d01b0316826006016000858481518110612cf557612cf56141a2565b6020026020010151815260200190815260200160002060040181905550600a6000848381518110612d2857612d286141a2565b6020026020010151815260200190815260200160002060040154826006016000858481518110612d5a57612d5a6141a2565b602090810291909101810151825281019190915260400160002060060155600101612c4e565b8193507f0129593a287c7be892e56181ff1238eb466a2c952dc53a3029140d1f3ddc4a8d600e54604051612db691815260200190565b60405180910390a15050612be0565b612dcd61300b565b6000805160206142cd833981519152805460ff191660011781557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258336129b9565b6000828152600a60205260409020612e2c6006820161363e8461364a565b50506001600160a01b03841660009081526007820160205260409020612e589060010161363e8461364a565b50506040516001600160a01b0385169083156108fc029084906000818181858888f19350505050158015612e90573d6000803e3d6000fd5b5082846001600160a01b03167f7fc4727e062e336010f2c282598ef5f14facb3de68cf8195c2f23e1454b2b74e84604051612ecd91815260200190565b60405180910390a350505050565b6000828152600a602052604090206001600282810154600160a01b900460ff1690811115612f0b57612f0b613da8565b14612f2957604051636e1ed6c560e11b815260040160405180910390fd5b6001600160a01b0384166000908152601060205260409020612f4b8185613632565b50612f5c8260060161367f8561364a565b50506001600160a01b03851660009081526007830160205260408120612f889060010161367f8661364a565b506001600160a01b038716600090815260078501602052604081206001600160d01b03929092169250829003612fbe57600e5481555b85876001600160a01b03167f1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee9087604051612ffa91815260200190565b60405180910390a350505050505050565b6000805160206142cd8339815191525460ff1615610d2e5760405163d93c066560e01b815260040160405180910390fd5b6000828152600a60209081526040808320338452600701909152812090805b82548411156131be576000600f60008560000154600161307b919061417c565b815260208082019290925260409081016000908120898252600681019093522060058201549192509060ff166130b25750506131be565b84548560006130c0836141f1565b919050555060008160040154116130d8576000613139565b68056bc75e2d6310000081600601548260040154836005015461310861199960018860000154610e2e919061418f565b6001600160d01b031661311b91906141b8565b61312591906141cf565b61312f91906141b8565b61313991906141cf565b93508360000361314a57505061305b565b845460009081526002860160205260409020849055613169848461417c565b855460408051338152602081018b905290810191909152606081018690529093507f4952128cd80b7e898bd01cdbeef5d50f236e06f3e18d6961eed5ad968aca61ad9060800160405180910390a1505061305b565b806000036131df576040516312d37ee560e31b815260040160405180910390fd5b604051339082156108fc029083906000818181858888f19350505050158015610cf3573d6000803e3d6000fd5b6000612434838361368b565b6001600160a01b0384166000908152600b60205260409020541561324f57604051636e1ed6c560e11b815260040160405180910390fd5b68056bc75e2d631000008211156132795760405163d1be20e560e01b815260040160405180910390fd5b60098054906000613289836141f1565b90915550506009546000908152600a602052604090206001543410156132c257604051630103be3b60e21b815260040160405180910390fd5b81156132cf573460058201555b6009805482556002820180546001840180546001600160a01b038a81166001600160a01b031990921682179092559088166001600160a81b031990921691909117600160a01b179091556004830185905590546000918252600b602052604090912081905561334090859034612edb565b60095461334f90600c90613632565b50836001600160a01b0316856001600160a01b03166009547fe5c2985d22a121f4f7b534ee3a7ab105a620e670bb02f5d1188e20a8670f401e60405160405180910390a45050505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff16610d2e57604051631afcd79f60e31b815260040160405180910390fd5b61287461339a565b6133f361339a565b6000805160206142cd833981519152805460ff19169055565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b60005b81831015610feb5760006134948484613785565b60008781526020902090915065ffffffffffff86169082015465ffffffffffff1611156134c3578092506134d1565b6134ce81600161417c565b93505b50613480565b60008260000182815481106134ee576134ee6141a2565b9060005260206000200154905092915050565b60608160000180548060200260200160405190810160405280929190818152602001828054801561355157602002820191906000526020600020905b81548152602001906001019080831161353d575b50505050509050919050565b6000805160206142cd8339815191525460ff16610d2e57604051638dfc202b60e01b815260040160405180910390fd5b613596826137a0565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a28051156135db576116688282613805565b611059613872565b60006001600160d01b038211156128bb576040516306dfcc6560e41b815260d0600482015260248101839052604401611a28565b600080613625858585613891565b915091505b935093915050565b60006124348383613a0b565b6000612434828461423a565b60008061362561365943612888565b6136776136658861277f565b61366e876135e3565b8863ffffffff16565b879190613617565b6000612434828461425a565b600081815260018301602052604081205480156137745760006136af60018361418f565b85549091506000906136c39060019061418f565b90508082146137285760008660000182815481106136e3576136e36141a2565b9060005260206000200154905080876000018481548110613706576137066141a2565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806137395761373961427a565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610abf565b6000915050610abf565b5092915050565b600061379460028484186141cf565b6124349084841661417c565b806001600160a01b03163b6000036137d657604051634c9c8ce360e01b81526001600160a01b0382166004820152602401611a28565b6000805160206142ad83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b0316846040516138229190614290565b600060405180830381855af49150503d806000811461385d576040519150601f19603f3d011682016040523d82523d6000602084013e613862565b606091505b5091509150612901858383613a5a565b3415610d2e5760405163b398979f60e01b815260040160405180910390fd5b8254600090819080156139b05760006138af8761279960018561418f565b60408051808201909152905465ffffffffffff808216808452600160301b9092046001600160d01b03166020840152919250908716101561390357604051632520601d60e01b815260040160405180910390fd5b805165ffffffffffff80881691160361394f57846139268861279960018661418f565b80546001600160d01b0392909216600160301b0265ffffffffffff9092169190911790556139a0565b6040805180820190915265ffffffffffff80881682526001600160d01b0380881660208085019182528b54600181018d5560008d81529190912094519151909216600160301b029216919091179101555b60200151925083915061362a9050565b50506040805180820190915265ffffffffffff80851682526001600160d01b0380851660208085019182528854600181018a5560008a815291822095519251909316600160301b02919093161792019190915590508161362a565b6000818152600183016020526040812054613a5257508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610abf565b506000610abf565b606082613a6f57613a6a82613ab6565b612434565b8151158015613a8657506001600160a01b0384163b155b15613aaf57604051639996b31560e01b81526001600160a01b0385166004820152602401611a28565b5080612434565b805115613ac65780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b60408051610100810182526000808252602082018190529181018290529060608201908152602001600081526020016000815260200160008152602001600081525090565b6001600160a01b0381168114611a3a57600080fd5b60008060408385031215613b4c57600080fd5b8235613b5781613b24565b946020939093013593505050565b81518152602080830151908201526040808301519082015260608101610abf565b634e487b7160e01b600052604160045260246000fd5b604051610140810167ffffffffffffffff81118282101715613bc057613bc0613b86565b60405290565b60405160a0810167ffffffffffffffff81118282101715613bc057613bc0613b86565b604051601f8201601f1916810167ffffffffffffffff81118282101715613c1257613c12613b86565b604052919050565b8035613c2581613b24565b919050565b60006101408284031215613c3d57600080fd5b613c45613b9c565b613c4e83613c1a565b81526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c082015260e083013560e08201526101008084013581830152506101208084013581830152508091505092915050565b60008060408385031215613ccb57600080fd5b50508035926020909101359150565b600060208284031215613cec57600080fd5b813561243481613b24565b6020808252825182820181905260009190848201906040850190845b81811015613d4d57613d3a8385518051825260208082015190830152604090810151910152565b9284019260609290920191600101613d13565b50909695505050505050565b60008151808452602080850194506020840160005b83811015613d8a57815187529582019590820190600101613d6e565b509495945050505050565b6020815260006124346020830184613d59565b634e487b7160e01b600052602160045260246000fd5b815181526020808301516001600160a01b039081169183019190915260408084015190911690820152606082015161010082019060038110613e1057634e487b7160e01b600052602160045260246000fd5b806060840152506080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015292915050565b60008060408385031215613e5857600080fd5b8235613e6381613b24565b915060208381013567ffffffffffffffff80821115613e8157600080fd5b818601915086601f830112613e9557600080fd5b813581811115613ea757613ea7613b86565b613eb9601f8201601f19168501613be9565b91508082528784828501011115613ecf57600080fd5b80848401858401376000848284010152508093505050509250929050565b600060208284031215613eff57600080fd5b5035919050565b80358015158114613c2557600080fd5b60008060006060808587031215613f2c57600080fd5b8435935060208086013567ffffffffffffffff80821115613f4c57600080fd5b818801915088601f830112613f6057600080fd5b813581811115613f7257613f72613b86565b613f80848260051b01613be9565b818152848101925060a091820284018501918b831115613f9f57600080fd5b938501935b82851015613ffb5780858d031215613fbc5760008081fd5b613fc4613bc6565b8535815286860135878201526040808701359082015287860135888201526080808701359082015284529384019392850192613fa4565b5080975050505050505061401160408501613f06565b90509250925092565b60005b8381101561403557818101518382015260200161401d565b50506000910152565b602081526000825180602084015261405d81604085016020870161401a565b601f01601f19169190910160400192915050565b602081528151602082015260208201516040820152604082015160608201526060820151151560808201526000608083015160a0808401526140b660c0840182613d59565b949350505050565b6000806000606084860312156140d357600080fd5b83356140de81613b24565b925060208401356140ee81613b24565b929592945050506040919091013590565b60008060006060848603121561411457600080fd5b833561411f81613b24565b95602085013595506040909401359392505050565b6000806000806080858703121561414a57600080fd5b5050823594602084013594506040840135936060013592509050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610abf57610abf614166565b81810381811115610abf57610abf614166565b634e487b7160e01b600052603260045260246000fd5b8082028115828204841417610abf57610abf614166565b6000826141ec57634e487b7160e01b600052601260045260246000fd5b500490565b60006001820161420357614203614166565b5060010190565b60008161421957614219614166565b506000190190565b60006020828403121561423357600080fd5b5051919050565b6001600160d01b0382811682821603908082111561377e5761377e614166565b6001600160d01b0381811683821601908082111561377e5761377e614166565b634e487b7160e01b600052603160045260246000fd5b600082516142a281846020870161401a565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbccd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f033009b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00a26469706673582212209c73d8ce1f059b20807dc076c2144810f81b5c9425d1256f0d28ae2ae959704364736f6c63430008180033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "CheckpointUnorderedInsertion()": [
        {
          "details": "A value was attempted to be inserted on a past checkpoint."
        }
      ],
      "ERC1967InvalidImplementation(address)": [
        {
          "details": "The `implementation` of the proxy is invalid."
        }
      ],
      "ERC1967NonPayable()": [
        {
          "details": "An upgrade function sees `msg.value > 0` that may be lost."
        }
      ],
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeCastOverflowedUintDowncast(uint8,uint256)": [
        {
          "details": "Value doesn't fit in an uint of `bits` size."
        }
      ],
      "UUPSUnauthorizedCallContext()": [
        {
          "details": "The call is from an unauthorized context."
        }
      ],
      "UUPSUnsupportedProxiableUUID(bytes32)": [
        {
          "details": "The storage `slot` is unsupported as a UUID."
        }
      ]
    },
    "events": {
      "DlpDeregistered(uint256)": {
        "params": {
          "dlpId": "id of the dlp"
        }
      },
      "DlpDeregisteredByOwner(uint256,uint256,uint256)": {
        "params": {
          "dlpId": "id of the dlp",
          "penaltyAmount": "penalty amount",
          "unstakeAmount": "amount unstake"
        }
      },
      "DlpRegistered(uint256,address,address)": {
        "params": {
          "dlpAddress": "address of the dlp",
          "dlpId": "id of the dlp",
          "ownerAddress": "owner of the dlp"
        }
      },
      "DlpStakersPercentageUpdated(uint256,uint256)": {
        "params": {
          "dlpId": "id of the dlp",
          "stakersPercentage": "new stakers percentage"
        }
      },
      "EpochCreated(uint256)": {
        "params": {
          "epochId": "reward epoch id"
        }
      },
      "EpochPerformancesSaved(uint256,bool)": {
        "params": {
          "epochId": "epoch id",
          "isFinalised": "true if the performances are final"
        }
      },
      "EpochRewardAmountUpdated(uint256)": {
        "params": {
          "newEpochRewardAmount": "new epoch reward amount"
        }
      },
      "EpochSizeUpdated(uint256)": {
        "params": {
          "newEpochSize": "new epoch size"
        }
      },
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "MaxNumberOfDlpsUpdated(uint256)": {
        "params": {
          "newMaxNumberOfDlps": "new max number of dlps"
        }
      },
      "MinDlpStakeAmountUpdated(uint256)": {
        "params": {
          "newMinDlpStakeAmount": "new minDlpStakeAmount"
        }
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "PerformancePercentagesUpdated(uint256,uint256,uint256,uint256)": {
        "params": {
          "newTfcPercentage": "new tfc percentage",
          "newTtfPercentage": "new ttf percentage",
          "newUwPercentage": "new uw percentage",
          "newVduPercentage": "new vdu percentage"
        }
      },
      "ScoresUpdated(uint256[],uint256[])": {
        "params": {
          "dlpIds": "dlp ids",
          "scores": "dlp scores"
        }
      },
      "Staked(address,uint256,uint256)": {
        "params": {
          "amount": "amount stake",
          "dlpId": "id of the dlp",
          "staker": "address of the staker"
        }
      },
      "StakerDlpEpochRewardClaimed(address,uint256,uint256,uint256)": {
        "params": {
          "claimAmount": "amount claimed",
          "dlpId": "id of the dlp",
          "epochId": "epoch id",
          "staker": "address of the staker"
        }
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      },
      "Unstaked(address,uint256,uint256)": {
        "params": {
          "amount": "amount unstake",
          "dlpId": "id of the dlp",
          "staker": "address of the staker"
        }
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "claimReward(uint256)": {
        "params": {
          "dlpId": "dlp id"
        }
      },
      "claimRewardUntilEpoch(uint256,uint256)": {
        "params": {
          "dlpId": "id of the dlp",
          "lastEpochToClaim": "epoch id"
        }
      },
      "claimableAmount(address,uint256)": {
        "params": {
          "dlpId": "id of the dlp",
          "stakerAddress": "address of the staker"
        }
      },
      "createEpochsUntilBlockNumber(uint256)": {
        "details": "useful only when createEpochs cannot be called because there are to many epochs to create",
        "params": {
          "blockNumber": "block number"
        }
      },
      "deregisterDlp(uint256)": {
        "params": {
          "dlpId": "dlp id"
        }
      },
      "distributeStakeAfterDeregistration(uint256,uint256)": {
        "params": {
          "dlpId": "dlp id",
          "dlpOwnerAmount": "amount to distribute to the dlp owner"
        }
      },
      "dlpEpochs(uint256,uint256)": {
        "params": {
          "dlpId": "id of the dlp",
          "epochId": "epoch id"
        }
      },
      "dlps(uint256)": {
        "params": {
          "dlpId": "id of the dlp"
        }
      },
      "dlpsByAddress(address)": {
        "params": {
          "dlpAddress": "address of the dlp"
        }
      },
      "epochs(uint256)": {
        "params": {
          "epochId": "epoch id"
        }
      },
      "initialize((address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))": {
        "params": {
          "params": "initialization parameters"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "Pauses the contract"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "registerDlp(address,address,uint256)": {
        "params": {
          "dlpAddress": "address of the dlp",
          "dlpOwnerAddress": "owner of the dlp",
          "stakersPercentage": "percentage of the rewards that will be distributed to the stakers"
        }
      },
      "registerDlpWithGrant(address,address,uint256)": {
        "params": {
          "dlpAddress": "address of the dlp",
          "dlpOwnerAddress": "owner of the dlp",
          "stakersPercentage": "percentage of the rewards that will be distributed to the stakers"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "saveEpochPerformances(uint256,(uint256,uint256,uint256,uint256,uint256)[],bool)": {
        "params": {
          "dlpPerformances": "An array of DLPPerformance structs containing the performance metrics of the DLPs",
          "epochId": "The ID of the epoch"
        }
      },
      "stake(uint256)": {
        "params": {
          "dlpId": "dlp id"
        }
      },
      "stakerDlpEpochs(address,uint256,uint256)": {
        "params": {
          "dlpId": "id of the dlp",
          "epochId": "epoch id",
          "staker": "address of the staker"
        }
      },
      "stakerDlps(address,uint256)": {
        "params": {
          "dlpId": "id of the dlp",
          "stakerAddress": "address of the staker"
        }
      },
      "stakerDlpsList(address)": {
        "params": {
          "stakerAddress": "address of the staker"
        }
      },
      "topDlpIds(uint256)": {
        "params": {
          "numberOfDlps": "number of dlps"
        }
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      },
      "unpause()": {
        "details": "Unpauses the contract"
      },
      "unstake(uint256,uint256)": {
        "params": {
          "amount": "amount to unstake",
          "dlpId": "dlp id"
        }
      },
      "updateDlpStakersPercentage(uint256,uint256)": {
        "params": {
          "dlpId": "dlp id",
          "stakersPercentage": "new stakers percentage"
        }
      },
      "updateEpochRewardAmount(uint256)": {
        "params": {
          "newEpochRewardAmount": "new epoch size"
        }
      },
      "updateEpochSize(uint256)": {
        "params": {
          "newEpochSize": "new epoch size"
        }
      },
      "updateMaxNumberOfDlps(uint256)": {
        "params": {
          "newMaxNumberOfDlps": "new maximum number of dlps"
        }
      },
      "updateMinDlpStakeAmount(uint256)": {
        "params": {
          "newMinDlpStakeAmount": "new minDlpStakeAmount"
        }
      },
      "updatePerformancePercentages(uint256,uint256,uint256,uint256)": {
        "params": {
          "newTfcPercentage": "new tfc percentage",
          "newTtfPercentage": "new ttf percentage",
          "newUwPercentage": "new uw percentage",
          "newVduPercentage": "new vdu percentage"
        }
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "DlpDeregistered(uint256)": {
        "notice": "Triggered when a dlp has been deregistered"
      },
      "DlpDeregisteredByOwner(uint256,uint256,uint256)": {
        "notice": "Triggered when a dlp has been deregistered by the dlp owner"
      },
      "DlpRegistered(uint256,address,address)": {
        "notice": "Triggered when a dlp has registered"
      },
      "DlpStakersPercentageUpdated(uint256,uint256)": {
        "notice": "Triggered when the dlp stakers percentage has been updated"
      },
      "EpochCreated(uint256)": {
        "notice": "Triggered when a epoch has been created"
      },
      "EpochPerformancesSaved(uint256,bool)": {
        "notice": "Triggered when epoch performances have been saved"
      },
      "EpochRewardAmountUpdated(uint256)": {
        "notice": "Triggered when the epoch reward amount has been updated"
      },
      "EpochSizeUpdated(uint256)": {
        "notice": "Triggered when the epoch size has been updated"
      },
      "MaxNumberOfDlpsUpdated(uint256)": {
        "notice": "Triggered when the max number of dlps has been updated"
      },
      "MinDlpStakeAmountUpdated(uint256)": {
        "notice": "Triggered when the minDlpStakeAmount has been updated"
      },
      "PerformancePercentagesUpdated(uint256,uint256,uint256,uint256)": {
        "notice": "Triggered when the performance percentages has been updated"
      },
      "ScoresUpdated(uint256[],uint256[])": {
        "notice": "Triggered when owner has updated its scores"
      },
      "Staked(address,uint256,uint256)": {
        "notice": "Triggered when user has stake some DAT for a DLP"
      },
      "StakerDlpEpochRewardClaimed(address,uint256,uint256,uint256)": {
        "notice": "Triggered when a staker has claimed a reward for a dlp in an epoch"
      },
      "Unstaked(address,uint256,uint256)": {
        "notice": "Triggered when user has unstake some DAT from a DLP"
      }
    },
    "kind": "user",
    "methods": {
      "addRewardForDlps()": {
        "notice": "Adds rewards for dlps"
      },
      "claimReward(uint256)": {
        "notice": "Claims reward for a dlp until the current epoch"
      },
      "claimRewardUntilEpoch(uint256,uint256)": {
        "notice": "Claims reward for a dlp until a specific epoch"
      },
      "claimableAmount(address,uint256)": {
        "notice": "Gets the claimable amount for a staker for a dlp"
      },
      "createEpochs()": {
        "notice": "Creates epochs until current block number"
      },
      "createEpochsUntilBlockNumber(uint256)": {
        "notice": "Creates epochs until a specific block number"
      },
      "deregisterDlp(uint256)": {
        "notice": "Deregisters dlp"
      },
      "distributeStakeAfterDeregistration(uint256,uint256)": {
        "notice": "Distributes stake after deregistration of a granted DLP"
      },
      "dlpEpochs(uint256,uint256)": {
        "notice": "Gets epoch dlp information"
      },
      "dlps(uint256)": {
        "notice": "Gets the dlp information"
      },
      "dlpsByAddress(address)": {
        "notice": "Gets the dlp information"
      },
      "epochs(uint256)": {
        "notice": "Gets epoch information"
      },
      "initialize((address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))": {
        "notice": "Initialize the contract"
      },
      "registerDlp(address,address,uint256)": {
        "notice": "Registers a dlp"
      },
      "registerDlpWithGrant(address,address,uint256)": {
        "notice": "Registers a dlp with grant"
      },
      "registeredDlps()": {
        "notice": "Gets registered dlps list"
      },
      "saveEpochPerformances(uint256,(uint256,uint256,uint256,uint256,uint256)[],bool)": {
        "notice": "Saves the performances of top DLPs for a specific epoch and calculates the rewards for the DLPs"
      },
      "stake(uint256)": {
        "notice": "Stakes Vana tokens for a DLP"
      },
      "stakerDlpEpochs(address,uint256,uint256)": {
        "notice": "Gets information about the staker for a dlp in an epoch"
      },
      "stakerDlps(address,uint256)": {
        "notice": "Gets the information about the dlp for a staker"
      },
      "stakerDlpsList(address)": {
        "notice": "Gets the information about the dlps for which the staker has staked"
      },
      "stakerDlpsListCount(address)": {
        "notice": "Gets the number of dlps for which the staker has staked"
      },
      "topDlpIds(uint256)": {
        "notice": "Gets the top dlps ids"
      },
      "unstake(uint256,uint256)": {
        "notice": "Unstakes Vana tokens from a DLP"
      },
      "updateDlpStakersPercentage(uint256,uint256)": {
        "notice": "Updates the stakers percentage for a dlp"
      },
      "updateEpochRewardAmount(uint256)": {
        "notice": "Updates the epochRewardAmount"
      },
      "updateEpochSize(uint256)": {
        "notice": "Updates the epoch size"
      },
      "updateMaxNumberOfDlps(uint256)": {
        "notice": "Updates the maximum number of dlps"
      },
      "updateMinDlpStakeAmount(uint256)": {
        "notice": "Updates the minDlpStakeAmount"
      },
      "updatePerformancePercentages(uint256,uint256,uint256,uint256)": {
        "notice": "Updates the performance percentages"
      },
      "version()": {
        "notice": "returns the version of the contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 19074,
        "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
        "label": "maxNumberOfDlps",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 19077,
        "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
        "label": "minDlpStakeAmount",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 19080,
        "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
        "label": "totalDlpsRewardAmount",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 19083,
        "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
        "label": "epochRewardAmount",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 19086,
        "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
        "label": "epochSize",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 19089,
        "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
        "label": "ttfPercentage",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 19092,
        "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
        "label": "tfcPercentage",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 19095,
        "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
        "label": "vduPercentage",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 19098,
        "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
        "label": "uwPercentage",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 19101,
        "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
        "label": "dlpsCount",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 19106,
        "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
        "label": "_dlps",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_struct(Dlp)19202_storage)"
      },
      {
        "astId": 19111,
        "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
        "label": "dlpIds",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 19114,
        "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
        "label": "_registeredDlps",
        "offset": 0,
        "slot": "12",
        "type": "t_struct(UintSet)10349_storage"
      },
      {
        "astId": 19117,
        "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
        "label": "epochsCount",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 19122,
        "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
        "label": "_epochs",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_struct(Epoch)19168_storage)"
      },
      {
        "astId": 19127,
        "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
        "label": "_stakers",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_struct(Staker)19206_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Checkpoint208)8833_storage)dyn_storage": {
        "base": "t_struct(Checkpoint208)8833_storage",
        "encoding": "dynamic_array",
        "label": "struct Checkpoints.Checkpoint208[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(DlpStatus)19136": {
        "encoding": "inplace",
        "label": "enum IDataLiquidityPoolsRoot.DlpStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(DlpStaker)19178_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IDataLiquidityPoolsRoot.DlpStaker)",
        "numberOfBytes": "32",
        "value": "t_struct(DlpStaker)19178_storage"
      },
      "t_mapping(t_address,t_struct(Staker)19206_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IDataLiquidityPoolsRoot.Staker)",
        "numberOfBytes": "32",
        "value": "t_struct(Staker)19206_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Dlp)19202_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IDataLiquidityPoolsRoot.Dlp)",
        "numberOfBytes": "32",
        "value": "t_struct(Dlp)19202_storage"
      },
      "t_mapping(t_uint256,t_struct(Epoch)19168_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IDataLiquidityPoolsRoot.Epoch)",
        "numberOfBytes": "32",
        "value": "t_struct(Epoch)19168_storage"
      },
      "t_mapping(t_uint256,t_struct(EpochDlp)19151_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IDataLiquidityPoolsRoot.EpochDlp)",
        "numberOfBytes": "32",
        "value": "t_struct(EpochDlp)19151_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Checkpoint208)8833_storage": {
        "encoding": "inplace",
        "label": "struct Checkpoints.Checkpoint208",
        "members": [
          {
            "astId": 8830,
            "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
            "label": "_key",
            "offset": 0,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 8832,
            "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
            "label": "_value",
            "offset": 6,
            "slot": "0",
            "type": "t_uint208"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Dlp)19202_storage": {
        "encoding": "inplace",
        "label": "struct IDataLiquidityPoolsRoot.Dlp",
        "members": [
          {
            "astId": 19180,
            "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 19182,
            "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
            "label": "dlpAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 19184,
            "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
            "label": "ownerAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address_payable"
          },
          {
            "astId": 19187,
            "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
            "label": "status",
            "offset": 20,
            "slot": "2",
            "type": "t_enum(DlpStatus)19136"
          },
          {
            "astId": 19189,
            "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
            "label": "registrationBlockNumber",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 19191,
            "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
            "label": "stakersPercentage",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 19193,
            "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
            "label": "grantedAmount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 19196,
            "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
            "label": "stakeAmountCheckpoints",
            "offset": 0,
            "slot": "6",
            "type": "t_struct(Trace208)8828_storage"
          },
          {
            "astId": 19201,
            "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
            "label": "stakers",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_struct(DlpStaker)19178_storage)"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(DlpStaker)19178_storage": {
        "encoding": "inplace",
        "label": "struct IDataLiquidityPoolsRoot.DlpStaker",
        "members": [
          {
            "astId": 19170,
            "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
            "label": "lastClaimedEpochId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 19173,
            "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
            "label": "stakeAmountCheckpoints",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Trace208)8828_storage"
          },
          {
            "astId": 19177,
            "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
            "label": "claimAmounts",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_uint256)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Epoch)19168_storage": {
        "encoding": "inplace",
        "label": "struct IDataLiquidityPoolsRoot.Epoch",
        "members": [
          {
            "astId": 19153,
            "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
            "label": "startBlock",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 19155,
            "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
            "label": "endBlock",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 19157,
            "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
            "label": "rewardAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 19160,
            "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
            "label": "dlpIds",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(UintSet)10349_storage"
          },
          {
            "astId": 19162,
            "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
            "label": "isFinalised",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 19167,
            "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
            "label": "dlps",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_uint256,t_struct(EpochDlp)19151_storage)"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(EpochDlp)19151_storage": {
        "encoding": "inplace",
        "label": "struct IDataLiquidityPoolsRoot.EpochDlp",
        "members": [
          {
            "astId": 19138,
            "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
            "label": "ttf",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 19140,
            "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
            "label": "tfc",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 19142,
            "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
            "label": "vdu",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 19144,
            "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
            "label": "uw",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 19146,
            "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
            "label": "stakeAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 19148,
            "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
            "label": "rewardAmount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 19150,
            "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
            "label": "stakersPercentage",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Set)9877_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 9872,
            "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 9876,
            "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
            "label": "_positions",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Staker)19206_storage": {
        "encoding": "inplace",
        "label": "struct IDataLiquidityPoolsRoot.Staker",
        "members": [
          {
            "astId": 19205,
            "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
            "label": "dlpIds",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(UintSet)10349_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Trace208)8828_storage": {
        "encoding": "inplace",
        "label": "struct Checkpoints.Trace208",
        "members": [
          {
            "astId": 8827,
            "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
            "label": "_checkpoints",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(Checkpoint208)8833_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(UintSet)10349_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 10348,
            "contract": "contracts/root/DataLiquidityPoolsRootImplementation.sol:DataLiquidityPoolsRootImplementation",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)9877_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint208": {
        "encoding": "inplace",
        "label": "uint208",
        "numberOfBytes": "26"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      }
    }
  }
}