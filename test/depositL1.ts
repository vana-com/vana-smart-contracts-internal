import chai, { should } from "chai";
import chaiAsPromised from "chai-as-promised";
import { ethers, upgrades } from "hardhat";
import { DAT, DepositImplementation } from "../typechain-types";
import { HardhatEthersSigner } from "@nomicfoundation/hardhat-ethers/signers";
import { parseEther } from "../utils/helpers";
import { getContractAddress } from "@ethersproject/address";

chai.use(chaiAsPromised);
should();

xdescribe("DepositL1", () => {
  let deployer: HardhatEthersSigner;
  let owner: HardhatEthersSigner;
  let user1: HardhatEthersSigner;
  let user2: HardhatEthersSigner;
  let user3: HardhatEthersSigner;

  const minDepositAmount = parseEther("35");
  const maxDepositAmount = parseEther("36");

  const validators = [
    {
      pubkey:
        "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      withdrawal_credentials:
        "0x0100000000000000000000000000000000000000000000000000000000000000",
      signature:
        "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      deposit_data_root:
        "0x0000000000000000000000000000000000000000000000000000000000000000",
    },
    {
      pubkey:
        "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
      withdrawal_credentials:
        "0x0100000000000000000000000000000000000000000000000000000000000001",
      signature:
        "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
      deposit_data_root:
        "0x904a5d017723cea1053da1218cca64b2706195767904ab20ba5c1391e282bda1",
    },
    {
      pubkey:
        "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      withdrawal_credentials:
        "0x0100000000000000000000000000000000000000000000000000000000000002",
      signature:
        "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      deposit_data_root:
        "0x64487ffc2d79fffb9817ccc84772aa46a326e5eb36cb28db62da1d135691b74c",
    },
    {
      pubkey:
        "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003",
      withdrawal_credentials:
        "0x0100000000000000000000000000000000000000000000000000000000000003",
      signature:
        "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003",
      deposit_data_root:
        "0x14db6a3ec3e63007a7c602faf536ee22efe8e989202be879b4bbd81a0eace7bc",
    },
    {
      pubkey:
        "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004",
      withdrawal_credentials:
        "0x0100000000000000000000000000000000000000000000000000000000000004",
      signature:
        "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004",
      deposit_data_root:
        "0x037212655bd85196b7f25f85afc8ddee31cb33bfc68b3462f09c7324eea035db",
    },
    {
      pubkey:
        "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005",
      withdrawal_credentials:
        "0x0100000000000000000000000000000000000000000000000000000000000005",
      signature:
        "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005",
      deposit_data_root:
        "0x97217d073b484e0bda7bcbf6f968171d28684e5b097d62fec000549ca017219d",
    },
    {
      pubkey:
        "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006",
      withdrawal_credentials:
        "0x0100000000000000000000000000000000000000000000000000000000000006",
      signature:
        "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006",
      deposit_data_root:
        "0x84f7dd90263c7da2e7ea3c90a32d7bfc1f282ea41f8a6198c46e24a4419a204c",
    },
    {
      pubkey:
        "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007",
      withdrawal_credentials:
        "0x0100000000000000000000000000000000000000000000000000000000000007",
      signature:
        "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007",
      deposit_data_root:
        "0x96217b9b09d02e91e9d7e2eb1a071409d819e61a71dc3c4b3dbd2c0c6bbbb858",
    },
    {
      pubkey:
        "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008",
      withdrawal_credentials:
        "0x0100000000000000000000000000000000000000000000000000000000000008",
      signature:
        "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008",
      deposit_data_root:
        "0x0db9b334a06f410495676c9c7ac1bcccad530e4b28a1b13281e0c4b6ad5d3d71",
    },
    {
      pubkey:
        "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009",
      withdrawal_credentials:
        "0x0100000000000000000000000000000000000000000000000000000000000009",
      signature:
        "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009",
      deposit_data_root:
        "0x3edf155ff9f8ed711175484a915951dc901dbc2df5dea380135f8c24fff7e8ad",
    },
  ];

  let deposit: DepositImplementation;
  let depositImplementation: DepositImplementation;

  const deploy = async () => {
    [deployer, owner, user1, user2, user3] = await ethers.getSigners();

    return;

    await ethers.provider.send("hardhat_setCode", [
      "0x4242424242424242424242424242424242424242",
      "0x608060405234801561001057600080fd5b50610427806100206000396000f3fe60806040526004361061001e5760003560e01c8063c6d93f4a14610028575b61002661003b565b005b6100266100363660046102f2565b61004d565b61004b61004661008c565b6100c4565b565b600061005761008c565b6001600160a01b03161461007e57604051630956634f60e01b815260040160405180910390fd5b61008882826100e8565b5050565b60006100bf7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b3660008037600080366000845af43d6000803e8080156100e3573d6000f35b3d6000fd5b6100f182610143565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a280511561013b5761013682826101bf565b505050565b610088610235565b806001600160a01b03163b60000361017e57604051634c9c8ce360e01b81526001600160a01b03821660048201526024015b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b0316846040516101dc91906103c2565b600060405180830381855af49150503d8060008114610217576040519150601f19603f3d011682016040523d82523d6000602084013e61021c565b606091505b509150915061022c858383610254565b95945050505050565b341561004b5760405163b398979f60e01b815260040160405180910390fd5b60608261026957610264826102b3565b6102ac565b815115801561028057506001600160a01b0384163b155b156102a957604051639996b31560e01b81526001600160a01b0385166004820152602401610175565b50805b9392505050565b8051156102c35780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561030557600080fd5b82356001600160a01b038116811461031c57600080fd5b9150602083013567ffffffffffffffff8082111561033957600080fd5b818501915085601f83011261034d57600080fd5b81358181111561035f5761035f6102dc565b604051601f8201601f19908116603f01168101908382118183101715610387576103876102dc565b816040528281528860208487010111156103a057600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000825160005b818110156103e357602081860181015185830152016103c9565b50600092019182525091905056fea264697066735822122055b01845a7fd15a0ac0369cba4be1661e6d13f03915248ac32bb44c2fa48e9d064736f6c63430008180033",
    ]);

    await ethers.provider.send("hardhat_setCode", [
      "0x1111111111111111111111111111111111111111",
      "0x60a06040523060805234801561001457600080fd5b5061001d610022565b6100d4565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000900460ff16156100725760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b03908116146100d15780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b60805161243b620000fe6000396000818161179c015281816117c5015261190b015261243b6000f3fe6080604052600436106101355760003560e01c806379ba5097116100ab578063ae3d83851161006f578063ae3d838514610365578063b974788d14610385578063c5f2892f146103a5578063c7cb0344146103ba578063e30c3978146103da578063f2fde38b146103ef57600080fd5b806379ba5097146102bc57806384780205146102d15780638da5cb5b146102f15780638ed832711461031e578063ad3cb1cc1461033457600080fd5b806352d1902d116100fd57806352d1902d146101d7578063621fd130146101fa578063645006ca1461021c5780636c36511a146102325780637072c6b11461028d578063715018a6146102a757600080fd5b806301ffc9a71461013a5780630945d42c1461016f5780630d5dc6361461019157806322895118146101b15780634f1ef286146101c4575b600080fd5b34801561014657600080fd5b5061015a610155366004611c1b565b61040f565b60405190151581526020015b60405180910390f35b34801561017b57600080fd5b5061018f61018a366004611c45565b610446565b005b34801561019d57600080fd5b5061018f6101ac366004611c5e565b61048a565b61018f6101bf366004611cc9565b6104d3565b61018f6101d2366004611e3f565b610e40565b3480156101e357600080fd5b506101ec610e5f565b604051908152602001610166565b34801561020657600080fd5b5061020f610e7c565b6040516101669190611edd565b34801561022857600080fd5b506101ec60425481565b34801561023e57600080fd5b5061027661024d366004611ef0565b805160208183018101805160448252928201919093012091525460ff8082169161010090041682565b604080519215158352901515602083015201610166565b34801561029957600080fd5b5060415461015a9060ff1681565b3480156102b357600080fd5b5061018f610e8e565b3480156102c857600080fd5b5061018f610ea2565b3480156102dd57600080fd5b5061018f6102ec366004611c45565b610eea565b3480156102fd57600080fd5b50610306610f27565b6040516001600160a01b039091168152602001610166565b34801561032a57600080fd5b506101ec60435481565b34801561034057600080fd5b5061020f604051806040016040528060058152602001640352e302e360dc1b81525081565b34801561037157600080fd5b5061018f610380366004611fcc565b610f5c565b34801561039157600080fd5b5061018f6103a0366004611fcc565b611016565b3480156103b157600080fd5b506101ec6110d0565b3480156103c657600080fd5b5061018f6103d5366004612001565b61129a565b3480156103e657600080fd5b506103066114fd565b3480156103fb57600080fd5b5061018f61040a366004612062565b611526565b60006001600160e01b031982166301ffc9a760e01b148061044057506001600160e01b03198216638564090760e01b145b92915050565b61044e6115ab565b60438190556040518181527ff3a20ec5419fa349cc76e6601e9ffbd3de96f394ead13b22aaa4c70937d91e01906020015b60405180910390a150565b6104926115ab565b6041805460ff19168215159081179091556040519081527fd7aca4f51b4d08b69d5c2d4e71231752ded12f65d8ec4db9146fdd901b547cef9060200161047f565b60415460ff16156105eb57604487876040516104f092919061207d565b9081526040519081900360200190205460ff166105635760405162461bcd60e51b815260206004820152602660248201527f4465706f736974436f6e74726163743a207075626c69634b6579206e6f7420616044820152651b1b1bddd95960d21b60648201526084015b60405180910390fd5b6044878760405161057592919061207d565b9081526040519081900360200190205460ff61010090910416156105eb5760405162461bcd60e51b815260206004820152602760248201527f4465706f736974436f6e74726163743a207075626c69636b657920616c726561604482015266191e481d5cd95960ca1b606482015260840161055a565b6001604488886040516105ff92919061207d565b90815260405190819003602001902080549115156101000261ff0019909216919091179055603086146106835760405162461bcd60e51b815260206004820152602660248201527f4465706f736974436f6e74726163743a20696e76616c6964207075626b6579206044820152650d8cadccee8d60d31b606482015260840161055a565b602084146106f25760405162461bcd60e51b815260206004820152603660248201527f4465706f736974436f6e74726163743a20696e76616c696420776974686472616044820152750eec2d8bec6e4cac8cadce8d2c2d8e640d8cadccee8d60531b606482015260840161055a565b606082146107545760405162461bcd60e51b815260206004820152602960248201527f4465706f736974436f6e74726163743a20696e76616c6964207369676e6174756044820152680e4ca40d8cadccee8d60bb1b606482015260840161055a565b6042543410156107b55760405162461bcd60e51b815260206004820152602660248201527f4465706f736974436f6e74726163743a206465706f7369742076616c756520746044820152656f6f206c6f7760d01b606482015260840161055a565b6107c3633b9aca00346120a3565b1561082c5760405162461bcd60e51b815260206004820152603360248201527f4465706f736974436f6e74726163743a206465706f7369742076616c7565206e6044820152726f74206d756c7469706c65206f66206777656960681b606482015260840161055a565b600061083c633b9aca00346120cd565b90506043543411156108a05760405162461bcd60e51b815260206004820152602760248201527f4465706f736974436f6e74726163743a206465706f7369742076616c756520746044820152660dede40d0d2ced60cb1b606482015260840161055a565b60006108ab826115dd565b90507f649bbc62d0e31342afea4e5cd82d4049e7e1ee912fc0889aa790803be39038c589898989858a8a6108e06020546115dd565b6040516108f498979695949392919061210a565b60405180910390a1600060028a8a600060801b6040516020016109199392919061217d565b60408051601f1981840301815290829052610933916121a4565b602060405180830381855afa158015610950573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061097391906121c0565b905060006002806109876040848a8c6121d9565b60405160200161099892919061207d565b60408051601f19818403018152908290526109b2916121a4565b602060405180830381855afa1580156109cf573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906109f291906121c0565b6002610a01896040818d6121d9565b604051610a15929190600090602001612203565b60408051601f1981840301815290829052610a2f916121a4565b602060405180830381855afa158015610a4c573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190610a6f91906121c0565b60408051602081019390935282015260600160408051601f1981840301815290829052610a9b916121a4565b602060405180830381855afa158015610ab8573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190610adb91906121c0565b90506000600280848c8c604051602001610af793929190612215565b60408051601f1981840301815290829052610b11916121a4565b602060405180830381855afa158015610b2e573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190610b5191906121c0565b604051600290610b6a908890600090889060200161222f565b60408051601f1981840301815290829052610b84916121a4565b602060405180830381855afa158015610ba1573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190610bc491906121c0565b60408051602081019390935282015260600160408051601f1981840301815290829052610bf0916121a4565b602060405180830381855afa158015610c0d573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190610c3091906121c0565b9050858114610cc45760405162461bcd60e51b815260206004820152605460248201527f4465706f736974436f6e74726163743a207265636f6e7374727563746564204460448201527f65706f7369744461746120646f6573206e6f74206d6174636820737570706c6960648201527319590819195c1bdcda5d17d9185d1857dc9bdbdd60621b608482015260a40161055a565b6001610cd26020600261234b565b610cdc9190612357565b60205410610d365760405162461bcd60e51b815260206004820152602160248201527f4465706f736974436f6e74726163743a206d65726b6c6520747265652066756c6044820152601b60fa1b606482015260840161055a565b600160206000828254610d49919061236a565b909155505060205460005b6020811015610e275781600116600103610d8b578260008260208110610d7c57610d7c61237d565b015550610e3795505050505050565b600260008260208110610da057610da061237d565b0154604080516020810192909252810185905260600160408051601f1981840301815290829052610dd0916121a4565b602060405180830381855afa158015610ded573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190610e1091906121c0565b9250610e1d6002836120cd565b9150600101610d54565b50610e30612393565b5050505050505b50505050505050565b610e48611791565b610e5182611836565b610e5b828261183e565b5050565b6000610e69611900565b506000805160206123e683398151915290565b6060610e896020546115dd565b905090565b610e966115ab565b610ea06000611949565b565b3380610eac6114fd565b6001600160a01b031614610ede5760405163118cdaa760e01b81526001600160a01b038216600482015260240161055a565b610ee781611949565b50565b610ef26115ab565b60428190556040518181527fb443c8bd39a1b60d415144f9148c6f90c2b68a553eb90c62cef5e44979db009d9060200161047f565b6000807f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c1993005b546001600160a01b031692915050565b610f646115ab565b60005b8151811015610e5b5760006044838381518110610f8657610f8661237d565b6020026020010151604051610f9b91906121a4565b908152604051908190036020019020805491151560ff1990921691909117905581517f96bcc68216c96a703dee086697121e574a54bae53149408b163c0345bf63875990839083908110610ff157610ff161237d565b60200260200101516040516110069190611edd565b60405180910390a1600101610f67565b61101e6115ab565b60005b8151811015610e5b57600160448383815181106110405761104061237d565b602002602001015160405161105591906121a4565b908152604051908190036020019020805491151560ff1990921691909117905581517f7ca62ac42a3a6554868c7ee9747afaf33c82d8a8a18e81add48ac79d490e655a908390839081106110ab576110ab61237d565b60200260200101516040516110c09190611edd565b60405180910390a1600101611021565b6020546000908190815b6020811015611216578160011660010361117a576002600082602081106111035761110361237d565b0154604080516020810192909252810185905260600160408051601f1981840301815290829052611133916121a4565b602060405180830381855afa158015611150573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061117391906121c0565b9250611201565b600283602183602081106111905761119061237d565b015460408051602081019390935282015260600160408051601f19818403018152908290526111be916121a4565b602060405180830381855afa1580156111db573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906111fe91906121c0565b92505b61120c6002836120cd565b91506001016110da565b506002826112256020546115dd565b6040516112399291906000906020016123a9565b60408051601f1981840301815290829052611253916121a4565b602060405180830381855afa158015611270573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061129391906121c0565b9250505090565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff166000811580156112e05750825b905060008267ffffffffffffffff1660011480156112fd5750303b155b90508115801561130b575080155b156113295760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561135357845460ff60401b1916600160401b1785555b61135b611981565b611363611981565b60005b61137260016020612357565b8110156114385760026021826020811061138e5761138e61237d565b0154602183602081106113a3576113a361237d565b015460408051602081019390935282015260600160408051601f19818403018152908290526113d1916121a4565b602060405180830381855afa1580156113ee573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061141191906121c0565b602161141e83600161236a565b6020811061142e5761142e61237d565b0155600101611366565b506042889055604387905560005b86518110156114a257600160448883815181106114655761146561237d565b602002602001015160405161147a91906121a4565b908152604051908190036020019020805491151560ff19909216919091179055600101611446565b506114ac89611949565b83156114f257845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050505050565b6000807f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c00610f4c565b61152e6115ab565b7f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c0080546001600160a01b0319166001600160a01b0383169081178255611572610f27565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a35050565b336115b4610f27565b6001600160a01b031614610ea05760405163118cdaa760e01b815233600482015260240161055a565b60408051600880825281830190925260609160208201818036833701905050905060c082901b8060071a60f81b8260008151811061161d5761161d61237d565b60200101906001600160f81b031916908160001a9053508060061a60f81b8260018151811061164e5761164e61237d565b60200101906001600160f81b031916908160001a9053508060051a60f81b8260028151811061167f5761167f61237d565b60200101906001600160f81b031916908160001a9053508060041a60f81b826003815181106116b0576116b061237d565b60200101906001600160f81b031916908160001a9053508060031a60f81b826004815181106116e1576116e161237d565b60200101906001600160f81b031916908160001a9053508060021a60f81b826005815181106117125761171261237d565b60200101906001600160f81b031916908160001a9053508060011a60f81b826006815181106117435761174361237d565b60200101906001600160f81b031916908160001a9053508060001a60f81b826007815181106117745761177461237d565b60200101906001600160f81b031916908160001a90535050919050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061181857507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661180c6000805160206123e6833981519152546001600160a01b031690565b6001600160a01b031614155b15610ea05760405163703e46dd60e11b815260040160405180910390fd5b610ee76115ab565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611898575060408051601f3d908101601f19168201909252611895918101906121c0565b60015b6118c057604051634c9c8ce360e01b81526001600160a01b038316600482015260240161055a565b6000805160206123e683398151915281146118f157604051632a87526960e21b81526004810182905260240161055a565b6118fb8383611989565b505050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610ea05760405163703e46dd60e11b815260040160405180910390fd5b7f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c0080546001600160a01b0319168155610e5b826119df565b610ea0611a50565b61199282611a99565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a28051156119d7576118fb8282611afe565b610e5b611b74565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff16610ea057604051631afcd79f60e31b815260040160405180910390fd5b806001600160a01b03163b600003611acf57604051634c9c8ce360e01b81526001600160a01b038216600482015260240161055a565b6000805160206123e683398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b031684604051611b1b91906121a4565b600060405180830381855af49150503d8060008114611b56576040519150601f19603f3d011682016040523d82523d6000602084013e611b5b565b606091505b5091509150611b6b858383611b93565b95945050505050565b3415610ea05760405163b398979f60e01b815260040160405180910390fd5b606082611ba857611ba382611bf2565b611beb565b8151158015611bbf57506001600160a01b0384163b155b15611be857604051639996b31560e01b81526001600160a01b038516600482015260240161055a565b50805b9392505050565b805115611c025780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b600060208284031215611c2d57600080fd5b81356001600160e01b031981168114611beb57600080fd5b600060208284031215611c5757600080fd5b5035919050565b600060208284031215611c7057600080fd5b81358015158114611beb57600080fd5b60008083601f840112611c9257600080fd5b50813567ffffffffffffffff811115611caa57600080fd5b602083019150836020828501011115611cc257600080fd5b9250929050565b60008060008060008060006080888a031215611ce457600080fd5b873567ffffffffffffffff80821115611cfc57600080fd5b611d088b838c01611c80565b909950975060208a0135915080821115611d2157600080fd5b611d2d8b838c01611c80565b909750955060408a0135915080821115611d4657600080fd5b50611d538a828b01611c80565b989b979a50959894979596606090950135949350505050565b80356001600160a01b0381168114611d8357600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611dc757611dc7611d88565b604052919050565b600082601f830112611de057600080fd5b813567ffffffffffffffff811115611dfa57611dfa611d88565b611e0d601f8201601f1916602001611d9e565b818152846020838601011115611e2257600080fd5b816020850160208301376000918101602001919091529392505050565b60008060408385031215611e5257600080fd5b611e5b83611d6c565b9150602083013567ffffffffffffffff811115611e7757600080fd5b611e8385828601611dcf565b9150509250929050565b60005b83811015611ea8578181015183820152602001611e90565b50506000910152565b60008151808452611ec9816020860160208601611e8d565b601f01601f19169290920160200192915050565b602081526000611beb6020830184611eb1565b600060208284031215611f0257600080fd5b813567ffffffffffffffff811115611f1957600080fd5b611f2584828501611dcf565b949350505050565b600082601f830112611f3e57600080fd5b8135602067ffffffffffffffff80831115611f5b57611f5b611d88565b8260051b611f6a838201611d9e565b9384528581018301938381019088861115611f8457600080fd5b84880192505b85831015611fc057823584811115611fa25760008081fd5b611fb08a87838c0101611dcf565b8352509184019190840190611f8a565b98975050505050505050565b600060208284031215611fde57600080fd5b813567ffffffffffffffff811115611ff557600080fd5b611f2584828501611f2d565b6000806000806080858703121561201757600080fd5b61202085611d6c565b93506020850135925060408501359150606085013567ffffffffffffffff81111561204a57600080fd5b61205687828801611f2d565b91505092959194509250565b60006020828403121561207457600080fd5b611beb82611d6c565b8183823760009101908152919050565b634e487b7160e01b600052601260045260246000fd5b6000826120b2576120b261208d565b500690565b634e487b7160e01b600052601160045260246000fd5b6000826120dc576120dc61208d565b500490565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60a08152600061211e60a083018a8c6120e1565b828103602084015261213181898b6120e1565b905082810360408401526121458188611eb1565b9050828103606084015261215a8186886120e1565b9050828103608084015261216e8185611eb1565b9b9a5050505050505050505050565b828482376fffffffffffffffffffffffffffffffff19919091169101908152601001919050565b600082516121b6818460208701611e8d565b9190910192915050565b6000602082840312156121d257600080fd5b5051919050565b600080858511156121e957600080fd5b838611156121f657600080fd5b5050820193919092039150565b82848237909101908152602001919050565b838152818360208301376000910160200190815292915050565b60008451612241818460208901611e8d565b67ffffffffffffffff199490941691909301908152601881019190915260380192915050565b600181815b808511156122a2578160001904821115612288576122886120b7565b8085161561229557918102915b93841c939080029061226c565b509250929050565b6000826122b957506001610440565b816122c657506000610440565b81600181146122dc57600281146122e657612302565b6001915050610440565b60ff8411156122f7576122f76120b7565b50506001821b610440565b5060208310610133831016604e8410600b8410161715612325575081810a610440565b61232f8383612267565b8060001904821115612343576123436120b7565b029392505050565b6000611beb83836122aa565b81810381811115610440576104406120b7565b80820180821115610440576104406120b7565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052600160045260246000fd5b838152600083516123c1816020850160208801611e8d565b67ffffffffffffffff1993909316919092016020810191909152603801939250505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca2646970667358221220630860945d93f0193f0a1b506c9ccdf774caf7bb9510702d6391f4a468e8e29764736f6c63430008180033",
    ]);

    const depositProxy = await ethers.getContractAt(
      "DepositProxy",
      "0x4242424242424242424242424242424242424242",
    );

    deposit = await ethers.getContractAt(
      "DepositImplementation",
      "0x4242424242424242424242424242424242424242",
    );

    depositImplementation = await ethers.getContractAt(
      "DepositImplementation",
      "0x1111111111111111111111111111111111111111",
    );

    await depositProxy.setImplementation(
      "0x1111111111111111111111111111111111111111",
      "0x",
    );

    await deposit.initialize(
      owner.address,
      minDepositAmount,
      maxDepositAmount,
      [validators[1].pubkey, validators[2].pubkey, validators[3].pubkey],
    ).should.be.fulfilled;

    console.log("****************");
    console.log(
      await ethers.provider.getCode(
        "0x4242424242424242424242424242424242424242",
      ),
    );
    console.log("****************");

    // await upgrades.forceImport(
    //   deposit.target.toString(),
    //   await ethers.getContractFactory("DepositImplementation"),
    //   {
    //     kind: "uups",
    //   },
    // );
  };

  describe("Setup", () => {
    beforeEach(async () => {
      await deploy();
    });

    it("should have correct params after deploy", async function () {
      const nextAddress0 = getContractAddress({
        from: "0x2c6A694c3C50f012d8287fD9dB4CF98c99680a81",
        nonce: 0,
      });

      const nextAddress1 = getContractAddress({
        from: "0x2c6A694c3C50f012d8287fD9dB4CF98c99680a81",
        nonce: 1,
      });

      console.log(nextAddress0);
      console.log(nextAddress1);
    });

    it("should updateMinDepositAmount when owner", async function () {
      await deposit.connect(owner).updateMinDepositAmount(parseEther("10"))
        .should.be.fulfilled;

      (await deposit.minDepositAmount()).should.eq(parseEther("10"));
    });

    it("should reject updateMinDepositAmount when non-owner", async function () {
      await deposit
        .connect(user1)
        .updateMinDepositAmount(parseEther("10"))
        .should.be.rejectedWith(
          `OwnableUnauthorizedAccount("${user1.address}")`,
        );
    });

    it("should updateMaxDepositAmount when owner", async function () {
      await deposit.connect(owner).updateMaxDepositAmount(parseEther("100"))
        .should.be.fulfilled;

      (await deposit.maxDepositAmount()).should.eq(parseEther("100"));
    });

    it("should reject updateMaxDepositAmount when non-owner", async function () {
      await deposit
        .connect(user1)
        .updateMaxDepositAmount(parseEther("100"))
        .should.be.rejectedWith(
          `OwnableUnauthorizedAccount("${user1.address}")`,
        );
    });

    it("should updateRestricted when owner", async function () {
      await deposit.connect(owner).updateRestricted(false).should.be.fulfilled;

      (await deposit.restricted()).should.eq(false);

      await deposit.connect(owner).updateRestricted(false).should.be.fulfilled;

      (await deposit.restricted()).should.eq(false);

      await deposit.connect(owner).updateRestricted(true).should.be.fulfilled;

      (await deposit.restricted()).should.eq(true);
    });

    it("should reject updateRestricted when non-owner", async function () {
      await deposit
        .connect(user1)
        .updateRestricted(false)
        .should.be.rejectedWith(
          `OwnableUnauthorizedAccount("${user1.address}")`,
        );
    });

    it("Should transferOwnership in 2 steps", async function () {
      await deposit
        .connect(owner)
        .transferOwnership(user2.address)
        .should.emit(deposit, "OwnershipTransferStarted")
        .withArgs(owner, user2);
      (await deposit.owner()).should.eq(owner);

      await deposit
        .connect(owner)
        .transferOwnership(user3.address)
        .should.emit(deposit, "OwnershipTransferStarted")
        .withArgs(owner, user3);
      (await deposit.owner()).should.eq(owner);

      await deposit
        .connect(user3)
        .acceptOwnership()
        .should.emit(deposit, "OwnershipTransferred");

      (await deposit.owner()).should.eq(user3);
    });

    it("Should reject transferOwnership when non-owner", async function () {
      await deposit
        .connect(user1)
        .transferOwnership(user2)
        .should.be.rejectedWith(
          `OwnableUnauthorizedAccount("${user1.address}")`,
        );
    });

    it("Should reject acceptOwnership when non-newOwner", async function () {
      await deposit
        .connect(owner)
        .transferOwnership(user2.address)
        .should.emit(deposit, "OwnershipTransferStarted")
        .withArgs(owner, user2);
      (await deposit.owner()).should.eq(owner);

      await deposit
        .connect(user3)
        .acceptOwnership()
        .should.be.rejectedWith(
          `OwnableUnauthorizedAccount("${user3.address}")`,
        );
    });

    it("Should upgradeTo when owner", async function () {
      await upgrades.upgradeProxy(
        deposit,
        await ethers.getContractFactory("DepositImplementationV2Mock", owner),
      );

      const newRoot = await ethers.getContractAt(
        "DepositImplementationV2Mock",
        deposit,
      );
      (await newRoot.owner()).should.eq(owner);

      (await newRoot.test()).should.eq("test");
    });

    it("Should upgradeTo when owner and emit event", async function () {
      const newRootImplementation = await ethers.deployContract(
        "DepositImplementationV2Mock",
      );

      await deposit
        .connect(owner)
        .upgradeToAndCall(newRootImplementation, "0x")
        .should.emit(deposit, "Upgraded")
        .withArgs(newRootImplementation);

      const newRoot = await ethers.getContractAt(
        "DepositImplementationV2Mock",
        deposit,
      );

      (await newRoot.owner()).should.eq(owner);

      (await newRoot.test()).should.eq("test");
    });

    it("Should reject upgradeTo when storage layout is incompatible", async function () {
      await upgrades
        .upgradeProxy(
          deposit,
          await ethers.getContractFactory("DepositImplementationV3Mock", owner),
        )
        .should.be.rejectedWith("New storage layout is incompatible");
    });

    it("Should reject upgradeTo when non owner", async function () {
      const newRootImplementation = await ethers.deployContract(
        "DepositImplementationV2Mock",
      );

      await deposit
        .connect(user1)
        .upgradeToAndCall(newRootImplementation, "0x")
        .should.be.rejectedWith(
          `OwnableUnauthorizedAccount("${user1.address}")`,
        );
    });
  });

  describe("Validators", () => {
    before(async function () {});

    beforeEach(async () => {
      await deploy();
    });

    it("should addAllowedValidators when owner", async function () {
      await deposit.connect(owner).addAllowedValidators([validators[4].pubkey])
        .should.be.fulfilled;

      const validator4 = await deposit.validators(validators[4].pubkey);
      validator4.isAllowed.should.eq(true);
      validator4.hasDeposit.should.eq(false);
    });

    it("should reject addAllowedValidators when non-owner", async function () {
      await deposit
        .connect(user1)
        .addAllowedValidators([validators[4].pubkey])
        .should.be.rejectedWith(
          `OwnableUnauthorizedAccount("${user1.address}")`,
        );
    });

    it("should addAllowedValidators when owner", async function () {
      await deposit
        .connect(owner)
        .addAllowedValidators([validators[4].pubkey, validators[5].pubkey])
        .should.be.fulfilled;

      const validator4 = await deposit.validators(validators[4].pubkey);
      validator4.isAllowed.should.eq(true);
      validator4.hasDeposit.should.eq(false);

      const validator5 = await deposit.validators(validators[5].pubkey);
      validator5.isAllowed.should.eq(true);
      validator5.hasDeposit.should.eq(false);
    });

    it("should removeAllowedValidators when owner", async function () {
      await deposit
        .connect(owner)
        .addAllowedValidators([validators[4].pubkey, validators[5].pubkey])
        .should.be.fulfilled;

      const validator4 = await deposit.validators(validators[4].pubkey);
      validator4.isAllowed.should.eq(true);
      validator4.hasDeposit.should.eq(false);

      const validator5 = await deposit.validators(validators[5].pubkey);
      validator5.isAllowed.should.eq(true);
      validator5.hasDeposit.should.eq(false);

      await deposit
        .connect(owner)
        .removeAllowedValidators([validators[4].pubkey]).should.be.fulfilled;

      const validator4After = await deposit.validators(validators[4].pubkey);
      validator4After.isAllowed.should.eq(false);
      validator4After.hasDeposit.should.eq(false);

      const validator5After = await deposit.validators(validators[5].pubkey);
      validator5After.isAllowed.should.eq(true);
      validator5After.hasDeposit.should.eq(false);
    });

    it("should reject removeAllowedValidators when non-owner", async function () {
      await deposit
        .connect(owner)
        .addAllowedValidators([validators[4].pubkey, validators[5].pubkey])
        .should.be.fulfilled;

      const validator4 = await deposit.validators(validators[4].pubkey);
      validator4.isAllowed.should.eq(true);
      validator4.hasDeposit.should.eq(false);

      const validator5 = await deposit.validators(validators[5].pubkey);
      validator5.isAllowed.should.eq(true);
      validator5.hasDeposit.should.eq(false);

      await deposit
        .connect(user1)
        .removeAllowedValidators([validators[4].pubkey])
        .should.be.rejectedWith(
          `OwnableUnauthorizedAccount("${user1.address}")`,
        );
    });
  });

  describe("Deposit", () => {
    before(async function () {});

    beforeEach(async () => {
      await deploy();
    });

    it("should deposit when allowed validator #1", async function () {
      await deposit
        .connect(user1)
        .deposit(
          validators[1].pubkey,
          validators[1].withdrawal_credentials,
          validators[1].signature,
          validators[1].deposit_data_root,
          {
            value: minDepositAmount,
          },
        )
        .should.emit(deposit, "DepositEvent");

      (await deposit.validators(validators[1].pubkey)).hasDeposit.should.eq(
        true,
      );
    });

    it("should deposit when allowed validator #2", async function () {
      await deposit
        .connect(owner)
        .addAllowedValidators([validators[4].pubkey, validators[5].pubkey])
        .should.be.fulfilled;

      await deposit
        .connect(user1)
        .deposit(
          validators[4].pubkey,
          validators[4].withdrawal_credentials,
          validators[4].signature,
          validators[4].deposit_data_root,
          {
            value: minDepositAmount,
          },
        )
        .should.emit(deposit, "DepositEvent");

      (await deposit.validators(validators[4].pubkey)).hasDeposit.should.eq(
        true,
      );
    });

    it("should reject deposit when non-allowed validator", async function () {
      await deposit.connect(owner).updateRestricted(true);
      await deposit
        .connect(user1)
        .deposit(
          validators[4].pubkey,
          validators[4].withdrawal_credentials,
          validators[4].signature,
          validators[4].deposit_data_root,
          {
            value: minDepositAmount,
          },
        )
        .should.be.rejectedWith("DepositContract: publicKey not allowed");
    });

    it("should reject deposit when permission was removed", async function () {
      await deposit.connect(owner).updateRestricted(true);
      await deposit
        .connect(owner)
        .removeAllowedValidators([validators[1].pubkey]).should.be.fulfilled;

      await deposit
        .connect(user1)
        .deposit(
          validators[1].pubkey,
          validators[1].withdrawal_credentials,
          validators[1].signature,
          validators[1].deposit_data_root,
          {
            value: minDepositAmount,
          },
        )
        .should.be.rejectedWith("DepositContract: publicKey not allowed");
    });

    it("should reject deposit when already deposited", async function () {
      await deposit.connect(owner).updateRestricted(true);
      await deposit
        .connect(user1)
        .deposit(
          validators[1].pubkey,
          validators[1].withdrawal_credentials,
          validators[1].signature,
          validators[1].deposit_data_root,
          {
            value: minDepositAmount,
          },
        )
        .should.emit(deposit, "DepositEvent");

      (await deposit.validators(validators[1].pubkey)).hasDeposit.should.eq(
        true,
      );

      await deposit
        .connect(user1)
        .deposit(
          validators[1].pubkey,
          validators[1].withdrawal_credentials,
          validators[1].signature,
          validators[1].deposit_data_root,
          {
            value: minDepositAmount,
          },
        )
        .should.be.rejectedWith("DepositContract: publickey already used");
    });

    it("should deposit when restricted = false", async function () {
      await deposit.connect(owner).updateRestricted(false);

      await deposit
        .connect(user1)
        .deposit(
          validators[4].pubkey,
          validators[4].withdrawal_credentials,
          validators[4].signature,
          validators[4].deposit_data_root,
          {
            value: minDepositAmount,
          },
        )
        .should.emit(deposit, "DepositEvent");
    });
  });
});
